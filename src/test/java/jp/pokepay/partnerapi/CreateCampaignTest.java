// DO NOT EDIT: File is generated by code generator.
package jp.pokepay.partnerapi;

import jp.pokepay.partnerapi.request.CreateCampaign;
import jp.pokepay.partnerapi.request.Request;
import com.google.gson.JsonObject;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class CreateCampaignTest {
    @Test
    void test0() throws ConnectionError, ProcessingError {
        Request request = new CreateCampaign(
            "HigoBW1BueiscJwva25XeNoYbtUlIuzpyUw5IHQ90tz5aYZlETNRAbh6gBixeF13J3e4aor0DL98XOg18bFy826Ec9vAp7wYvdsUxHhLTwuMYskJMy9bZTzEcC49QryizHKxPbjagewGC1Y1BLlgVbyMDS63LbhSrxLUrMR2ZlzkVoOMBck0MISLJsGHjRKxw5JN4mWtTXsx0pFenI",
            "41e8e493-61a3-4fc0-ad32-82b408083b17",
            "2021-01-04T18:38:30.000000+09:00",
            "2022-07-17T20:39:27.000000+09:00",
            7872,
            "topup"
        )
                .applicableShopIds(new String[]{"41edc11f-5ad0-4512-943b-c2c6cf008b8d","1e08513e-81e3-49ce-afd8-bb01843a973b"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test1() throws ConnectionError, ProcessingError {
        Request request = new CreateCampaign(
            "HigoBW1BueiscJwva25XeNoYbtUlIuzpyUw5IHQ90tz5aYZlETNRAbh6gBixeF13J3e4aor0DL98XOg18bFy826Ec9vAp7wYvdsUxHhLTwuMYskJMy9bZTzEcC49QryizHKxPbjagewGC1Y1BLlgVbyMDS63LbhSrxLUrMR2ZlzkVoOMBck0MISLJsGHjRKxw5JN4mWtTXsx0pFenI",
            "41e8e493-61a3-4fc0-ad32-82b408083b17",
            "2021-01-04T18:38:30.000000+09:00",
            "2022-07-17T20:39:27.000000+09:00",
            7872,
            "topup"
        )
                .applicableShopIds(new String[]{"599b3360-cb6b-4e21-b441-94ae440e7896","0a256e35-3f11-469e-be4b-0612f491fb94","407faf28-3435-4133-9b14-0f125e0456c4","a34633a1-d932-4596-be0b-59c26583dc92","f7eb0468-5f6e-4fd3-bb76-054eb4af7a3f","b0b0c939-7e19-49c1-aa75-2170f22faf58"})
                .bearPointShopId("82873f86-630c-454f-9dc7-4bb50eb746e5");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test2() throws ConnectionError, ProcessingError {
        Request request = new CreateCampaign(
            "HigoBW1BueiscJwva25XeNoYbtUlIuzpyUw5IHQ90tz5aYZlETNRAbh6gBixeF13J3e4aor0DL98XOg18bFy826Ec9vAp7wYvdsUxHhLTwuMYskJMy9bZTzEcC49QryizHKxPbjagewGC1Y1BLlgVbyMDS63LbhSrxLUrMR2ZlzkVoOMBck0MISLJsGHjRKxw5JN4mWtTXsx0pFenI",
            "41e8e493-61a3-4fc0-ad32-82b408083b17",
            "2021-01-04T18:38:30.000000+09:00",
            "2022-07-17T20:39:27.000000+09:00",
            7872,
            "topup"
        )
                .applicableShopIds(new String[]{"70241872-4702-40ad-8b1a-395847b2d05a"})
                .description("7bY4VQ1LLm7rin13eoMXqLGXI0x0OVEkSjmmd296PxYppK1ryL6DMg10PFCuHzlPd2p1gxOjeKlSm3F7W7jxuTwwwTy9nHvlJ9elp3haToJDLOxkLANuQhqkRkFkuLWsADKa1EDrae1uV9Xx0wFFolQfb2PCnz3fsIqwh")
                .bearPointShopId("9f990f37-0c47-4a97-9251-4f80d934030e");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test3() throws ConnectionError, ProcessingError {
        Request request = new CreateCampaign(
            "HigoBW1BueiscJwva25XeNoYbtUlIuzpyUw5IHQ90tz5aYZlETNRAbh6gBixeF13J3e4aor0DL98XOg18bFy826Ec9vAp7wYvdsUxHhLTwuMYskJMy9bZTzEcC49QryizHKxPbjagewGC1Y1BLlgVbyMDS63LbhSrxLUrMR2ZlzkVoOMBck0MISLJsGHjRKxw5JN4mWtTXsx0pFenI",
            "41e8e493-61a3-4fc0-ad32-82b408083b17",
            "2021-01-04T18:38:30.000000+09:00",
            "2022-07-17T20:39:27.000000+09:00",
            7872,
            "topup"
        )
                .applicableShopIds(new String[]{"a3097511-8bb8-477f-80e4-7d5871bcf6a9","92e6995b-c28f-4604-bf2f-a3250a716aa3","368406aa-8d7d-49e2-96d3-bb211ed77439","7ca9f414-b0bf-4d54-bef6-e585b95d720a","38ed47d0-3878-46e0-be57-5c8354010e9c","61122813-de38-4be9-8140-260638db2c7e","4a79d6b9-d8ce-468a-a219-3feaacc9f2c8"})
                .status("enabled")
                .description("IGFv8w88Hbeail3ICfByOXlu9lzXNM5i65JdtXlqcr7yvDypC8c07F3v5HCAscLyHy5tTckejysAcz3APWYfceQlS5")
                .bearPointShopId("1784bf67-4c3b-4448-81fc-590b1dc7101c");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test4() throws ConnectionError, ProcessingError {
        Request request = new CreateCampaign(
            "HigoBW1BueiscJwva25XeNoYbtUlIuzpyUw5IHQ90tz5aYZlETNRAbh6gBixeF13J3e4aor0DL98XOg18bFy826Ec9vAp7wYvdsUxHhLTwuMYskJMy9bZTzEcC49QryizHKxPbjagewGC1Y1BLlgVbyMDS63LbhSrxLUrMR2ZlzkVoOMBck0MISLJsGHjRKxw5JN4mWtTXsx0pFenI",
            "41e8e493-61a3-4fc0-ad32-82b408083b17",
            "2021-01-04T18:38:30.000000+09:00",
            "2022-07-17T20:39:27.000000+09:00",
            7872,
            "topup"
        )
                .applicableShopIds(new String[]{"8844b5c7-7a74-4037-a778-ca66f9f8ccaa","ae36f432-bc6d-4297-a995-a1e32be1288c","563b58ed-4d9b-4294-b06c-3f9e9b2309b8","ac53c05b-53ed-4df4-848b-66f212adabea","57b2941a-72ae-4c9b-85ae-ae444f76be2c","857c6b99-5421-4531-b2e4-09a73d648468"})
                .pointExpiresAt("2021-10-30T18:10:11.000000+09:00")
                .status("disabled")
                .description("9EpUyIsdmI6HjdIoRlCXGOBn4y9dO")
                .bearPointShopId("57208fef-780d-4818-b106-f949ee889295");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test5() throws ConnectionError, ProcessingError {
        Request request = new CreateCampaign(
            "HigoBW1BueiscJwva25XeNoYbtUlIuzpyUw5IHQ90tz5aYZlETNRAbh6gBixeF13J3e4aor0DL98XOg18bFy826Ec9vAp7wYvdsUxHhLTwuMYskJMy9bZTzEcC49QryizHKxPbjagewGC1Y1BLlgVbyMDS63LbhSrxLUrMR2ZlzkVoOMBck0MISLJsGHjRKxw5JN4mWtTXsx0pFenI",
            "41e8e493-61a3-4fc0-ad32-82b408083b17",
            "2021-01-04T18:38:30.000000+09:00",
            "2022-07-17T20:39:27.000000+09:00",
            7872,
            "topup"
        )
                .applicableShopIds(new String[]{"9df48060-633b-420f-a556-6736ba56b667","0c8ccd5f-e830-4eb5-897e-38955618f38b"})
                .pointExpiresInDays(9038)
                .pointExpiresAt("2020-04-20T18:06:41.000000+09:00")
                .status("enabled")
                .description("hHjAnmG5wkr5hH7TLuLnx3zT4fM7Lb9DcWcbw9TCjas1EfzU71OsZrM6NdpIb230zYNzZGlJLFaGV4GC3cmscGdok8lNl2OVxfNDI04iejVkRtcbu8dhwy9qx3")
                .bearPointShopId("b19fabdc-5e4b-49f6-865d-08708450910c");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test6() throws ConnectionError, ProcessingError {
        Request request = new CreateCampaign(
            "HigoBW1BueiscJwva25XeNoYbtUlIuzpyUw5IHQ90tz5aYZlETNRAbh6gBixeF13J3e4aor0DL98XOg18bFy826Ec9vAp7wYvdsUxHhLTwuMYskJMy9bZTzEcC49QryizHKxPbjagewGC1Y1BLlgVbyMDS63LbhSrxLUrMR2ZlzkVoOMBck0MISLJsGHjRKxw5JN4mWtTXsx0pFenI",
            "41e8e493-61a3-4fc0-ad32-82b408083b17",
            "2021-01-04T18:38:30.000000+09:00",
            "2022-07-17T20:39:27.000000+09:00",
            7872,
            "topup"
        )
                .applicableShopIds(new String[]{"1f2d46af-eb0f-4514-abfe-2cc5cf108ecf","0ea5e57e-6561-47f8-a452-ac95742a7e5f"})
                .setExclusive(true)
                .pointExpiresInDays(4728)
                .pointExpiresAt("2023-09-28T00:35:38.000000+09:00")
                .status("disabled")
                .description("g5voZwvt5HC49ehMK6xMBlrhcMEHAakLva13b8x3i2E0YKZld6a228zQGvaoaVkqNMZdKC42Of1dGzdBlph8uTqwMBm1Rra08h2H7Y11pmORzHsyiNmyJGXqBluSOXcyE5vPnNxlQ4c1arKbmZqwDshm2qjlNBz25FbeT0Ic")
                .bearPointShopId("62c4d5e5-88a2-42ae-9d1f-b3cda4952b24");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test7() throws ConnectionError, ProcessingError {
        Request request = new CreateCampaign(
            "HigoBW1BueiscJwva25XeNoYbtUlIuzpyUw5IHQ90tz5aYZlETNRAbh6gBixeF13J3e4aor0DL98XOg18bFy826Ec9vAp7wYvdsUxHhLTwuMYskJMy9bZTzEcC49QryizHKxPbjagewGC1Y1BLlgVbyMDS63LbhSrxLUrMR2ZlzkVoOMBck0MISLJsGHjRKxw5JN4mWtTXsx0pFenI",
            "41e8e493-61a3-4fc0-ad32-82b408083b17",
            "2021-01-04T18:38:30.000000+09:00",
            "2022-07-17T20:39:27.000000+09:00",
            7872,
            "topup"
        )
                .applicableShopIds(new String[]{"6e1ea2ea-64be-4953-9a28-66a5d56e9d0c","2bc7e003-9b96-4608-819c-b485d428affc","dd66bb4b-0340-488f-b501-fdfff2f98e0a","7ddfb729-2464-4313-be7f-07d2e9723b4f","dbc2e265-dcf8-42d5-a7ed-5e2646e9a875","d20e862e-950c-4532-a6c4-e6cc1d12cf5a","ecd9d774-99d2-43d0-b0a5-98604144ffcb","606fd5b9-61cf-487f-85d9-993c71ec86ef","1e9f2120-a8f1-4888-ba27-86a06b0fef22"})
                .subject("all")
                .setExclusive(false)
                .pointExpiresInDays(8614)
                .pointExpiresAt("2020-07-28T16:26:36.000000+09:00")
                .status("disabled")
                .description("kaQIaG9SFLtI056Zz")
                .bearPointShopId("c3734ff0-3f1e-46bc-b53a-ed87ecee04af");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test8() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("subject_more_than_or_equal", 1000);
        items.addProperty("subject_less_than", 5000);
        JsonObject items2 = new JsonObject();
        items2.addProperty("point_amount", 5);
        items2.addProperty("point_amount_unit", "percent");
        items2.addProperty("subject_more_than_or_equal", 1000);
        items2.addProperty("subject_less_than", 5000);
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("subject_more_than_or_equal", 1000);
        items3.addProperty("subject_less_than", 5000);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("subject_more_than_or_equal", 1000);
        items4.addProperty("subject_less_than", 5000);
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("subject_more_than_or_equal", 1000);
        items5.addProperty("subject_less_than", 5000);
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("subject_more_than_or_equal", 1000);
        items6.addProperty("subject_less_than", 5000);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("subject_more_than_or_equal", 1000);
        items7.addProperty("subject_less_than", 5000);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("subject_more_than_or_equal", 1000);
        items8.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "HigoBW1BueiscJwva25XeNoYbtUlIuzpyUw5IHQ90tz5aYZlETNRAbh6gBixeF13J3e4aor0DL98XOg18bFy826Ec9vAp7wYvdsUxHhLTwuMYskJMy9bZTzEcC49QryizHKxPbjagewGC1Y1BLlgVbyMDS63LbhSrxLUrMR2ZlzkVoOMBck0MISLJsGHjRKxw5JN4mWtTXsx0pFenI",
            "41e8e493-61a3-4fc0-ad32-82b408083b17",
            "2021-01-04T18:38:30.000000+09:00",
            "2022-07-17T20:39:27.000000+09:00",
            7872,
            "topup"
        )
                .applicableShopIds(new String[]{"06ae7250-d7a8-4642-bbd4-b2cf76f4d909","9fd4d9bd-9fd0-417c-bb1b-14a55575c29c","9e6cad81-83e2-474b-a578-5ba0520fc8a2","cc98aed9-5c5d-47cc-bfac-84fee98cf17a","a3d0728b-3091-4aa2-8f83-10ab54d2460e","f090107e-9fee-490f-9159-10c954b9cacc","35f8574b-ce6c-4a79-b1c7-cdc68ad005e4","09fc3a3b-19ee-42b3-8b75-1cbaf6986522"})
                .amountBasedPointRules(new Object[]{items,items2,items3,items4,items5,items6,items7,items8})
                .subject("money")
                .setExclusive(true)
                .pointExpiresInDays(1727)
                .pointExpiresAt("2020-07-08T08:53:32.000000+09:00")
                .status("disabled")
                .description("0Cg4Y3EJ7zUuouoRpJVO9HNBOo3CtJ8bnBBvIGG7ihdDI4hmerpk1Z4MRdeLx1TrE3oKjLzGO6CFTuGsmQ4Ik1lA1HBtdI8AnM26wYVALQQCOJWzDeqz5Mc4eXKO4rw1DM5ErtAJ")
                .bearPointShopId("fc4d4663-61c9-4826-9e37-1e24e34f0b2a");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test9() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("product_code", "4912345678904");
        items.addProperty("is_multiply_by_count", true);
        items.addProperty("required_count", 2);
        JsonObject items2 = new JsonObject();
        items2.addProperty("point_amount", 5);
        items2.addProperty("point_amount_unit", "percent");
        items2.addProperty("product_code", "4912345678904");
        items2.addProperty("is_multiply_by_count", true);
        items2.addProperty("required_count", 2);
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("is_multiply_by_count", true);
        items3.addProperty("required_count", 2);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("is_multiply_by_count", true);
        items4.addProperty("required_count", 2);
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("is_multiply_by_count", true);
        items5.addProperty("required_count", 2);
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("is_multiply_by_count", true);
        items6.addProperty("required_count", 2);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("subject_more_than_or_equal", 1000);
        items7.addProperty("subject_less_than", 5000);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("subject_more_than_or_equal", 1000);
        items8.addProperty("subject_less_than", 5000);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("subject_more_than_or_equal", 1000);
        items9.addProperty("subject_less_than", 5000);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("subject_more_than_or_equal", 1000);
        items10.addProperty("subject_less_than", 5000);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("subject_more_than_or_equal", 1000);
        items11.addProperty("subject_less_than", 5000);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("subject_more_than_or_equal", 1000);
        items12.addProperty("subject_less_than", 5000);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("subject_more_than_or_equal", 1000);
        items13.addProperty("subject_less_than", 5000);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("subject_more_than_or_equal", 1000);
        items14.addProperty("subject_less_than", 5000);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("subject_more_than_or_equal", 1000);
        items15.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "HigoBW1BueiscJwva25XeNoYbtUlIuzpyUw5IHQ90tz5aYZlETNRAbh6gBixeF13J3e4aor0DL98XOg18bFy826Ec9vAp7wYvdsUxHhLTwuMYskJMy9bZTzEcC49QryizHKxPbjagewGC1Y1BLlgVbyMDS63LbhSrxLUrMR2ZlzkVoOMBck0MISLJsGHjRKxw5JN4mWtTXsx0pFenI",
            "41e8e493-61a3-4fc0-ad32-82b408083b17",
            "2021-01-04T18:38:30.000000+09:00",
            "2022-07-17T20:39:27.000000+09:00",
            7872,
            "topup"
        )
                .applicableShopIds(new String[]{"58985688-1d47-466e-99f8-1c49d58249a9","2c2f8e4a-3701-4416-8ae6-6207e57f7fa1","2916ca79-4520-454e-82c0-97c1697a8933","54db88be-b4bf-4c5d-ab33-11204774de88","55695d93-789d-4ea0-bc35-752552f2444c","f0c9fcdb-9ea2-4dc3-a7ce-cd1759300461","93668509-adfe-493d-acda-f694b9915caa","a709e9f1-1885-417f-b232-f6202958c2dd","9427de06-5c52-46d1-aa52-5a00acbecf53"})
                .productBasedPointRules(new Object[]{items,items2,items3,items4,items5,items6})
                .amountBasedPointRules(new Object[]{items7,items8,items9,items10,items11,items12,items13,items14,items15})
                .subject("all")
                .setExclusive(true)
                .pointExpiresInDays(9426)
                .pointExpiresAt("2021-07-20T11:02:44.000000+09:00")
                .status("enabled")
                .description("G7tWbTh0nB13D4UI5yWfEGktCc6t2njJi49dXSSsuK9IUul4hrCZpwmckDNYVI9I54A3FSgU6v83WG0bWdjrscbJaeYOiLwjKTRvpVwMC")
                .bearPointShopId("7bcedd82-c1a4-4522-8a5e-bed2a70309d3");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test10() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("product_code", "4912345678904");
        items.addProperty("classification_code", "c123");
        JsonObject items2 = new JsonObject();
        items2.addProperty("product_code", "4912345678904");
        items2.addProperty("classification_code", "c123");
        JsonObject items3 = new JsonObject();
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("classification_code", "c123");
        JsonObject items4 = new JsonObject();
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("classification_code", "c123");
        JsonObject items5 = new JsonObject();
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("classification_code", "c123");
        JsonObject items6 = new JsonObject();
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("classification_code", "c123");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("subject_more_than_or_equal", 1000);
        items16.addProperty("subject_less_than", 5000);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("subject_more_than_or_equal", 1000);
        items17.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "HigoBW1BueiscJwva25XeNoYbtUlIuzpyUw5IHQ90tz5aYZlETNRAbh6gBixeF13J3e4aor0DL98XOg18bFy826Ec9vAp7wYvdsUxHhLTwuMYskJMy9bZTzEcC49QryizHKxPbjagewGC1Y1BLlgVbyMDS63LbhSrxLUrMR2ZlzkVoOMBck0MISLJsGHjRKxw5JN4mWtTXsx0pFenI",
            "41e8e493-61a3-4fc0-ad32-82b408083b17",
            "2021-01-04T18:38:30.000000+09:00",
            "2022-07-17T20:39:27.000000+09:00",
            7872,
            "topup"
        )
                .applicableShopIds(new String[]{"df5e8d57-9aa8-45d7-9cf3-0004588a7696","7247c034-f0fe-4f69-9c1f-d17bec6606bb","08f53c29-bab7-4537-a1d6-0629287789e1","73713fc3-e96b-4575-9e04-2a32e6614974","221e9590-d1c5-4837-988b-eee70fff71e7","fd34083e-f5d7-4fed-afce-b1ebbd28dff9","a73061f7-1540-4051-85a2-7dc619bea79f","8e8ed892-1759-445c-9a64-a92aa778bbb1"})
                .blacklistedProductRules(new Object[]{items,items2,items3,items4,items5,items6,items7,items8,items9})
                .productBasedPointRules(new Object[]{items10,items11,items12,items13,items14,items15})
                .amountBasedPointRules(new Object[]{items16,items17})
                .subject("all")
                .setExclusive(false)
                .pointExpiresInDays(8751)
                .pointExpiresAt("2020-01-04T08:16:49.000000+09:00")
                .status("disabled")
                .description("UJtygW3TL5HZv0WHnFmfoXBswb26j361x7oQhW0HbybIqIE7TwkDT7Aefnla88VJDhgJxWXe4WhdGFCa7klnd46Xz8yivVU8NxWfRhoCVjb67qVZBYyujcqs1R7J")
                .bearPointShopId("d5490415-9023-49a5-8b0d-1a0074b70333");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test11() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("product_code", "4912345678904");
        items.addProperty("classification_code", "c123");
        JsonObject items2 = new JsonObject();
        items2.addProperty("product_code", "4912345678904");
        items2.addProperty("classification_code", "c123");
        JsonObject items3 = new JsonObject();
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("classification_code", "c123");
        JsonObject items4 = new JsonObject();
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("classification_code", "c123");
        JsonObject items5 = new JsonObject();
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("classification_code", "c123");
        JsonObject items6 = new JsonObject();
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("classification_code", "c123");
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("is_multiply_by_count", true);
        items7.addProperty("required_count", 2);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("is_multiply_by_count", true);
        items8.addProperty("required_count", 2);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("is_multiply_by_count", true);
        items9.addProperty("required_count", 2);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("is_multiply_by_count", true);
        items16.addProperty("required_count", 2);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("subject_more_than_or_equal", 1000);
        items17.addProperty("subject_less_than", 5000);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("subject_more_than_or_equal", 1000);
        items18.addProperty("subject_less_than", 5000);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("subject_more_than_or_equal", 1000);
        items19.addProperty("subject_less_than", 5000);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("subject_more_than_or_equal", 1000);
        items20.addProperty("subject_less_than", 5000);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("subject_more_than_or_equal", 1000);
        items21.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "HigoBW1BueiscJwva25XeNoYbtUlIuzpyUw5IHQ90tz5aYZlETNRAbh6gBixeF13J3e4aor0DL98XOg18bFy826Ec9vAp7wYvdsUxHhLTwuMYskJMy9bZTzEcC49QryizHKxPbjagewGC1Y1BLlgVbyMDS63LbhSrxLUrMR2ZlzkVoOMBck0MISLJsGHjRKxw5JN4mWtTXsx0pFenI",
            "41e8e493-61a3-4fc0-ad32-82b408083b17",
            "2021-01-04T18:38:30.000000+09:00",
            "2022-07-17T20:39:27.000000+09:00",
            7872,
            "topup"
        )
                .applicableShopIds(new String[]{"55273351-8959-4356-a5b3-5ae8dbc28c59","c2cdddf7-9bd2-4ee3-be12-a69be265ff16","012581dd-43db-4283-b524-f5009be946a1","f6143143-090b-4e34-bb13-02d1882a554f","4fc913eb-5288-4d6b-b3ca-b244f57bb5ba","f6f7727c-62b6-4803-8559-92175c7e17b1","3ed9a9b9-0caa-41b0-a120-f03b55e604f4","70a888ba-ef18-479c-a1b4-667c648ff3d0","a4aebf78-7775-4d34-a0e6-535023c6ce86","43e8b209-5f3c-4804-b0b4-ec42137ec1ca"})
                .applicableDaysOfWeek(new Integer[]{1,4,2,6,1,1,1,5,4,5})
                .blacklistedProductRules(new Object[]{items,items2,items3,items4,items5,items6})
                .productBasedPointRules(new Object[]{items7,items8,items9,items10,items11,items12,items13,items14,items15,items16})
                .amountBasedPointRules(new Object[]{items17,items18,items19,items20,items21})
                .subject("all")
                .setExclusive(false)
                .pointExpiresInDays(3798)
                .pointExpiresAt("2021-07-25T14:06:21.000000+09:00")
                .status("enabled")
                .description("qiCEyAmk8NzXQWfUp3MAVhYdqwjkyyxu7IKDkqqrYJcsrPBHDOcRdPEvyXShKGMuyEHVFCncEbFmFtWlFSg03SN6E38DCJX2pjxAu")
                .bearPointShopId("1a053980-b94d-4321-8f08-fa32d07e5cba");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test12() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("product_code", "4912345678904");
        items2.addProperty("classification_code", "c123");
        JsonObject items3 = new JsonObject();
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("classification_code", "c123");
        JsonObject items4 = new JsonObject();
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("classification_code", "c123");
        JsonObject items5 = new JsonObject();
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("classification_code", "c123");
        JsonObject items6 = new JsonObject();
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("classification_code", "c123");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("classification_code", "c123");
        JsonObject items11 = new JsonObject();
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("classification_code", "c123");
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("subject_more_than_or_equal", 1000);
        items15.addProperty("subject_less_than", 5000);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("subject_more_than_or_equal", 1000);
        items16.addProperty("subject_less_than", 5000);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("subject_more_than_or_equal", 1000);
        items17.addProperty("subject_less_than", 5000);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("subject_more_than_or_equal", 1000);
        items18.addProperty("subject_less_than", 5000);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("subject_more_than_or_equal", 1000);
        items19.addProperty("subject_less_than", 5000);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("subject_more_than_or_equal", 1000);
        items20.addProperty("subject_less_than", 5000);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("subject_more_than_or_equal", 1000);
        items21.addProperty("subject_less_than", 5000);
        JsonObject items22 = new JsonObject();
        items22.addProperty("point_amount", 5);
        items22.addProperty("point_amount_unit", "percent");
        items22.addProperty("subject_more_than_or_equal", 1000);
        items22.addProperty("subject_less_than", 5000);
        JsonObject items23 = new JsonObject();
        items23.addProperty("point_amount", 5);
        items23.addProperty("point_amount_unit", "percent");
        items23.addProperty("subject_more_than_or_equal", 1000);
        items23.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "HigoBW1BueiscJwva25XeNoYbtUlIuzpyUw5IHQ90tz5aYZlETNRAbh6gBixeF13J3e4aor0DL98XOg18bFy826Ec9vAp7wYvdsUxHhLTwuMYskJMy9bZTzEcC49QryizHKxPbjagewGC1Y1BLlgVbyMDS63LbhSrxLUrMR2ZlzkVoOMBck0MISLJsGHjRKxw5JN4mWtTXsx0pFenI",
            "41e8e493-61a3-4fc0-ad32-82b408083b17",
            "2021-01-04T18:38:30.000000+09:00",
            "2022-07-17T20:39:27.000000+09:00",
            7872,
            "topup"
        )
                .applicableShopIds(new String[]{"4ec71d21-a6a2-49f2-aa4f-479b02c7cb9f","ffba8afa-37d1-414e-a4d5-49fc132d81fc","32f87fb4-a7dd-46b7-b8c0-3f2a985e1e89","63937b94-55c6-4de8-b6d9-7b7bcc14891c","530d1e1a-b8db-4438-9e40-4b31c250eb3a"})
                .applicableTimeRanges(new Object[]{items})
                .applicableDaysOfWeek(new Integer[]{0,4,0,5,4,4,2})
                .blacklistedProductRules(new Object[]{items2,items3,items4,items5,items6,items7,items8,items9,items10,items11})
                .productBasedPointRules(new Object[]{items12,items13,items14})
                .amountBasedPointRules(new Object[]{items15,items16,items17,items18,items19,items20,items21,items22,items23})
                .subject("all")
                .setExclusive(true)
                .pointExpiresInDays(5167)
                .pointExpiresAt("2021-04-27T14:20:44.000000+09:00")
                .status("disabled")
                .description("p5UBddPuzXODl7r4hnALGpLVcGALNl879LDvXpamwbBN0dPAA3a6B1V35aJB8muAk6KNzbHMpSgBpebYE7Pw1x52l7TsCcDnmLhbmsDbHLOJBveYaDBZ")
                .bearPointShopId("b9384710-64ed-44f0-a4e7-bd200ecca9f3");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test13() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("classification_code", "c123");
        JsonObject items6 = new JsonObject();
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("classification_code", "c123");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("subject_more_than_or_equal", 1000);
        items15.addProperty("subject_less_than", 5000);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("subject_more_than_or_equal", 1000);
        items16.addProperty("subject_less_than", 5000);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("subject_more_than_or_equal", 1000);
        items17.addProperty("subject_less_than", 5000);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("subject_more_than_or_equal", 1000);
        items18.addProperty("subject_less_than", 5000);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("subject_more_than_or_equal", 1000);
        items19.addProperty("subject_less_than", 5000);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("subject_more_than_or_equal", 1000);
        items20.addProperty("subject_less_than", 5000);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("subject_more_than_or_equal", 1000);
        items21.addProperty("subject_less_than", 5000);
        JsonObject items22 = new JsonObject();
        items22.addProperty("point_amount", 5);
        items22.addProperty("point_amount_unit", "percent");
        items22.addProperty("subject_more_than_or_equal", 1000);
        items22.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "HigoBW1BueiscJwva25XeNoYbtUlIuzpyUw5IHQ90tz5aYZlETNRAbh6gBixeF13J3e4aor0DL98XOg18bFy826Ec9vAp7wYvdsUxHhLTwuMYskJMy9bZTzEcC49QryizHKxPbjagewGC1Y1BLlgVbyMDS63LbhSrxLUrMR2ZlzkVoOMBck0MISLJsGHjRKxw5JN4mWtTXsx0pFenI",
            "41e8e493-61a3-4fc0-ad32-82b408083b17",
            "2021-01-04T18:38:30.000000+09:00",
            "2022-07-17T20:39:27.000000+09:00",
            7872,
            "topup"
        )
                .applicableShopIds(new String[]{"0961a3f1-111f-40c8-ba3d-20abc03a4f9c","aafc9149-dec6-4ccc-87e0-011b38456321"})
                .minimumNumberOfProducts(1402)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4})
                .applicableDaysOfWeek(new Integer[]{0,0,4,1,6})
                .blacklistedProductRules(new Object[]{items5,items6,items7,items8,items9})
                .productBasedPointRules(new Object[]{items10,items11,items12,items13,items14})
                .amountBasedPointRules(new Object[]{items15,items16,items17,items18,items19,items20,items21,items22})
                .subject("all")
                .setExclusive(true)
                .pointExpiresInDays(2570)
                .pointExpiresAt("2023-11-19T17:36:07.000000+09:00")
                .status("enabled")
                .description("JJuXkUKv5TqPGCK7RLnNFY9S9b035UmpJvkeKwf4ztEQGWQx9LUGIEWjgxBrRYycJFJZNNmleQ00P3VAiLzyVYCPekzMhuRzxmSUv1IWYzEK5fQUgChrnFR9iBNZA5SmO0KUKrJZq6q0ny1TVGzHCNh")
                .bearPointShopId("0371bfe8-95d6-4f9d-b19a-1e09c1620c04");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test14() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("from", "12:00");
        items7.addProperty("to", "23:59");
        JsonObject items8 = new JsonObject();
        items8.addProperty("from", "12:00");
        items8.addProperty("to", "23:59");
        JsonObject items9 = new JsonObject();
        items9.addProperty("from", "12:00");
        items9.addProperty("to", "23:59");
        JsonObject items10 = new JsonObject();
        items10.addProperty("from", "12:00");
        items10.addProperty("to", "23:59");
        JsonObject items11 = new JsonObject();
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("classification_code", "c123");
        JsonObject items12 = new JsonObject();
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("classification_code", "c123");
        JsonObject items13 = new JsonObject();
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("classification_code", "c123");
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("is_multiply_by_count", true);
        items16.addProperty("required_count", 2);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("is_multiply_by_count", true);
        items17.addProperty("required_count", 2);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("subject_more_than_or_equal", 1000);
        items18.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "HigoBW1BueiscJwva25XeNoYbtUlIuzpyUw5IHQ90tz5aYZlETNRAbh6gBixeF13J3e4aor0DL98XOg18bFy826Ec9vAp7wYvdsUxHhLTwuMYskJMy9bZTzEcC49QryizHKxPbjagewGC1Y1BLlgVbyMDS63LbhSrxLUrMR2ZlzkVoOMBck0MISLJsGHjRKxw5JN4mWtTXsx0pFenI",
            "41e8e493-61a3-4fc0-ad32-82b408083b17",
            "2021-01-04T18:38:30.000000+09:00",
            "2022-07-17T20:39:27.000000+09:00",
            7872,
            "topup"
        )
                .applicableShopIds(new String[]{"7c0100ee-5d99-46fa-a98e-7f7002dca306","a321ff18-6e82-434a-b8a6-6ef71594d6d0","f37891a3-8bfd-4b16-9e6e-d8f49387a1c4","cdf46da2-4c50-49dd-8479-818c6386400d","c611551a-5c9f-4c2b-9f59-590ad21be97f","725ca247-c911-4bc1-b413-218d138050b6","ada2279c-ce76-406b-b9ee-60cd457a706d","0ce0b23f-8872-4a2c-80c2-0282716f5482"})
                .minimumNumberOfAmount(215)
                .minimumNumberOfProducts(9549)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5,items6,items7,items8,items9,items10})
                .applicableDaysOfWeek(new Integer[]{5,1,1,1})
                .blacklistedProductRules(new Object[]{items11,items12,items13})
                .productBasedPointRules(new Object[]{items14,items15,items16,items17})
                .amountBasedPointRules(new Object[]{items18})
                .subject("all")
                .setExclusive(false)
                .pointExpiresInDays(6429)
                .pointExpiresAt("2020-04-21T08:23:51.000000+09:00")
                .status("enabled")
                .description("dU4A6UsH0iDe6Fc0OdlylJN9DcRb7UaxMgu3oU0buCOzeiFmkiUs3cV2iTVajhSQQgaJp5FDsanUORer8SKoF")
                .bearPointShopId("841fd90a-1d94-48c0-832a-a786e795fe43");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test15() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("from", "12:00");
        items7.addProperty("to", "23:59");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("classification_code", "c123");
        JsonObject items11 = new JsonObject();
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("classification_code", "c123");
        JsonObject items12 = new JsonObject();
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("classification_code", "c123");
        JsonObject items13 = new JsonObject();
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("classification_code", "c123");
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("is_multiply_by_count", true);
        items16.addProperty("required_count", 2);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("is_multiply_by_count", true);
        items17.addProperty("required_count", 2);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("product_code", "4912345678904");
        items18.addProperty("is_multiply_by_count", true);
        items18.addProperty("required_count", 2);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("product_code", "4912345678904");
        items19.addProperty("is_multiply_by_count", true);
        items19.addProperty("required_count", 2);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("product_code", "4912345678904");
        items20.addProperty("is_multiply_by_count", true);
        items20.addProperty("required_count", 2);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("subject_more_than_or_equal", 1000);
        items21.addProperty("subject_less_than", 5000);
        JsonObject items22 = new JsonObject();
        items22.addProperty("point_amount", 5);
        items22.addProperty("point_amount_unit", "percent");
        items22.addProperty("subject_more_than_or_equal", 1000);
        items22.addProperty("subject_less_than", 5000);
        JsonObject items23 = new JsonObject();
        items23.addProperty("point_amount", 5);
        items23.addProperty("point_amount_unit", "percent");
        items23.addProperty("subject_more_than_or_equal", 1000);
        items23.addProperty("subject_less_than", 5000);
        JsonObject items24 = new JsonObject();
        items24.addProperty("point_amount", 5);
        items24.addProperty("point_amount_unit", "percent");
        items24.addProperty("subject_more_than_or_equal", 1000);
        items24.addProperty("subject_less_than", 5000);
        JsonObject items25 = new JsonObject();
        items25.addProperty("point_amount", 5);
        items25.addProperty("point_amount_unit", "percent");
        items25.addProperty("subject_more_than_or_equal", 1000);
        items25.addProperty("subject_less_than", 5000);
        JsonObject items26 = new JsonObject();
        items26.addProperty("point_amount", 5);
        items26.addProperty("point_amount_unit", "percent");
        items26.addProperty("subject_more_than_or_equal", 1000);
        items26.addProperty("subject_less_than", 5000);
        JsonObject items27 = new JsonObject();
        items27.addProperty("point_amount", 5);
        items27.addProperty("point_amount_unit", "percent");
        items27.addProperty("subject_more_than_or_equal", 1000);
        items27.addProperty("subject_less_than", 5000);
        JsonObject items28 = new JsonObject();
        items28.addProperty("point_amount", 5);
        items28.addProperty("point_amount_unit", "percent");
        items28.addProperty("subject_more_than_or_equal", 1000);
        items28.addProperty("subject_less_than", 5000);
        JsonObject items29 = new JsonObject();
        items29.addProperty("point_amount", 5);
        items29.addProperty("point_amount_unit", "percent");
        items29.addProperty("subject_more_than_or_equal", 1000);
        items29.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "HigoBW1BueiscJwva25XeNoYbtUlIuzpyUw5IHQ90tz5aYZlETNRAbh6gBixeF13J3e4aor0DL98XOg18bFy826Ec9vAp7wYvdsUxHhLTwuMYskJMy9bZTzEcC49QryizHKxPbjagewGC1Y1BLlgVbyMDS63LbhSrxLUrMR2ZlzkVoOMBck0MISLJsGHjRKxw5JN4mWtTXsx0pFenI",
            "41e8e493-61a3-4fc0-ad32-82b408083b17",
            "2021-01-04T18:38:30.000000+09:00",
            "2022-07-17T20:39:27.000000+09:00",
            7872,
            "topup"
        )
                .applicableShopIds(new String[]{"b740ae5b-5f04-4033-a32e-758888753fa1","effd5ab8-29dd-4916-987c-793ea6ce1790"})
                .minimumNumberForCombinationPurchase(9853)
                .minimumNumberOfAmount(4636)
                .minimumNumberOfProducts(5816)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5,items6,items7})
                .applicableDaysOfWeek(new Integer[]{1,0,6,2,4,6,6,5,6,0})
                .blacklistedProductRules(new Object[]{items8,items9,items10,items11,items12,items13})
                .productBasedPointRules(new Object[]{items14,items15,items16,items17,items18,items19,items20})
                .amountBasedPointRules(new Object[]{items21,items22,items23,items24,items25,items26,items27,items28,items29})
                .subject("all")
                .setExclusive(true)
                .pointExpiresInDays(5785)
                .pointExpiresAt("2021-10-16T22:09:06.000000+09:00")
                .status("enabled")
                .description("YljH7bRncaooM3TbvgCTzJhdfVl26xelmiEU809geihIFACRIyPEgDvHm00fGMs9v0S0yaduWCLddp35C6OjN32fTYxIYAR1maVXMx7tBCebKxnxGEZsQzW1x97Rr6e13KXFkBastFoDWe54Bgb7Sj72")
                .bearPointShopId("db5bdf96-52a2-4954-8156-ceca4b9d5d25");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test16() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("from", "12:00");
        items7.addProperty("to", "23:59");
        JsonObject items8 = new JsonObject();
        items8.addProperty("from", "12:00");
        items8.addProperty("to", "23:59");
        JsonObject items9 = new JsonObject();
        items9.addProperty("from", "12:00");
        items9.addProperty("to", "23:59");
        JsonObject items10 = new JsonObject();
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("classification_code", "c123");
        JsonObject items11 = new JsonObject();
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("classification_code", "c123");
        JsonObject items12 = new JsonObject();
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("classification_code", "c123");
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("is_multiply_by_count", true);
        items16.addProperty("required_count", 2);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("is_multiply_by_count", true);
        items17.addProperty("required_count", 2);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("product_code", "4912345678904");
        items18.addProperty("is_multiply_by_count", true);
        items18.addProperty("required_count", 2);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("product_code", "4912345678904");
        items19.addProperty("is_multiply_by_count", true);
        items19.addProperty("required_count", 2);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("product_code", "4912345678904");
        items20.addProperty("is_multiply_by_count", true);
        items20.addProperty("required_count", 2);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("product_code", "4912345678904");
        items21.addProperty("is_multiply_by_count", true);
        items21.addProperty("required_count", 2);
        JsonObject items22 = new JsonObject();
        items22.addProperty("point_amount", 5);
        items22.addProperty("point_amount_unit", "percent");
        items22.addProperty("subject_more_than_or_equal", 1000);
        items22.addProperty("subject_less_than", 5000);
        JsonObject items23 = new JsonObject();
        items23.addProperty("point_amount", 5);
        items23.addProperty("point_amount_unit", "percent");
        items23.addProperty("subject_more_than_or_equal", 1000);
        items23.addProperty("subject_less_than", 5000);
        JsonObject items24 = new JsonObject();
        items24.addProperty("point_amount", 5);
        items24.addProperty("point_amount_unit", "percent");
        items24.addProperty("subject_more_than_or_equal", 1000);
        items24.addProperty("subject_less_than", 5000);
        JsonObject items25 = new JsonObject();
        items25.addProperty("point_amount", 5);
        items25.addProperty("point_amount_unit", "percent");
        items25.addProperty("subject_more_than_or_equal", 1000);
        items25.addProperty("subject_less_than", 5000);
        JsonObject items26 = new JsonObject();
        items26.addProperty("point_amount", 5);
        items26.addProperty("point_amount_unit", "percent");
        items26.addProperty("subject_more_than_or_equal", 1000);
        items26.addProperty("subject_less_than", 5000);
        JsonObject items27 = new JsonObject();
        items27.addProperty("point_amount", 5);
        items27.addProperty("point_amount_unit", "percent");
        items27.addProperty("subject_more_than_or_equal", 1000);
        items27.addProperty("subject_less_than", 5000);
        JsonObject items28 = new JsonObject();
        items28.addProperty("point_amount", 5);
        items28.addProperty("point_amount_unit", "percent");
        items28.addProperty("subject_more_than_or_equal", 1000);
        items28.addProperty("subject_less_than", 5000);
        JsonObject items29 = new JsonObject();
        items29.addProperty("point_amount", 5);
        items29.addProperty("point_amount_unit", "percent");
        items29.addProperty("subject_more_than_or_equal", 1000);
        items29.addProperty("subject_less_than", 5000);
        JsonObject items30 = new JsonObject();
        items30.addProperty("point_amount", 5);
        items30.addProperty("point_amount_unit", "percent");
        items30.addProperty("subject_more_than_or_equal", 1000);
        items30.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "HigoBW1BueiscJwva25XeNoYbtUlIuzpyUw5IHQ90tz5aYZlETNRAbh6gBixeF13J3e4aor0DL98XOg18bFy826Ec9vAp7wYvdsUxHhLTwuMYskJMy9bZTzEcC49QryizHKxPbjagewGC1Y1BLlgVbyMDS63LbhSrxLUrMR2ZlzkVoOMBck0MISLJsGHjRKxw5JN4mWtTXsx0pFenI",
            "41e8e493-61a3-4fc0-ad32-82b408083b17",
            "2021-01-04T18:38:30.000000+09:00",
            "2022-07-17T20:39:27.000000+09:00",
            7872,
            "topup"
        )
                .applicableShopIds(new String[]{"137e7fb1-3523-41a7-a941-9aefac928542","a99eca46-4ac7-4583-b046-f889f2454157","12024623-1bc7-4020-9be8-c2c9b8886026","f166ade0-2b11-4f23-a616-3af1be411ba0","19bec391-f592-4fc6-bd10-21bc9c29faff","2dd3fbba-978f-4c1b-9ada-9f4261ebf773"})
                .existInEachProductGroups(true)
                .minimumNumberForCombinationPurchase(3322)
                .minimumNumberOfAmount(4844)
                .minimumNumberOfProducts(8680)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5,items6,items7,items8,items9})
                .applicableDaysOfWeek(new Integer[]{2,3,1,2,4})
                .blacklistedProductRules(new Object[]{items10,items11,items12})
                .productBasedPointRules(new Object[]{items13,items14,items15,items16,items17,items18,items19,items20,items21})
                .amountBasedPointRules(new Object[]{items22,items23,items24,items25,items26,items27,items28,items29,items30})
                .subject("all")
                .setExclusive(true)
                .pointExpiresInDays(8962)
                .pointExpiresAt("2023-03-17T00:46:08.000000+09:00")
                .status("enabled")
                .description("e460ITFFMlOoNF60KHxllnN4HzHwFhFEjSBXEQon8hiuGyTutdIyjoPCP7mYSBaw6G73vjrFBEZ9xe14LTWiE9TEEp8WWapls1FU7awnIFsXhs92PspyjLiPHuXn")
                .bearPointShopId("4af3258a-b178-4dd5-abc5-eb8bb150a35d");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test17() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("from", "12:00");
        items7.addProperty("to", "23:59");
        JsonObject items8 = new JsonObject();
        items8.addProperty("from", "12:00");
        items8.addProperty("to", "23:59");
        JsonObject items9 = new JsonObject();
        items9.addProperty("from", "12:00");
        items9.addProperty("to", "23:59");
        JsonObject items10 = new JsonObject();
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("classification_code", "c123");
        JsonObject items11 = new JsonObject();
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("classification_code", "c123");
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("subject_more_than_or_equal", 1000);
        items13.addProperty("subject_less_than", 5000);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("subject_more_than_or_equal", 1000);
        items14.addProperty("subject_less_than", 5000);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("subject_more_than_or_equal", 1000);
        items15.addProperty("subject_less_than", 5000);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("subject_more_than_or_equal", 1000);
        items16.addProperty("subject_less_than", 5000);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("subject_more_than_or_equal", 1000);
        items17.addProperty("subject_less_than", 5000);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("subject_more_than_or_equal", 1000);
        items18.addProperty("subject_less_than", 5000);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("subject_more_than_or_equal", 1000);
        items19.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "HigoBW1BueiscJwva25XeNoYbtUlIuzpyUw5IHQ90tz5aYZlETNRAbh6gBixeF13J3e4aor0DL98XOg18bFy826Ec9vAp7wYvdsUxHhLTwuMYskJMy9bZTzEcC49QryizHKxPbjagewGC1Y1BLlgVbyMDS63LbhSrxLUrMR2ZlzkVoOMBck0MISLJsGHjRKxw5JN4mWtTXsx0pFenI",
            "41e8e493-61a3-4fc0-ad32-82b408083b17",
            "2021-01-04T18:38:30.000000+09:00",
            "2022-07-17T20:39:27.000000+09:00",
            7872,
            "topup"
        )
                .applicableShopIds(new String[]{"7b68a515-c090-44dd-a119-ec037fa3204d","d46a2bce-0645-4ba2-8425-4d0c624f0b3c","66a40c8d-b122-45da-8bf6-c76d23e671d9","1524a6df-92ba-488e-bbb8-8934164de42d","71baebb7-ed8c-477f-8d69-722eb8d53a4c","a7e9d198-cac3-4c86-95b5-73d326e33674"})
                .maxPointAmount(1374)
                .existInEachProductGroups(true)
                .minimumNumberForCombinationPurchase(7279)
                .minimumNumberOfAmount(2712)
                .minimumNumberOfProducts(2461)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5,items6,items7,items8,items9})
                .applicableDaysOfWeek(new Integer[]{3,1,1,6})
                .blacklistedProductRules(new Object[]{items10,items11})
                .productBasedPointRules(new Object[]{items12})
                .amountBasedPointRules(new Object[]{items13,items14,items15,items16,items17,items18,items19})
                .subject("all")
                .setExclusive(false)
                .pointExpiresInDays(8890)
                .pointExpiresAt("2022-10-05T11:33:22.000000+09:00")
                .status("disabled")
                .description("4OhJWFx6Yeyiao12xxL9sEsyBMjWo1Sr4jBcS5oIA9HXmOiYCW3CvAWm1DXtrXQyeS1LB6v6JUiBb4OSIpAuhXUCgYVCPl4rwAj25FmHt7UFzMCunvHnFKu9")
                .bearPointShopId("962da1e7-453b-4a56-a62c-0af54ed7df86");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test18() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("classification_code", "c123");
        JsonObject items6 = new JsonObject();
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("classification_code", "c123");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("classification_code", "c123");
        JsonObject items11 = new JsonObject();
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("classification_code", "c123");
        JsonObject items12 = new JsonObject();
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("classification_code", "c123");
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("is_multiply_by_count", true);
        items16.addProperty("required_count", 2);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("subject_more_than_or_equal", 1000);
        items17.addProperty("subject_less_than", 5000);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("subject_more_than_or_equal", 1000);
        items18.addProperty("subject_less_than", 5000);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("subject_more_than_or_equal", 1000);
        items19.addProperty("subject_less_than", 5000);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("subject_more_than_or_equal", 1000);
        items20.addProperty("subject_less_than", 5000);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("subject_more_than_or_equal", 1000);
        items21.addProperty("subject_less_than", 5000);
        JsonObject items22 = new JsonObject();
        items22.addProperty("point_amount", 5);
        items22.addProperty("point_amount_unit", "percent");
        items22.addProperty("subject_more_than_or_equal", 1000);
        items22.addProperty("subject_less_than", 5000);
        JsonObject items23 = new JsonObject();
        items23.addProperty("point_amount", 5);
        items23.addProperty("point_amount_unit", "percent");
        items23.addProperty("subject_more_than_or_equal", 1000);
        items23.addProperty("subject_less_than", 5000);
        JsonObject items24 = new JsonObject();
        items24.addProperty("point_amount", 5);
        items24.addProperty("point_amount_unit", "percent");
        items24.addProperty("subject_more_than_or_equal", 1000);
        items24.addProperty("subject_less_than", 5000);
        JsonObject items25 = new JsonObject();
        items25.addProperty("point_amount", 5);
        items25.addProperty("point_amount_unit", "percent");
        items25.addProperty("subject_more_than_or_equal", 1000);
        items25.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "HigoBW1BueiscJwva25XeNoYbtUlIuzpyUw5IHQ90tz5aYZlETNRAbh6gBixeF13J3e4aor0DL98XOg18bFy826Ec9vAp7wYvdsUxHhLTwuMYskJMy9bZTzEcC49QryizHKxPbjagewGC1Y1BLlgVbyMDS63LbhSrxLUrMR2ZlzkVoOMBck0MISLJsGHjRKxw5JN4mWtTXsx0pFenI",
            "41e8e493-61a3-4fc0-ad32-82b408083b17",
            "2021-01-04T18:38:30.000000+09:00",
            "2022-07-17T20:39:27.000000+09:00",
            7872,
            "topup"
        )
                .applicableShopIds(new String[]{"62ec819f-6fb5-4e8e-b407-73e76752f846","398c42ac-39cd-4673-a4c0-dd20e2bc9e10","3c81bfd7-4ebb-4fb8-9d74-b72b0f0c126b","90fb8ff4-71bc-446c-910a-ba600defa20b"})
                .maxTotalPointAmount(7470)
                .maxPointAmount(652)
                .existInEachProductGroups(true)
                .minimumNumberForCombinationPurchase(5012)
                .minimumNumberOfAmount(5910)
                .minimumNumberOfProducts(6338)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4})
                .applicableDaysOfWeek(new Integer[]{3,3,2})
                .blacklistedProductRules(new Object[]{items5,items6,items7,items8,items9,items10,items11,items12})
                .productBasedPointRules(new Object[]{items13,items14,items15,items16})
                .amountBasedPointRules(new Object[]{items17,items18,items19,items20,items21,items22,items23,items24,items25})
                .subject("all")
                .setExclusive(false)
                .pointExpiresInDays(852)
                .pointExpiresAt("2021-04-14T00:27:52.000000+09:00")
                .status("disabled")
                .description("DzGv8LVnkgSam1QFhhsXHbVXE")
                .bearPointShopId("fb5ebddd-8df5-450d-93ac-f20ed658100d");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test19() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("from", "12:00");
        items7.addProperty("to", "23:59");
        JsonObject items8 = new JsonObject();
        items8.addProperty("from", "12:00");
        items8.addProperty("to", "23:59");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("classification_code", "c123");
        JsonObject items11 = new JsonObject();
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("classification_code", "c123");
        JsonObject items12 = new JsonObject();
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("classification_code", "c123");
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("subject_more_than_or_equal", 1000);
        items14.addProperty("subject_less_than", 5000);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("subject_more_than_or_equal", 1000);
        items15.addProperty("subject_less_than", 5000);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("subject_more_than_or_equal", 1000);
        items16.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "HigoBW1BueiscJwva25XeNoYbtUlIuzpyUw5IHQ90tz5aYZlETNRAbh6gBixeF13J3e4aor0DL98XOg18bFy826Ec9vAp7wYvdsUxHhLTwuMYskJMy9bZTzEcC49QryizHKxPbjagewGC1Y1BLlgVbyMDS63LbhSrxLUrMR2ZlzkVoOMBck0MISLJsGHjRKxw5JN4mWtTXsx0pFenI",
            "41e8e493-61a3-4fc0-ad32-82b408083b17",
            "2021-01-04T18:38:30.000000+09:00",
            "2022-07-17T20:39:27.000000+09:00",
            7872,
            "topup"
        )
                .applicableShopIds(new String[]{"48b56d3b-f71a-4781-83fc-e57211e5f1f3","62afcf39-f343-4d06-9c20-a3571f6d3b0a"})
                .destPrivateMoneyId("1d619d0f-1f22-41a1-b9e5-dac64ece82bd")
                .maxTotalPointAmount(2015)
                .maxPointAmount(9644)
                .existInEachProductGroups(true)
                .minimumNumberForCombinationPurchase(4386)
                .minimumNumberOfAmount(3758)
                .minimumNumberOfProducts(2581)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5,items6,items7,items8})
                .applicableDaysOfWeek(new Integer[]{1,1,5,2,6,6})
                .blacklistedProductRules(new Object[]{items9,items10,items11,items12})
                .productBasedPointRules(new Object[]{items13})
                .amountBasedPointRules(new Object[]{items14,items15,items16})
                .subject("money")
                .setExclusive(false)
                .pointExpiresInDays(7226)
                .pointExpiresAt("2023-01-20T13:52:32.000000+09:00")
                .status("enabled")
                .description("obeL94KpkkVqLRUALIJp7xztB1OUxuHdnbw4qpfjnZdGHyaQfHlBX0g5EwaI0USmY6PGFKyYULw0")
                .bearPointShopId("92a13ba0-a84f-4013-a9d3-0a3667b879cc");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test20() throws ConnectionError, ProcessingError {
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("classification_code", "c123");
        JsonObject items11 = new JsonObject();
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("classification_code", "c123");
        JsonObject items12 = new JsonObject();
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("classification_code", "c123");
        JsonObject items13 = new JsonObject();
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("classification_code", "c123");
        JsonObject items14 = new JsonObject();
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("classification_code", "c123");
        JsonObject items15 = new JsonObject();
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("classification_code", "c123");
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("is_multiply_by_count", true);
        items16.addProperty("required_count", 2);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("is_multiply_by_count", true);
        items17.addProperty("required_count", 2);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("product_code", "4912345678904");
        items18.addProperty("is_multiply_by_count", true);
        items18.addProperty("required_count", 2);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("product_code", "4912345678904");
        items19.addProperty("is_multiply_by_count", true);
        items19.addProperty("required_count", 2);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("product_code", "4912345678904");
        items20.addProperty("is_multiply_by_count", true);
        items20.addProperty("required_count", 2);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("subject_more_than_or_equal", 1000);
        items21.addProperty("subject_less_than", 5000);
        JsonObject items22 = new JsonObject();
        items22.addProperty("point_amount", 5);
        items22.addProperty("point_amount_unit", "percent");
        items22.addProperty("subject_more_than_or_equal", 1000);
        items22.addProperty("subject_less_than", 5000);
        JsonObject items23 = new JsonObject();
        items23.addProperty("point_amount", 5);
        items23.addProperty("point_amount_unit", "percent");
        items23.addProperty("subject_more_than_or_equal", 1000);
        items23.addProperty("subject_less_than", 5000);
        JsonObject items24 = new JsonObject();
        items24.addProperty("point_amount", 5);
        items24.addProperty("point_amount_unit", "percent");
        items24.addProperty("subject_more_than_or_equal", 1000);
        items24.addProperty("subject_less_than", 5000);
        JsonObject items25 = new JsonObject();
        items25.addProperty("point_amount", 5);
        items25.addProperty("point_amount_unit", "percent");
        items25.addProperty("subject_more_than_or_equal", 1000);
        items25.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "HigoBW1BueiscJwva25XeNoYbtUlIuzpyUw5IHQ90tz5aYZlETNRAbh6gBixeF13J3e4aor0DL98XOg18bFy826Ec9vAp7wYvdsUxHhLTwuMYskJMy9bZTzEcC49QryizHKxPbjagewGC1Y1BLlgVbyMDS63LbhSrxLUrMR2ZlzkVoOMBck0MISLJsGHjRKxw5JN4mWtTXsx0pFenI",
            "41e8e493-61a3-4fc0-ad32-82b408083b17",
            "2021-01-04T18:38:30.000000+09:00",
            "2022-07-17T20:39:27.000000+09:00",
            7872,
            "topup"
        )
                .applicableShopIds(new String[]{"8336cddf-f6ff-4604-884c-8b73c0627df1","7bc7e2b3-578b-4683-9589-9239f26c476e","249218b8-67cb-4189-86c6-b229d8de0622","104d7b13-3c95-4e08-aa75-0274f751df40","38fbc247-77d0-4625-b5a4-d1c416f3972e","374c1424-e804-4b2b-81e3-40af5f43a5ea","67b32501-a56f-4ebf-a11f-a20619523698","ac4e68da-9712-4730-9bd1-357e27a932eb","5856790e-5267-4682-9d21-462e43cee6ce"})
                .applicableAccountMetadata(applicable_account_metadata)
                .destPrivateMoneyId("f5fb6d43-814f-4a4a-9bc6-d6aba12a8df8")
                .maxTotalPointAmount(4505)
                .maxPointAmount(4841)
                .existInEachProductGroups(false)
                .minimumNumberForCombinationPurchase(147)
                .minimumNumberOfAmount(5469)
                .minimumNumberOfProducts(6283)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5,items6})
                .applicableDaysOfWeek(new Integer[]{1,0,0})
                .blacklistedProductRules(new Object[]{items7,items8,items9,items10,items11,items12,items13,items14,items15})
                .productBasedPointRules(new Object[]{items16,items17,items18,items19,items20})
                .amountBasedPointRules(new Object[]{items21,items22,items23,items24,items25})
                .subject("money")
                .setExclusive(false)
                .pointExpiresInDays(4715)
                .pointExpiresAt("2023-07-31T22:18:55.000000+09:00")
                .status("enabled")
                .description("exC9CHjmMSuhEWwT3fZPVideRLpmxLbwTAkmYV3WXEfRqCmQpHHRdux6cJVKifOJLQcPY013LDwz6LjOQojAzB3TQEyVxLczAUKhz6XKZXdWQ8zteXTUReOew7uCSxijpeKQ6MysVOAWE3x8hMpG0NX6Hy2UVyL9cXPh")
                .bearPointShopId("2cd598fb-13ec-4cc8-b8be-1c415a8a191d");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test21() throws ConnectionError, ProcessingError {
        JsonObject applicable_transaction_metadata = new JsonObject();
        applicable_transaction_metadata.addProperty("key", "rank");
        applicable_transaction_metadata.addProperty("value", "bronze");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("classification_code", "c123");
        JsonObject items11 = new JsonObject();
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("classification_code", "c123");
        JsonObject items12 = new JsonObject();
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("classification_code", "c123");
        JsonObject items13 = new JsonObject();
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("classification_code", "c123");
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("is_multiply_by_count", true);
        items16.addProperty("required_count", 2);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("is_multiply_by_count", true);
        items17.addProperty("required_count", 2);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("product_code", "4912345678904");
        items18.addProperty("is_multiply_by_count", true);
        items18.addProperty("required_count", 2);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("product_code", "4912345678904");
        items19.addProperty("is_multiply_by_count", true);
        items19.addProperty("required_count", 2);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("product_code", "4912345678904");
        items20.addProperty("is_multiply_by_count", true);
        items20.addProperty("required_count", 2);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("product_code", "4912345678904");
        items21.addProperty("is_multiply_by_count", true);
        items21.addProperty("required_count", 2);
        JsonObject items22 = new JsonObject();
        items22.addProperty("point_amount", 5);
        items22.addProperty("point_amount_unit", "percent");
        items22.addProperty("product_code", "4912345678904");
        items22.addProperty("is_multiply_by_count", true);
        items22.addProperty("required_count", 2);
        JsonObject items23 = new JsonObject();
        items23.addProperty("point_amount", 5);
        items23.addProperty("point_amount_unit", "percent");
        items23.addProperty("subject_more_than_or_equal", 1000);
        items23.addProperty("subject_less_than", 5000);
        JsonObject items24 = new JsonObject();
        items24.addProperty("point_amount", 5);
        items24.addProperty("point_amount_unit", "percent");
        items24.addProperty("subject_more_than_or_equal", 1000);
        items24.addProperty("subject_less_than", 5000);
        JsonObject items25 = new JsonObject();
        items25.addProperty("point_amount", 5);
        items25.addProperty("point_amount_unit", "percent");
        items25.addProperty("subject_more_than_or_equal", 1000);
        items25.addProperty("subject_less_than", 5000);
        JsonObject items26 = new JsonObject();
        items26.addProperty("point_amount", 5);
        items26.addProperty("point_amount_unit", "percent");
        items26.addProperty("subject_more_than_or_equal", 1000);
        items26.addProperty("subject_less_than", 5000);
        JsonObject items27 = new JsonObject();
        items27.addProperty("point_amount", 5);
        items27.addProperty("point_amount_unit", "percent");
        items27.addProperty("subject_more_than_or_equal", 1000);
        items27.addProperty("subject_less_than", 5000);
        JsonObject items28 = new JsonObject();
        items28.addProperty("point_amount", 5);
        items28.addProperty("point_amount_unit", "percent");
        items28.addProperty("subject_more_than_or_equal", 1000);
        items28.addProperty("subject_less_than", 5000);
        JsonObject items29 = new JsonObject();
        items29.addProperty("point_amount", 5);
        items29.addProperty("point_amount_unit", "percent");
        items29.addProperty("subject_more_than_or_equal", 1000);
        items29.addProperty("subject_less_than", 5000);
        JsonObject items30 = new JsonObject();
        items30.addProperty("point_amount", 5);
        items30.addProperty("point_amount_unit", "percent");
        items30.addProperty("subject_more_than_or_equal", 1000);
        items30.addProperty("subject_less_than", 5000);
        JsonObject items31 = new JsonObject();
        items31.addProperty("point_amount", 5);
        items31.addProperty("point_amount_unit", "percent");
        items31.addProperty("subject_more_than_or_equal", 1000);
        items31.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "HigoBW1BueiscJwva25XeNoYbtUlIuzpyUw5IHQ90tz5aYZlETNRAbh6gBixeF13J3e4aor0DL98XOg18bFy826Ec9vAp7wYvdsUxHhLTwuMYskJMy9bZTzEcC49QryizHKxPbjagewGC1Y1BLlgVbyMDS63LbhSrxLUrMR2ZlzkVoOMBck0MISLJsGHjRKxw5JN4mWtTXsx0pFenI",
            "41e8e493-61a3-4fc0-ad32-82b408083b17",
            "2021-01-04T18:38:30.000000+09:00",
            "2022-07-17T20:39:27.000000+09:00",
            7872,
            "topup"
        )
                .applicableShopIds(new String[]{"c28db559-b570-41f1-9927-130399f9de11","92da54dc-529f-4487-83f0-6f5a059af36e","1fb9ac6b-df1b-4a85-9aa9-61bf215dcb21","8f1c497b-4830-412e-992b-642babaefaf0","dfe27716-f520-4b91-bc3c-9283c2a94889","d30de93d-8bdf-48bf-b8f3-ac9c4d6156f7","30398ecc-4d1d-4041-a7f4-dcf38d7edf1b","00272d5a-b027-43fa-9d76-b8b4110885f5","63702bc8-1945-4d02-8281-908086de6a6d"})
                .applicableTransactionMetadata(applicable_transaction_metadata)
                .applicableAccountMetadata(applicable_account_metadata)
                .destPrivateMoneyId("093af618-4c39-41ba-850f-dc3f6bf41d86")
                .maxTotalPointAmount(1896)
                .maxPointAmount(5474)
                .existInEachProductGroups(false)
                .minimumNumberForCombinationPurchase(6441)
                .minimumNumberOfAmount(890)
                .minimumNumberOfProducts(2292)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5,items6})
                .applicableDaysOfWeek(new Integer[]{5,5,2,0,6,6,3,3})
                .blacklistedProductRules(new Object[]{items7,items8,items9,items10,items11,items12,items13})
                .productBasedPointRules(new Object[]{items14,items15,items16,items17,items18,items19,items20,items21,items22})
                .amountBasedPointRules(new Object[]{items23,items24,items25,items26,items27,items28,items29,items30,items31})
                .subject("all")
                .setExclusive(false)
                .pointExpiresInDays(4983)
                .pointExpiresAt("2022-01-14T09:36:12.000000+09:00")
                .status("disabled")
                .description("Z3H10KhXKh0mlx0gHClrC9uLxkV75YKzqcUhvJttM6tKloIL8Vu0wQEsIr7jUOYayHh7VqEIO089vr7O1eyUUP9y8w")
                .bearPointShopId("de9c1de5-3f12-47b4-a3c6-4ac58843f810");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test22() throws ConnectionError, ProcessingError {
        JsonObject applicable_transaction_metadata = new JsonObject();
        applicable_transaction_metadata.addProperty("key", "rank");
        applicable_transaction_metadata.addProperty("value", "bronze");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("classification_code", "c123");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("classification_code", "c123");
        JsonObject items11 = new JsonObject();
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("classification_code", "c123");
        JsonObject items12 = new JsonObject();
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("classification_code", "c123");
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("subject_more_than_or_equal", 1000);
        items14.addProperty("subject_less_than", 5000);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("subject_more_than_or_equal", 1000);
        items15.addProperty("subject_less_than", 5000);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("subject_more_than_or_equal", 1000);
        items16.addProperty("subject_less_than", 5000);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("subject_more_than_or_equal", 1000);
        items17.addProperty("subject_less_than", 5000);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("subject_more_than_or_equal", 1000);
        items18.addProperty("subject_less_than", 5000);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("subject_more_than_or_equal", 1000);
        items19.addProperty("subject_less_than", 5000);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("subject_more_than_or_equal", 1000);
        items20.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "HigoBW1BueiscJwva25XeNoYbtUlIuzpyUw5IHQ90tz5aYZlETNRAbh6gBixeF13J3e4aor0DL98XOg18bFy826Ec9vAp7wYvdsUxHhLTwuMYskJMy9bZTzEcC49QryizHKxPbjagewGC1Y1BLlgVbyMDS63LbhSrxLUrMR2ZlzkVoOMBck0MISLJsGHjRKxw5JN4mWtTXsx0pFenI",
            "41e8e493-61a3-4fc0-ad32-82b408083b17",
            "2021-01-04T18:38:30.000000+09:00",
            "2022-07-17T20:39:27.000000+09:00",
            7872,
            "topup"
        )
                .applicableShopIds(new String[]{"f516d9a2-2021-4f82-afd8-d8986beccc63","abe089ba-9ec3-4a94-85e1-f74402a3f2ec","f2452cbb-b664-4404-a03c-9b0e2bca84a1"})
                .budgetCapsAmount(352183658)
                .applicableTransactionMetadata(applicable_transaction_metadata)
                .applicableAccountMetadata(applicable_account_metadata)
                .destPrivateMoneyId("ef42aa41-a38d-4836-a06b-35134511cc19")
                .maxTotalPointAmount(9190)
                .maxPointAmount(9871)
                .existInEachProductGroups(true)
                .minimumNumberForCombinationPurchase(4592)
                .minimumNumberOfAmount(129)
                .minimumNumberOfProducts(3592)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5})
                .applicableDaysOfWeek(new Integer[]{1,2,3,6,0,3,4,4,5})
                .blacklistedProductRules(new Object[]{items6,items7,items8,items9,items10,items11,items12})
                .productBasedPointRules(new Object[]{items13})
                .amountBasedPointRules(new Object[]{items14,items15,items16,items17,items18,items19,items20})
                .subject("all")
                .setExclusive(true)
                .pointExpiresInDays(4490)
                .pointExpiresAt("2022-05-27T21:37:21.000000+09:00")
                .status("disabled")
                .description("OzfNYz7foYIzovsoZFikQXRe5ERFGEFxrHrqnszNAlFQVEDhgi2ig")
                .bearPointShopId("510e2543-1a92-4a79-ab04-e8511501f219");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test23() throws ConnectionError, ProcessingError {
        Request request = new CreateCampaign(
            "HigoBW1BueiscJwva25XeNoYbtUlIuzpyUw5IHQ90tz5aYZlETNRAbh6gBixeF13J3e4aor0DL98XOg18bFy826Ec9vAp7wYvdsUxHhLTwuMYskJMy9bZTzEcC49QryizHKxPbjagewGC1Y1BLlgVbyMDS63LbhSrxLUrMR2ZlzkVoOMBck0MISLJsGHjRKxw5JN4mWtTXsx0pFenI",
            "41e8e493-61a3-4fc0-ad32-82b408083b17",
            "2021-01-04T18:38:30.000000+09:00",
            "2022-07-17T20:39:27.000000+09:00",
            7872,
            "topup"
        )
                .blacklistedShopIds(new String[]{"54c6dc17-e896-4ca6-ad60-339b332e5233"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test24() throws ConnectionError, ProcessingError {
        Request request = new CreateCampaign(
            "HigoBW1BueiscJwva25XeNoYbtUlIuzpyUw5IHQ90tz5aYZlETNRAbh6gBixeF13J3e4aor0DL98XOg18bFy826Ec9vAp7wYvdsUxHhLTwuMYskJMy9bZTzEcC49QryizHKxPbjagewGC1Y1BLlgVbyMDS63LbhSrxLUrMR2ZlzkVoOMBck0MISLJsGHjRKxw5JN4mWtTXsx0pFenI",
            "41e8e493-61a3-4fc0-ad32-82b408083b17",
            "2021-01-04T18:38:30.000000+09:00",
            "2022-07-17T20:39:27.000000+09:00",
            7872,
            "topup"
        )
                .blacklistedShopIds(new String[]{"adff3ab9-5d28-4fda-b3e8-7d3303b42e0b"})
                .bearPointShopId("60029d9f-c6a4-4681-b50e-51cfc9f19519");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test25() throws ConnectionError, ProcessingError {
        Request request = new CreateCampaign(
            "HigoBW1BueiscJwva25XeNoYbtUlIuzpyUw5IHQ90tz5aYZlETNRAbh6gBixeF13J3e4aor0DL98XOg18bFy826Ec9vAp7wYvdsUxHhLTwuMYskJMy9bZTzEcC49QryizHKxPbjagewGC1Y1BLlgVbyMDS63LbhSrxLUrMR2ZlzkVoOMBck0MISLJsGHjRKxw5JN4mWtTXsx0pFenI",
            "41e8e493-61a3-4fc0-ad32-82b408083b17",
            "2021-01-04T18:38:30.000000+09:00",
            "2022-07-17T20:39:27.000000+09:00",
            7872,
            "topup"
        )
                .blacklistedShopIds(new String[]{"04e2fc22-99f4-4a5e-b64a-9b5f46361650","5d38127e-b0d1-4154-a731-ab4221022c6d","f7a19eea-f2e4-4342-82bc-d89699b54bf3","97b2a839-22f6-4313-a86a-af61c816f00f","30056142-9fdc-4c0d-b5aa-5748a4e26332","e8a594e5-b47f-4ea0-b844-970f23b366fe","da65bcd6-23f3-4f26-83cb-a88ac24ec911","0f682d5d-ca9d-45fb-9c9d-caf8b164a5dc"})
                .description("WwLCWmQ1sUjNjww5gYMTV77CIidLByPNnavz73")
                .bearPointShopId("046accf5-08e8-4392-aa5e-55a3e545354a");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test26() throws ConnectionError, ProcessingError {
        Request request = new CreateCampaign(
            "HigoBW1BueiscJwva25XeNoYbtUlIuzpyUw5IHQ90tz5aYZlETNRAbh6gBixeF13J3e4aor0DL98XOg18bFy826Ec9vAp7wYvdsUxHhLTwuMYskJMy9bZTzEcC49QryizHKxPbjagewGC1Y1BLlgVbyMDS63LbhSrxLUrMR2ZlzkVoOMBck0MISLJsGHjRKxw5JN4mWtTXsx0pFenI",
            "41e8e493-61a3-4fc0-ad32-82b408083b17",
            "2021-01-04T18:38:30.000000+09:00",
            "2022-07-17T20:39:27.000000+09:00",
            7872,
            "topup"
        )
                .blacklistedShopIds(new String[]{"a498bc5b-8857-4802-b67b-a83f42e566a9","212c6bde-caeb-46ad-b38e-e9e49917fa96","838353fe-f144-43be-945d-f41de7fa269d"})
                .status("enabled")
                .description("dKNeu6E41RN131db2IcXuva84Yb5QfpABymZz0lcjrW5nZ5ASQPhHnx9VIXdjAuzZwXLIXXx25LzvYc0fiqtSLaFG")
                .bearPointShopId("4a459484-1dc1-402d-9077-ec9bade00089");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test27() throws ConnectionError, ProcessingError {
        Request request = new CreateCampaign(
            "HigoBW1BueiscJwva25XeNoYbtUlIuzpyUw5IHQ90tz5aYZlETNRAbh6gBixeF13J3e4aor0DL98XOg18bFy826Ec9vAp7wYvdsUxHhLTwuMYskJMy9bZTzEcC49QryizHKxPbjagewGC1Y1BLlgVbyMDS63LbhSrxLUrMR2ZlzkVoOMBck0MISLJsGHjRKxw5JN4mWtTXsx0pFenI",
            "41e8e493-61a3-4fc0-ad32-82b408083b17",
            "2021-01-04T18:38:30.000000+09:00",
            "2022-07-17T20:39:27.000000+09:00",
            7872,
            "topup"
        )
                .blacklistedShopIds(new String[]{"efc88a74-3770-4a61-a182-b77ea30521b8","4db9b4a2-ae72-4063-bfba-85794135be22","d9dda2b3-7b07-4092-8568-0dba48cd63df","e04d94f7-fc9b-4de8-a8e0-5bdd3d6ddb90","376dad27-ebd1-4711-a6b8-b913d69bf7c7","e38395c3-2ebb-42a2-b36b-eeff0cb91392","245a6d4e-82ce-4309-a7c4-9363c43cf03b","4ba8ef20-86e8-4396-a26a-4944855ff2be","5f58f823-038a-431f-a843-ee7698c083a5","1cf7f2f6-d51f-498b-b73d-8dde22f3eed9"})
                .pointExpiresAt("2020-09-20T19:13:27.000000+09:00")
                .status("disabled")
                .description("QFuKdi7XexlDUIlLEAYnLvsiRT2ViwlNFzm3Dar9JsBO7mLhMcOkHBupDBhz4u2gPSZQnd5WN4gMk6338nhggI4HyP2qfjeoarBAy1FIXFkVCaQhFZRR")
                .bearPointShopId("4112b839-b0dd-4847-90e4-c58a9a20d9e3");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test28() throws ConnectionError, ProcessingError {
        Request request = new CreateCampaign(
            "HigoBW1BueiscJwva25XeNoYbtUlIuzpyUw5IHQ90tz5aYZlETNRAbh6gBixeF13J3e4aor0DL98XOg18bFy826Ec9vAp7wYvdsUxHhLTwuMYskJMy9bZTzEcC49QryizHKxPbjagewGC1Y1BLlgVbyMDS63LbhSrxLUrMR2ZlzkVoOMBck0MISLJsGHjRKxw5JN4mWtTXsx0pFenI",
            "41e8e493-61a3-4fc0-ad32-82b408083b17",
            "2021-01-04T18:38:30.000000+09:00",
            "2022-07-17T20:39:27.000000+09:00",
            7872,
            "topup"
        )
                .blacklistedShopIds(new String[]{"c50998f0-2c56-43e4-9b05-64049c5bc657","f87f5f7a-26d8-4755-903a-41bb89f438f7","d70381e0-5a34-4086-9e46-a785daf49e8f","93a95ed7-915f-442c-b30c-2c0fc5c6ef17","c4e4aa89-657a-4b23-95a7-2e0f60098ae9","fa6f5369-753b-4de7-b760-d74931c3afa5"})
                .pointExpiresInDays(6872)
                .pointExpiresAt("2023-04-06T13:09:15.000000+09:00")
                .status("disabled")
                .description("fxPN5riUhjKfQwjWkXL2J52JLE8bsYIXtBhGZWoR6xF1ci7AdIyMHuf1AWNOSULhXt36G5F4AZSE2CS60NYEJo6qFgLMKEkz")
                .bearPointShopId("2993cd3a-d53c-476d-9266-92fe2efb412e");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test29() throws ConnectionError, ProcessingError {
        Request request = new CreateCampaign(
            "HigoBW1BueiscJwva25XeNoYbtUlIuzpyUw5IHQ90tz5aYZlETNRAbh6gBixeF13J3e4aor0DL98XOg18bFy826Ec9vAp7wYvdsUxHhLTwuMYskJMy9bZTzEcC49QryizHKxPbjagewGC1Y1BLlgVbyMDS63LbhSrxLUrMR2ZlzkVoOMBck0MISLJsGHjRKxw5JN4mWtTXsx0pFenI",
            "41e8e493-61a3-4fc0-ad32-82b408083b17",
            "2021-01-04T18:38:30.000000+09:00",
            "2022-07-17T20:39:27.000000+09:00",
            7872,
            "topup"
        )
                .blacklistedShopIds(new String[]{"56b56d46-cd74-4be4-b921-36bf8149b847","c4c0362f-0d76-43b6-ac14-d52ac2783a24","2683cddb-6365-4c1c-93b2-ff395cbd18ff","51fd7c72-9e99-4933-bcb6-4d167ff5df21","e814a764-0f66-498c-bce1-acf1ca4bfbc5","edb7eae8-851e-43d7-b188-8df3d0189146","dc887adb-e87b-49fa-8d91-643c90675d33","9175cad9-cd4d-4628-a5dd-3f0f1a07514e"})
                .setExclusive(true)
                .pointExpiresInDays(1837)
                .pointExpiresAt("2021-09-23T22:50:49.000000+09:00")
                .status("enabled")
                .description("xQvqkO6xVksWzgtsiOjPtpUI5Y0P9hpIJkg3LYQElOuPSmAzVEEqVMqdC0Zeqr8zVYoBVR7XiwqnCS3atqwowq0IJoTCAbmCoUxLxQ3TPYtzR1")
                .bearPointShopId("dcc7646a-e69b-4d73-8b08-376bee785927");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test30() throws ConnectionError, ProcessingError {
        Request request = new CreateCampaign(
            "HigoBW1BueiscJwva25XeNoYbtUlIuzpyUw5IHQ90tz5aYZlETNRAbh6gBixeF13J3e4aor0DL98XOg18bFy826Ec9vAp7wYvdsUxHhLTwuMYskJMy9bZTzEcC49QryizHKxPbjagewGC1Y1BLlgVbyMDS63LbhSrxLUrMR2ZlzkVoOMBck0MISLJsGHjRKxw5JN4mWtTXsx0pFenI",
            "41e8e493-61a3-4fc0-ad32-82b408083b17",
            "2021-01-04T18:38:30.000000+09:00",
            "2022-07-17T20:39:27.000000+09:00",
            7872,
            "topup"
        )
                .blacklistedShopIds(new String[]{"9d1a7908-dd43-4974-ba03-0e61bae5d1c4","619e42d2-9280-4767-abf3-6fa7ffbef1df","3a50d27a-435c-4981-9a12-4325c2be20b9","b295962e-7161-4a35-9e44-ca4ee7a50f2b"})
                .subject("all")
                .setExclusive(true)
                .pointExpiresInDays(9050)
                .pointExpiresAt("2020-10-27T11:12:19.000000+09:00")
                .status("disabled")
                .description("R57LitBaHFeNzu7UuptygJK1rZR4L4rotKVrpySE75B6lOJ")
                .bearPointShopId("4fb17d29-f580-49c8-ac0f-080fdde1b5b8");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test31() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("subject_more_than_or_equal", 1000);
        items.addProperty("subject_less_than", 5000);
        JsonObject items2 = new JsonObject();
        items2.addProperty("point_amount", 5);
        items2.addProperty("point_amount_unit", "percent");
        items2.addProperty("subject_more_than_or_equal", 1000);
        items2.addProperty("subject_less_than", 5000);
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("subject_more_than_or_equal", 1000);
        items3.addProperty("subject_less_than", 5000);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("subject_more_than_or_equal", 1000);
        items4.addProperty("subject_less_than", 5000);
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("subject_more_than_or_equal", 1000);
        items5.addProperty("subject_less_than", 5000);
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("subject_more_than_or_equal", 1000);
        items6.addProperty("subject_less_than", 5000);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("subject_more_than_or_equal", 1000);
        items7.addProperty("subject_less_than", 5000);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("subject_more_than_or_equal", 1000);
        items8.addProperty("subject_less_than", 5000);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("subject_more_than_or_equal", 1000);
        items9.addProperty("subject_less_than", 5000);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("subject_more_than_or_equal", 1000);
        items10.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "HigoBW1BueiscJwva25XeNoYbtUlIuzpyUw5IHQ90tz5aYZlETNRAbh6gBixeF13J3e4aor0DL98XOg18bFy826Ec9vAp7wYvdsUxHhLTwuMYskJMy9bZTzEcC49QryizHKxPbjagewGC1Y1BLlgVbyMDS63LbhSrxLUrMR2ZlzkVoOMBck0MISLJsGHjRKxw5JN4mWtTXsx0pFenI",
            "41e8e493-61a3-4fc0-ad32-82b408083b17",
            "2021-01-04T18:38:30.000000+09:00",
            "2022-07-17T20:39:27.000000+09:00",
            7872,
            "topup"
        )
                .blacklistedShopIds(new String[]{"6b9f0b5e-8599-4447-9708-0cac9f1cf433","e8978d36-31b0-4532-b5fd-0d79d2a29dee","8ff7ca6b-a311-4a32-a333-b4a6d919cd8c","831e1236-b35e-4104-afd3-75b2bc91c159","1e4a3100-a252-4838-bc99-8cab8e9a7382","6a50cbe2-e94e-4f84-a336-e55651f93e83","d917d4a8-9369-487d-8579-8e43f66d7d83","2adfc227-4a4c-44e2-ab3a-8afab820d686","f92141a7-6556-4200-9665-6ee6181f1a3b","54abf27d-74cd-48ed-b76f-e2abce858ac3"})
                .amountBasedPointRules(new Object[]{items,items2,items3,items4,items5,items6,items7,items8,items9,items10})
                .subject("money")
                .setExclusive(true)
                .pointExpiresInDays(3256)
                .pointExpiresAt("2024-07-04T22:17:39.000000+09:00")
                .status("enabled")
                .description("VE5Qf6MLa35rMr3oIfH8")
                .bearPointShopId("f9be5f8d-922e-4492-9226-5f69aae9f1c8");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test32() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("product_code", "4912345678904");
        items.addProperty("is_multiply_by_count", true);
        items.addProperty("required_count", 2);
        JsonObject items2 = new JsonObject();
        items2.addProperty("point_amount", 5);
        items2.addProperty("point_amount_unit", "percent");
        items2.addProperty("product_code", "4912345678904");
        items2.addProperty("is_multiply_by_count", true);
        items2.addProperty("required_count", 2);
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("is_multiply_by_count", true);
        items3.addProperty("required_count", 2);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("is_multiply_by_count", true);
        items4.addProperty("required_count", 2);
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("is_multiply_by_count", true);
        items5.addProperty("required_count", 2);
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("is_multiply_by_count", true);
        items6.addProperty("required_count", 2);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("is_multiply_by_count", true);
        items7.addProperty("required_count", 2);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("subject_more_than_or_equal", 1000);
        items8.addProperty("subject_less_than", 5000);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("subject_more_than_or_equal", 1000);
        items9.addProperty("subject_less_than", 5000);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("subject_more_than_or_equal", 1000);
        items10.addProperty("subject_less_than", 5000);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("subject_more_than_or_equal", 1000);
        items11.addProperty("subject_less_than", 5000);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("subject_more_than_or_equal", 1000);
        items12.addProperty("subject_less_than", 5000);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("subject_more_than_or_equal", 1000);
        items13.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "HigoBW1BueiscJwva25XeNoYbtUlIuzpyUw5IHQ90tz5aYZlETNRAbh6gBixeF13J3e4aor0DL98XOg18bFy826Ec9vAp7wYvdsUxHhLTwuMYskJMy9bZTzEcC49QryizHKxPbjagewGC1Y1BLlgVbyMDS63LbhSrxLUrMR2ZlzkVoOMBck0MISLJsGHjRKxw5JN4mWtTXsx0pFenI",
            "41e8e493-61a3-4fc0-ad32-82b408083b17",
            "2021-01-04T18:38:30.000000+09:00",
            "2022-07-17T20:39:27.000000+09:00",
            7872,
            "topup"
        )
                .blacklistedShopIds(new String[]{"ffd90b5c-4f33-4947-a357-d4ea1fa25877","01b5fb3d-4df1-444c-b23c-b595969dfc4a","1647ae0c-6d7d-42b0-a2da-56816f901af5","5e28f49d-0df5-4619-b6f0-6e876687d124","073cada0-7cf9-485e-be9d-fd6b5d87f6ff","71462840-b6c1-4fd9-be3f-9cba010aae2f","97cb589f-2cb1-4e03-8840-5cf84ad3ceaa"})
                .productBasedPointRules(new Object[]{items,items2,items3,items4,items5,items6,items7})
                .amountBasedPointRules(new Object[]{items8,items9,items10,items11,items12,items13})
                .subject("money")
                .setExclusive(false)
                .pointExpiresInDays(5066)
                .pointExpiresAt("2022-01-12T03:52:04.000000+09:00")
                .status("enabled")
                .description("I4UWBWFOHaerWbWQq6NkSGDuzcgJ7oHOrm70NwOdZn1sK1O1fwALD8sF8dEAaPgbCLdEfsP71H1GntsfwWN789gX5")
                .bearPointShopId("7b4bd56a-1f55-483d-ae35-318c43e30d04");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test33() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("product_code", "4912345678904");
        items.addProperty("classification_code", "c123");
        JsonObject items2 = new JsonObject();
        items2.addProperty("product_code", "4912345678904");
        items2.addProperty("classification_code", "c123");
        JsonObject items3 = new JsonObject();
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("classification_code", "c123");
        JsonObject items4 = new JsonObject();
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("classification_code", "c123");
        JsonObject items5 = new JsonObject();
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("classification_code", "c123");
        JsonObject items6 = new JsonObject();
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("classification_code", "c123");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("subject_more_than_or_equal", 1000);
        items15.addProperty("subject_less_than", 5000);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("subject_more_than_or_equal", 1000);
        items16.addProperty("subject_less_than", 5000);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("subject_more_than_or_equal", 1000);
        items17.addProperty("subject_less_than", 5000);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("subject_more_than_or_equal", 1000);
        items18.addProperty("subject_less_than", 5000);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("subject_more_than_or_equal", 1000);
        items19.addProperty("subject_less_than", 5000);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("subject_more_than_or_equal", 1000);
        items20.addProperty("subject_less_than", 5000);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("subject_more_than_or_equal", 1000);
        items21.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "HigoBW1BueiscJwva25XeNoYbtUlIuzpyUw5IHQ90tz5aYZlETNRAbh6gBixeF13J3e4aor0DL98XOg18bFy826Ec9vAp7wYvdsUxHhLTwuMYskJMy9bZTzEcC49QryizHKxPbjagewGC1Y1BLlgVbyMDS63LbhSrxLUrMR2ZlzkVoOMBck0MISLJsGHjRKxw5JN4mWtTXsx0pFenI",
            "41e8e493-61a3-4fc0-ad32-82b408083b17",
            "2021-01-04T18:38:30.000000+09:00",
            "2022-07-17T20:39:27.000000+09:00",
            7872,
            "topup"
        )
                .blacklistedShopIds(new String[]{"31eec56a-6d74-4f95-b001-2656ffe3d0ca","bedf037e-6236-41be-b24d-9475affe9726","0570328b-4773-479d-a398-216c505cee2a","56bf539c-a67b-4414-b0bf-e5b056b4ac45","94f14c23-5c59-411f-af13-56a6d8c78b62"})
                .blacklistedProductRules(new Object[]{items,items2,items3,items4,items5,items6,items7,items8,items9})
                .productBasedPointRules(new Object[]{items10,items11,items12,items13,items14})
                .amountBasedPointRules(new Object[]{items15,items16,items17,items18,items19,items20,items21})
                .subject("all")
                .setExclusive(false)
                .pointExpiresInDays(2752)
                .pointExpiresAt("2022-03-21T09:00:10.000000+09:00")
                .status("disabled")
                .description("pho3RpltLL6fDbkaVACptOWFGkmaBs4l92lviXQO4Ol1EheNKB0XCny36U95EswVPRrA1oo7PwZNtNHtXggPRXUc7a")
                .bearPointShopId("0bc3cf40-97fe-4603-b436-0503fc5ab9e0");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test34() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("product_code", "4912345678904");
        items.addProperty("classification_code", "c123");
        JsonObject items2 = new JsonObject();
        items2.addProperty("point_amount", 5);
        items2.addProperty("point_amount_unit", "percent");
        items2.addProperty("product_code", "4912345678904");
        items2.addProperty("is_multiply_by_count", true);
        items2.addProperty("required_count", 2);
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("is_multiply_by_count", true);
        items3.addProperty("required_count", 2);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("is_multiply_by_count", true);
        items4.addProperty("required_count", 2);
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("subject_more_than_or_equal", 1000);
        items5.addProperty("subject_less_than", 5000);
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("subject_more_than_or_equal", 1000);
        items6.addProperty("subject_less_than", 5000);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("subject_more_than_or_equal", 1000);
        items7.addProperty("subject_less_than", 5000);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("subject_more_than_or_equal", 1000);
        items8.addProperty("subject_less_than", 5000);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("subject_more_than_or_equal", 1000);
        items9.addProperty("subject_less_than", 5000);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("subject_more_than_or_equal", 1000);
        items10.addProperty("subject_less_than", 5000);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("subject_more_than_or_equal", 1000);
        items11.addProperty("subject_less_than", 5000);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("subject_more_than_or_equal", 1000);
        items12.addProperty("subject_less_than", 5000);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("subject_more_than_or_equal", 1000);
        items13.addProperty("subject_less_than", 5000);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("subject_more_than_or_equal", 1000);
        items14.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "HigoBW1BueiscJwva25XeNoYbtUlIuzpyUw5IHQ90tz5aYZlETNRAbh6gBixeF13J3e4aor0DL98XOg18bFy826Ec9vAp7wYvdsUxHhLTwuMYskJMy9bZTzEcC49QryizHKxPbjagewGC1Y1BLlgVbyMDS63LbhSrxLUrMR2ZlzkVoOMBck0MISLJsGHjRKxw5JN4mWtTXsx0pFenI",
            "41e8e493-61a3-4fc0-ad32-82b408083b17",
            "2021-01-04T18:38:30.000000+09:00",
            "2022-07-17T20:39:27.000000+09:00",
            7872,
            "topup"
        )
                .blacklistedShopIds(new String[]{"5ca564db-7140-4259-b476-cc3d98c315d9","2a5906e0-7d8b-440f-ac31-aeebd18c9d32","b7a16e0c-d520-40ae-a1a8-52e70d40b311"})
                .applicableDaysOfWeek(new Integer[]{1,3,1,4,1,6,3})
                .blacklistedProductRules(new Object[]{items})
                .productBasedPointRules(new Object[]{items2,items3,items4})
                .amountBasedPointRules(new Object[]{items5,items6,items7,items8,items9,items10,items11,items12,items13,items14})
                .subject("all")
                .setExclusive(false)
                .pointExpiresInDays(654)
                .pointExpiresAt("2022-01-05T22:55:42.000000+09:00")
                .status("enabled")
                .description("pdZ9EH5mCWm1dMYBm5rh4EExUKQiXVnTEyIFqusFetmdJt1BoDDAHesOcQqWx4AcO88Vq0RossVBP9BJpEY64ZX1owUlxZO1w0FPyrvk3RYYwYo3D5APOkxZ7kohqvRhaBeSahs98xPqQUAMtfETCbjYyX93tR9T9uDRmLJxsFsWSvA3jAMlgTTkkh8SjFXXHMjHAAdX")
                .bearPointShopId("f826713e-87b2-44ce-bc31-49aeb880fabd");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test35() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("classification_code", "c123");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("classification_code", "c123");
        JsonObject items11 = new JsonObject();
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("classification_code", "c123");
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("subject_more_than_or_equal", 1000);
        items16.addProperty("subject_less_than", 5000);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("subject_more_than_or_equal", 1000);
        items17.addProperty("subject_less_than", 5000);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("subject_more_than_or_equal", 1000);
        items18.addProperty("subject_less_than", 5000);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("subject_more_than_or_equal", 1000);
        items19.addProperty("subject_less_than", 5000);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("subject_more_than_or_equal", 1000);
        items20.addProperty("subject_less_than", 5000);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("subject_more_than_or_equal", 1000);
        items21.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "HigoBW1BueiscJwva25XeNoYbtUlIuzpyUw5IHQ90tz5aYZlETNRAbh6gBixeF13J3e4aor0DL98XOg18bFy826Ec9vAp7wYvdsUxHhLTwuMYskJMy9bZTzEcC49QryizHKxPbjagewGC1Y1BLlgVbyMDS63LbhSrxLUrMR2ZlzkVoOMBck0MISLJsGHjRKxw5JN4mWtTXsx0pFenI",
            "41e8e493-61a3-4fc0-ad32-82b408083b17",
            "2021-01-04T18:38:30.000000+09:00",
            "2022-07-17T20:39:27.000000+09:00",
            7872,
            "topup"
        )
                .blacklistedShopIds(new String[]{"96fff179-b710-4322-b5b6-ab9e632d11fb","569afd28-981e-4680-bec9-7ee2b9e3ef0f","91e7a880-fb3e-4840-b901-f48cc9cdb5f2","10d1a435-d32f-49ca-aa0e-710fba925284","7d71148f-4aca-4768-99d5-49b5222e2008","0668b4db-4e9c-471e-bd95-e75ac8bd5c17","786401ec-de02-4d1f-85eb-bdd53c59bf58","4a109f91-7641-496f-b38c-9db5f04a24b7"})
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5})
                .applicableDaysOfWeek(new Integer[]{4,6,2,4})
                .blacklistedProductRules(new Object[]{items6,items7,items8,items9,items10,items11})
                .productBasedPointRules(new Object[]{items12,items13,items14,items15})
                .amountBasedPointRules(new Object[]{items16,items17,items18,items19,items20,items21})
                .subject("all")
                .setExclusive(false)
                .pointExpiresInDays(1537)
                .pointExpiresAt("2020-11-11T03:13:48.000000+09:00")
                .status("disabled")
                .description("EqfhOg8Frk0HOBlMEItK9tCgQCrxqfh5L30mS9MpPRcZ0")
                .bearPointShopId("ef6fb5e8-de36-423e-8540-936c1a73bbb8");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test36() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("from", "12:00");
        items7.addProperty("to", "23:59");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("classification_code", "c123");
        JsonObject items11 = new JsonObject();
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("classification_code", "c123");
        JsonObject items12 = new JsonObject();
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("classification_code", "c123");
        JsonObject items13 = new JsonObject();
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("classification_code", "c123");
        JsonObject items14 = new JsonObject();
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("classification_code", "c123");
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("is_multiply_by_count", true);
        items16.addProperty("required_count", 2);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("is_multiply_by_count", true);
        items17.addProperty("required_count", 2);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("product_code", "4912345678904");
        items18.addProperty("is_multiply_by_count", true);
        items18.addProperty("required_count", 2);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("product_code", "4912345678904");
        items19.addProperty("is_multiply_by_count", true);
        items19.addProperty("required_count", 2);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("product_code", "4912345678904");
        items20.addProperty("is_multiply_by_count", true);
        items20.addProperty("required_count", 2);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("product_code", "4912345678904");
        items21.addProperty("is_multiply_by_count", true);
        items21.addProperty("required_count", 2);
        JsonObject items22 = new JsonObject();
        items22.addProperty("point_amount", 5);
        items22.addProperty("point_amount_unit", "percent");
        items22.addProperty("subject_more_than_or_equal", 1000);
        items22.addProperty("subject_less_than", 5000);
        JsonObject items23 = new JsonObject();
        items23.addProperty("point_amount", 5);
        items23.addProperty("point_amount_unit", "percent");
        items23.addProperty("subject_more_than_or_equal", 1000);
        items23.addProperty("subject_less_than", 5000);
        JsonObject items24 = new JsonObject();
        items24.addProperty("point_amount", 5);
        items24.addProperty("point_amount_unit", "percent");
        items24.addProperty("subject_more_than_or_equal", 1000);
        items24.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "HigoBW1BueiscJwva25XeNoYbtUlIuzpyUw5IHQ90tz5aYZlETNRAbh6gBixeF13J3e4aor0DL98XOg18bFy826Ec9vAp7wYvdsUxHhLTwuMYskJMy9bZTzEcC49QryizHKxPbjagewGC1Y1BLlgVbyMDS63LbhSrxLUrMR2ZlzkVoOMBck0MISLJsGHjRKxw5JN4mWtTXsx0pFenI",
            "41e8e493-61a3-4fc0-ad32-82b408083b17",
            "2021-01-04T18:38:30.000000+09:00",
            "2022-07-17T20:39:27.000000+09:00",
            7872,
            "topup"
        )
                .blacklistedShopIds(new String[]{"664452bc-df15-40ff-a037-e4595a3d30a3","d29e1989-9efa-43b4-afa0-e3326cde74c0","57de4ffe-0996-4c6b-bbdf-4b62c362e92e","3b8faf9e-6b6e-4f1b-a1b7-c19696ce79a8","1b0a7381-a186-4954-80a7-a8829b91aba0","21ee6c09-6835-4f40-97b1-3ec023949538","cc3f3494-dffa-440b-a858-f4f85bab0a4e"})
                .minimumNumberOfProducts(5613)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5,items6,items7})
                .applicableDaysOfWeek(new Integer[]{5,1})
                .blacklistedProductRules(new Object[]{items8,items9,items10,items11,items12,items13,items14})
                .productBasedPointRules(new Object[]{items15,items16,items17,items18,items19,items20,items21})
                .amountBasedPointRules(new Object[]{items22,items23,items24})
                .subject("all")
                .setExclusive(false)
                .pointExpiresInDays(5487)
                .pointExpiresAt("2022-07-09T02:00:56.000000+09:00")
                .status("enabled")
                .description("nGNIUOuxOshzb5kqiCwbWuPL6")
                .bearPointShopId("4c4a5a28-977f-4abc-b04b-7e609be2b350");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test37() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("classification_code", "c123");
        JsonObject items11 = new JsonObject();
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("classification_code", "c123");
        JsonObject items12 = new JsonObject();
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("classification_code", "c123");
        JsonObject items13 = new JsonObject();
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("classification_code", "c123");
        JsonObject items14 = new JsonObject();
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("classification_code", "c123");
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("is_multiply_by_count", true);
        items16.addProperty("required_count", 2);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("is_multiply_by_count", true);
        items17.addProperty("required_count", 2);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("product_code", "4912345678904");
        items18.addProperty("is_multiply_by_count", true);
        items18.addProperty("required_count", 2);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("product_code", "4912345678904");
        items19.addProperty("is_multiply_by_count", true);
        items19.addProperty("required_count", 2);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("product_code", "4912345678904");
        items20.addProperty("is_multiply_by_count", true);
        items20.addProperty("required_count", 2);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("product_code", "4912345678904");
        items21.addProperty("is_multiply_by_count", true);
        items21.addProperty("required_count", 2);
        JsonObject items22 = new JsonObject();
        items22.addProperty("point_amount", 5);
        items22.addProperty("point_amount_unit", "percent");
        items22.addProperty("product_code", "4912345678904");
        items22.addProperty("is_multiply_by_count", true);
        items22.addProperty("required_count", 2);
        JsonObject items23 = new JsonObject();
        items23.addProperty("point_amount", 5);
        items23.addProperty("point_amount_unit", "percent");
        items23.addProperty("subject_more_than_or_equal", 1000);
        items23.addProperty("subject_less_than", 5000);
        JsonObject items24 = new JsonObject();
        items24.addProperty("point_amount", 5);
        items24.addProperty("point_amount_unit", "percent");
        items24.addProperty("subject_more_than_or_equal", 1000);
        items24.addProperty("subject_less_than", 5000);
        JsonObject items25 = new JsonObject();
        items25.addProperty("point_amount", 5);
        items25.addProperty("point_amount_unit", "percent");
        items25.addProperty("subject_more_than_or_equal", 1000);
        items25.addProperty("subject_less_than", 5000);
        JsonObject items26 = new JsonObject();
        items26.addProperty("point_amount", 5);
        items26.addProperty("point_amount_unit", "percent");
        items26.addProperty("subject_more_than_or_equal", 1000);
        items26.addProperty("subject_less_than", 5000);
        JsonObject items27 = new JsonObject();
        items27.addProperty("point_amount", 5);
        items27.addProperty("point_amount_unit", "percent");
        items27.addProperty("subject_more_than_or_equal", 1000);
        items27.addProperty("subject_less_than", 5000);
        JsonObject items28 = new JsonObject();
        items28.addProperty("point_amount", 5);
        items28.addProperty("point_amount_unit", "percent");
        items28.addProperty("subject_more_than_or_equal", 1000);
        items28.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "HigoBW1BueiscJwva25XeNoYbtUlIuzpyUw5IHQ90tz5aYZlETNRAbh6gBixeF13J3e4aor0DL98XOg18bFy826Ec9vAp7wYvdsUxHhLTwuMYskJMy9bZTzEcC49QryizHKxPbjagewGC1Y1BLlgVbyMDS63LbhSrxLUrMR2ZlzkVoOMBck0MISLJsGHjRKxw5JN4mWtTXsx0pFenI",
            "41e8e493-61a3-4fc0-ad32-82b408083b17",
            "2021-01-04T18:38:30.000000+09:00",
            "2022-07-17T20:39:27.000000+09:00",
            7872,
            "topup"
        )
                .blacklistedShopIds(new String[]{"51dafb68-b589-4aa2-a520-f3fb11153601","c8bdb124-4898-469b-ad94-436401cb96b7","090db6c6-2493-4c7d-9873-b88cfc32d01a","0b3734c1-9874-4ebf-9345-f0f58c5f92df","5fc86351-6bf6-4091-822c-cd4fe415f523"})
                .minimumNumberOfAmount(3632)
                .minimumNumberOfProducts(8724)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5,items6})
                .applicableDaysOfWeek(new Integer[]{5,5,5,6,4,1})
                .blacklistedProductRules(new Object[]{items7,items8,items9,items10,items11,items12,items13,items14})
                .productBasedPointRules(new Object[]{items15,items16,items17,items18,items19,items20,items21,items22})
                .amountBasedPointRules(new Object[]{items23,items24,items25,items26,items27,items28})
                .subject("money")
                .setExclusive(true)
                .pointExpiresInDays(7456)
                .pointExpiresAt("2020-10-11T02:37:21.000000+09:00")
                .status("enabled")
                .description("Ujlp6ijIVwOkWabRLQctHjXUun")
                .bearPointShopId("7366bd5d-517c-4dfd-b231-6001b9fb5756");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test38() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("from", "12:00");
        items7.addProperty("to", "23:59");
        JsonObject items8 = new JsonObject();
        items8.addProperty("from", "12:00");
        items8.addProperty("to", "23:59");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("classification_code", "c123");
        JsonObject items11 = new JsonObject();
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("classification_code", "c123");
        JsonObject items12 = new JsonObject();
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("classification_code", "c123");
        JsonObject items13 = new JsonObject();
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("classification_code", "c123");
        JsonObject items14 = new JsonObject();
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("classification_code", "c123");
        JsonObject items15 = new JsonObject();
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("classification_code", "c123");
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("is_multiply_by_count", true);
        items16.addProperty("required_count", 2);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("is_multiply_by_count", true);
        items17.addProperty("required_count", 2);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("product_code", "4912345678904");
        items18.addProperty("is_multiply_by_count", true);
        items18.addProperty("required_count", 2);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("product_code", "4912345678904");
        items19.addProperty("is_multiply_by_count", true);
        items19.addProperty("required_count", 2);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("product_code", "4912345678904");
        items20.addProperty("is_multiply_by_count", true);
        items20.addProperty("required_count", 2);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("product_code", "4912345678904");
        items21.addProperty("is_multiply_by_count", true);
        items21.addProperty("required_count", 2);
        JsonObject items22 = new JsonObject();
        items22.addProperty("point_amount", 5);
        items22.addProperty("point_amount_unit", "percent");
        items22.addProperty("subject_more_than_or_equal", 1000);
        items22.addProperty("subject_less_than", 5000);
        JsonObject items23 = new JsonObject();
        items23.addProperty("point_amount", 5);
        items23.addProperty("point_amount_unit", "percent");
        items23.addProperty("subject_more_than_or_equal", 1000);
        items23.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "HigoBW1BueiscJwva25XeNoYbtUlIuzpyUw5IHQ90tz5aYZlETNRAbh6gBixeF13J3e4aor0DL98XOg18bFy826Ec9vAp7wYvdsUxHhLTwuMYskJMy9bZTzEcC49QryizHKxPbjagewGC1Y1BLlgVbyMDS63LbhSrxLUrMR2ZlzkVoOMBck0MISLJsGHjRKxw5JN4mWtTXsx0pFenI",
            "41e8e493-61a3-4fc0-ad32-82b408083b17",
            "2021-01-04T18:38:30.000000+09:00",
            "2022-07-17T20:39:27.000000+09:00",
            7872,
            "topup"
        )
                .blacklistedShopIds(new String[]{"80bbebe7-2681-40a7-bd33-5aa332414f14","40a8bce2-6176-4cbe-8ac1-e0c54295da40","438c84df-f923-4b67-980c-c6ae925b0ecb","bd7a26cf-f770-484c-9c53-c2bbffdc206a","723490f8-fc4d-4d02-b3f1-115e976ea8f9"})
                .minimumNumberForCombinationPurchase(4591)
                .minimumNumberOfAmount(1414)
                .minimumNumberOfProducts(8587)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5,items6,items7,items8})
                .applicableDaysOfWeek(new Integer[]{0,4,0,1,2,1,4,2})
                .blacklistedProductRules(new Object[]{items9,items10,items11,items12,items13,items14,items15})
                .productBasedPointRules(new Object[]{items16,items17,items18,items19,items20,items21})
                .amountBasedPointRules(new Object[]{items22,items23})
                .subject("all")
                .setExclusive(true)
                .pointExpiresInDays(268)
                .pointExpiresAt("2024-03-26T10:14:09.000000+09:00")
                .status("disabled")
                .description("ScXgBxH4FyYOqedVjJn0vYPUWBv6fJ6jneBPMJHYzRxXlQ9ypZc9QVyp4zbfkZCpRLfnjOc3pARJChiHxInUaAFopvjsNPigP5Eb8bu7omUrV3PO")
                .bearPointShopId("ee94dd59-3e18-4d8a-87f7-425a80d9a931");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test39() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("classification_code", "c123");
        JsonObject items4 = new JsonObject();
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("classification_code", "c123");
        JsonObject items5 = new JsonObject();
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("classification_code", "c123");
        JsonObject items6 = new JsonObject();
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("classification_code", "c123");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("is_multiply_by_count", true);
        items9.addProperty("required_count", 2);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("subject_more_than_or_equal", 1000);
        items16.addProperty("subject_less_than", 5000);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("subject_more_than_or_equal", 1000);
        items17.addProperty("subject_less_than", 5000);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("subject_more_than_or_equal", 1000);
        items18.addProperty("subject_less_than", 5000);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("subject_more_than_or_equal", 1000);
        items19.addProperty("subject_less_than", 5000);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("subject_more_than_or_equal", 1000);
        items20.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "HigoBW1BueiscJwva25XeNoYbtUlIuzpyUw5IHQ90tz5aYZlETNRAbh6gBixeF13J3e4aor0DL98XOg18bFy826Ec9vAp7wYvdsUxHhLTwuMYskJMy9bZTzEcC49QryizHKxPbjagewGC1Y1BLlgVbyMDS63LbhSrxLUrMR2ZlzkVoOMBck0MISLJsGHjRKxw5JN4mWtTXsx0pFenI",
            "41e8e493-61a3-4fc0-ad32-82b408083b17",
            "2021-01-04T18:38:30.000000+09:00",
            "2022-07-17T20:39:27.000000+09:00",
            7872,
            "topup"
        )
                .blacklistedShopIds(new String[]{"213c1c4e-5616-45a4-867c-0f90b9a2a304"})
                .existInEachProductGroups(false)
                .minimumNumberForCombinationPurchase(9264)
                .minimumNumberOfAmount(4751)
                .minimumNumberOfProducts(9808)
                .applicableTimeRanges(new Object[]{items,items2})
                .applicableDaysOfWeek(new Integer[]{0,1,6,1,5})
                .blacklistedProductRules(new Object[]{items3,items4,items5,items6,items7,items8})
                .productBasedPointRules(new Object[]{items9,items10,items11,items12,items13,items14,items15})
                .amountBasedPointRules(new Object[]{items16,items17,items18,items19,items20})
                .subject("money")
                .setExclusive(false)
                .pointExpiresInDays(3968)
                .pointExpiresAt("2022-10-23T06:55:26.000000+09:00")
                .status("disabled")
                .description("10V5C96a17KmKN2dr8gerOOi2jG3laFQWwUgkWBInAiod7SEAYvJadYS1lO7WlMR5T9U0xYRK1dRhxAKRCi0QY7ksTXEXh0RTkggzxy2nPfkVFJdNobmLyK0B37JICY4DVPHHyq0xCvcGLZIeRDwY2uz0puGXEBgUWFitJnIHinmur2QJeyF")
                .bearPointShopId("f32afcbc-b014-423b-8a9f-d5c2daf70106");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test40() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("classification_code", "c123");
        JsonObject items6 = new JsonObject();
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("classification_code", "c123");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("subject_more_than_or_equal", 1000);
        items14.addProperty("subject_less_than", 5000);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("subject_more_than_or_equal", 1000);
        items15.addProperty("subject_less_than", 5000);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("subject_more_than_or_equal", 1000);
        items16.addProperty("subject_less_than", 5000);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("subject_more_than_or_equal", 1000);
        items17.addProperty("subject_less_than", 5000);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("subject_more_than_or_equal", 1000);
        items18.addProperty("subject_less_than", 5000);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("subject_more_than_or_equal", 1000);
        items19.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "HigoBW1BueiscJwva25XeNoYbtUlIuzpyUw5IHQ90tz5aYZlETNRAbh6gBixeF13J3e4aor0DL98XOg18bFy826Ec9vAp7wYvdsUxHhLTwuMYskJMy9bZTzEcC49QryizHKxPbjagewGC1Y1BLlgVbyMDS63LbhSrxLUrMR2ZlzkVoOMBck0MISLJsGHjRKxw5JN4mWtTXsx0pFenI",
            "41e8e493-61a3-4fc0-ad32-82b408083b17",
            "2021-01-04T18:38:30.000000+09:00",
            "2022-07-17T20:39:27.000000+09:00",
            7872,
            "topup"
        )
                .blacklistedShopIds(new String[]{"fd1ca4a1-9228-4e79-82e3-aafd41dea81d","c2b86efb-5c04-403b-80b7-ddc662be1b9d","2d179025-e24a-49e9-a69f-99300d798556","005a281f-e124-4794-b61c-abf21b10d0a9","8a6c3944-074f-4d7c-b044-84cc229a5d93","b499e7cd-9e6f-4538-b757-ea075d0b2152","fddc9632-a8de-4716-b6b7-0304ccc0dffc"})
                .maxPointAmount(5059)
                .existInEachProductGroups(false)
                .minimumNumberForCombinationPurchase(9116)
                .minimumNumberOfAmount(9551)
                .minimumNumberOfProducts(4739)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4})
                .applicableDaysOfWeek(new Integer[]{3,4,5,0,2,6,1,0,1,4})
                .blacklistedProductRules(new Object[]{items5,items6,items7,items8,items9})
                .productBasedPointRules(new Object[]{items10,items11,items12,items13})
                .amountBasedPointRules(new Object[]{items14,items15,items16,items17,items18,items19})
                .subject("all")
                .setExclusive(false)
                .pointExpiresInDays(6994)
                .pointExpiresAt("2022-04-09T14:12:46.000000+09:00")
                .status("disabled")
                .description("ruVzoVcfOM9oBeoYGqobX2nvECEAjI4DvJNSzfka5KTFSL1aerslnkH8MZczE3b6PWQQ9mUClkPlnWWxIOi9U1e3St7dp0K226YsRStCn36Ezmg7YcO")
                .bearPointShopId("39d09c34-5c39-483f-b409-54d645850e87");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test41() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("classification_code", "c123");
        JsonObject items5 = new JsonObject();
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("classification_code", "c123");
        JsonObject items6 = new JsonObject();
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("classification_code", "c123");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("classification_code", "c123");
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("subject_more_than_or_equal", 1000);
        items16.addProperty("subject_less_than", 5000);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("subject_more_than_or_equal", 1000);
        items17.addProperty("subject_less_than", 5000);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("subject_more_than_or_equal", 1000);
        items18.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "HigoBW1BueiscJwva25XeNoYbtUlIuzpyUw5IHQ90tz5aYZlETNRAbh6gBixeF13J3e4aor0DL98XOg18bFy826Ec9vAp7wYvdsUxHhLTwuMYskJMy9bZTzEcC49QryizHKxPbjagewGC1Y1BLlgVbyMDS63LbhSrxLUrMR2ZlzkVoOMBck0MISLJsGHjRKxw5JN4mWtTXsx0pFenI",
            "41e8e493-61a3-4fc0-ad32-82b408083b17",
            "2021-01-04T18:38:30.000000+09:00",
            "2022-07-17T20:39:27.000000+09:00",
            7872,
            "topup"
        )
                .blacklistedShopIds(new String[]{"945e733f-9c2a-425e-8c0b-54af02a7fdff","a67572e5-6992-43fb-aa07-69b451404316","3e18ec52-2136-437c-bc6d-b951381c7b60","7e70917f-bbcb-42ce-98b4-1cfe9f608af0","f876a756-8b14-4dc5-be77-33e766e3983f"})
                .maxTotalPointAmount(4204)
                .maxPointAmount(5551)
                .existInEachProductGroups(false)
                .minimumNumberForCombinationPurchase(5597)
                .minimumNumberOfAmount(5293)
                .minimumNumberOfProducts(5903)
                .applicableTimeRanges(new Object[]{items,items2,items3})
                .applicableDaysOfWeek(new Integer[]{2,5})
                .blacklistedProductRules(new Object[]{items4,items5,items6,items7,items8,items9,items10})
                .productBasedPointRules(new Object[]{items11,items12,items13,items14,items15})
                .amountBasedPointRules(new Object[]{items16,items17,items18})
                .subject("money")
                .setExclusive(false)
                .pointExpiresInDays(2644)
                .pointExpiresAt("2023-05-09T06:27:07.000000+09:00")
                .status("disabled")
                .description("JNiwp4fH5PY2GrUeMuKR8rhMIi")
                .bearPointShopId("01b6106e-d21a-4c37-b7cb-e94b443d82e5");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test42() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("from", "12:00");
        items7.addProperty("to", "23:59");
        JsonObject items8 = new JsonObject();
        items8.addProperty("from", "12:00");
        items8.addProperty("to", "23:59");
        JsonObject items9 = new JsonObject();
        items9.addProperty("from", "12:00");
        items9.addProperty("to", "23:59");
        JsonObject items10 = new JsonObject();
        items10.addProperty("from", "12:00");
        items10.addProperty("to", "23:59");
        JsonObject items11 = new JsonObject();
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("classification_code", "c123");
        JsonObject items12 = new JsonObject();
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("classification_code", "c123");
        JsonObject items13 = new JsonObject();
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("classification_code", "c123");
        JsonObject items14 = new JsonObject();
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("classification_code", "c123");
        JsonObject items15 = new JsonObject();
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("classification_code", "c123");
        JsonObject items16 = new JsonObject();
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("classification_code", "c123");
        JsonObject items17 = new JsonObject();
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("classification_code", "c123");
        JsonObject items18 = new JsonObject();
        items18.addProperty("product_code", "4912345678904");
        items18.addProperty("classification_code", "c123");
        JsonObject items19 = new JsonObject();
        items19.addProperty("product_code", "4912345678904");
        items19.addProperty("classification_code", "c123");
        JsonObject items20 = new JsonObject();
        items20.addProperty("product_code", "4912345678904");
        items20.addProperty("classification_code", "c123");
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("product_code", "4912345678904");
        items21.addProperty("is_multiply_by_count", true);
        items21.addProperty("required_count", 2);
        JsonObject items22 = new JsonObject();
        items22.addProperty("point_amount", 5);
        items22.addProperty("point_amount_unit", "percent");
        items22.addProperty("product_code", "4912345678904");
        items22.addProperty("is_multiply_by_count", true);
        items22.addProperty("required_count", 2);
        JsonObject items23 = new JsonObject();
        items23.addProperty("point_amount", 5);
        items23.addProperty("point_amount_unit", "percent");
        items23.addProperty("product_code", "4912345678904");
        items23.addProperty("is_multiply_by_count", true);
        items23.addProperty("required_count", 2);
        JsonObject items24 = new JsonObject();
        items24.addProperty("point_amount", 5);
        items24.addProperty("point_amount_unit", "percent");
        items24.addProperty("product_code", "4912345678904");
        items24.addProperty("is_multiply_by_count", true);
        items24.addProperty("required_count", 2);
        JsonObject items25 = new JsonObject();
        items25.addProperty("point_amount", 5);
        items25.addProperty("point_amount_unit", "percent");
        items25.addProperty("product_code", "4912345678904");
        items25.addProperty("is_multiply_by_count", true);
        items25.addProperty("required_count", 2);
        JsonObject items26 = new JsonObject();
        items26.addProperty("point_amount", 5);
        items26.addProperty("point_amount_unit", "percent");
        items26.addProperty("product_code", "4912345678904");
        items26.addProperty("is_multiply_by_count", true);
        items26.addProperty("required_count", 2);
        JsonObject items27 = new JsonObject();
        items27.addProperty("point_amount", 5);
        items27.addProperty("point_amount_unit", "percent");
        items27.addProperty("product_code", "4912345678904");
        items27.addProperty("is_multiply_by_count", true);
        items27.addProperty("required_count", 2);
        JsonObject items28 = new JsonObject();
        items28.addProperty("point_amount", 5);
        items28.addProperty("point_amount_unit", "percent");
        items28.addProperty("product_code", "4912345678904");
        items28.addProperty("is_multiply_by_count", true);
        items28.addProperty("required_count", 2);
        JsonObject items29 = new JsonObject();
        items29.addProperty("point_amount", 5);
        items29.addProperty("point_amount_unit", "percent");
        items29.addProperty("product_code", "4912345678904");
        items29.addProperty("is_multiply_by_count", true);
        items29.addProperty("required_count", 2);
        JsonObject items30 = new JsonObject();
        items30.addProperty("point_amount", 5);
        items30.addProperty("point_amount_unit", "percent");
        items30.addProperty("subject_more_than_or_equal", 1000);
        items30.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "HigoBW1BueiscJwva25XeNoYbtUlIuzpyUw5IHQ90tz5aYZlETNRAbh6gBixeF13J3e4aor0DL98XOg18bFy826Ec9vAp7wYvdsUxHhLTwuMYskJMy9bZTzEcC49QryizHKxPbjagewGC1Y1BLlgVbyMDS63LbhSrxLUrMR2ZlzkVoOMBck0MISLJsGHjRKxw5JN4mWtTXsx0pFenI",
            "41e8e493-61a3-4fc0-ad32-82b408083b17",
            "2021-01-04T18:38:30.000000+09:00",
            "2022-07-17T20:39:27.000000+09:00",
            7872,
            "topup"
        )
                .blacklistedShopIds(new String[]{"a9be292d-8148-40b6-b98d-513388443518","48603498-a347-44b7-ae5a-83482f0bb498","8cbcac2a-1ae1-4b3d-b807-4fbbefe2b835","a7898b14-5047-4579-8671-0564a2f0945c","05c710c8-af5b-474b-8e0d-a23702578273","00bfab29-d014-470b-99d5-de4c174bae86","a612c926-1192-4639-9e90-ee220c69cdf3"})
                .destPrivateMoneyId("0e8a8380-fc70-4c14-a2a2-d64b278165a2")
                .maxTotalPointAmount(8164)
                .maxPointAmount(1704)
                .existInEachProductGroups(false)
                .minimumNumberForCombinationPurchase(6912)
                .minimumNumberOfAmount(9355)
                .minimumNumberOfProducts(1651)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5,items6,items7,items8,items9,items10})
                .applicableDaysOfWeek(new Integer[]{3,3,6,4,4,5,3,0})
                .blacklistedProductRules(new Object[]{items11,items12,items13,items14,items15,items16,items17,items18,items19,items20})
                .productBasedPointRules(new Object[]{items21,items22,items23,items24,items25,items26,items27,items28,items29})
                .amountBasedPointRules(new Object[]{items30})
                .subject("money")
                .setExclusive(true)
                .pointExpiresInDays(14)
                .pointExpiresAt("2023-08-25T03:39:01.000000+09:00")
                .status("enabled")
                .description("pw844ZkTOmCNn6iS5Gad3CRiPhHBc993sIe30d8b4CJ4EizMQ7zFqZeSDtTNd6tnseOsITfJDru0R7PV7xkfWW10DJj8fnNIMPdgr5B3F9cKfysVb")
                .bearPointShopId("ef79adfe-defc-44fb-8abc-f44fe8b4e825");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test43() throws ConnectionError, ProcessingError {
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("classification_code", "c123");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("is_multiply_by_count", true);
        items9.addProperty("required_count", 2);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("is_multiply_by_count", true);
        items16.addProperty("required_count", 2);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("is_multiply_by_count", true);
        items17.addProperty("required_count", 2);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("product_code", "4912345678904");
        items18.addProperty("is_multiply_by_count", true);
        items18.addProperty("required_count", 2);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("subject_more_than_or_equal", 1000);
        items19.addProperty("subject_less_than", 5000);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("subject_more_than_or_equal", 1000);
        items20.addProperty("subject_less_than", 5000);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("subject_more_than_or_equal", 1000);
        items21.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "HigoBW1BueiscJwva25XeNoYbtUlIuzpyUw5IHQ90tz5aYZlETNRAbh6gBixeF13J3e4aor0DL98XOg18bFy826Ec9vAp7wYvdsUxHhLTwuMYskJMy9bZTzEcC49QryizHKxPbjagewGC1Y1BLlgVbyMDS63LbhSrxLUrMR2ZlzkVoOMBck0MISLJsGHjRKxw5JN4mWtTXsx0pFenI",
            "41e8e493-61a3-4fc0-ad32-82b408083b17",
            "2021-01-04T18:38:30.000000+09:00",
            "2022-07-17T20:39:27.000000+09:00",
            7872,
            "topup"
        )
                .blacklistedShopIds(new String[]{"945417ce-e69c-46b6-9acf-f23494435c7e","5ae53f63-e325-4a44-9cd8-31761178703e"})
                .applicableAccountMetadata(applicable_account_metadata)
                .destPrivateMoneyId("6f142b4f-9487-4ff9-b374-6938d702575e")
                .maxTotalPointAmount(5986)
                .maxPointAmount(7730)
                .existInEachProductGroups(false)
                .minimumNumberForCombinationPurchase(5472)
                .minimumNumberOfAmount(4370)
                .minimumNumberOfProducts(2098)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5})
                .applicableDaysOfWeek(new Integer[]{1})
                .blacklistedProductRules(new Object[]{items6,items7,items8})
                .productBasedPointRules(new Object[]{items9,items10,items11,items12,items13,items14,items15,items16,items17,items18})
                .amountBasedPointRules(new Object[]{items19,items20,items21})
                .subject("all")
                .setExclusive(true)
                .pointExpiresInDays(6097)
                .pointExpiresAt("2020-11-17T23:33:37.000000+09:00")
                .status("disabled")
                .description("NuydMzKLZkKmI3QhefxIdYvaklth5BI8x9bQZPiRFWUcNwjtKSxTm1Get5kD2V8yEfVLthQHM8")
                .bearPointShopId("4eabc537-c2ac-4abb-811c-025d51698c53");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test44() throws ConnectionError, ProcessingError {
        JsonObject applicable_transaction_metadata = new JsonObject();
        applicable_transaction_metadata.addProperty("key", "rank");
        applicable_transaction_metadata.addProperty("value", "bronze");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("is_multiply_by_count", true);
        items16.addProperty("required_count", 2);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("is_multiply_by_count", true);
        items17.addProperty("required_count", 2);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("product_code", "4912345678904");
        items18.addProperty("is_multiply_by_count", true);
        items18.addProperty("required_count", 2);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("product_code", "4912345678904");
        items19.addProperty("is_multiply_by_count", true);
        items19.addProperty("required_count", 2);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("subject_more_than_or_equal", 1000);
        items20.addProperty("subject_less_than", 5000);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("subject_more_than_or_equal", 1000);
        items21.addProperty("subject_less_than", 5000);
        JsonObject items22 = new JsonObject();
        items22.addProperty("point_amount", 5);
        items22.addProperty("point_amount_unit", "percent");
        items22.addProperty("subject_more_than_or_equal", 1000);
        items22.addProperty("subject_less_than", 5000);
        JsonObject items23 = new JsonObject();
        items23.addProperty("point_amount", 5);
        items23.addProperty("point_amount_unit", "percent");
        items23.addProperty("subject_more_than_or_equal", 1000);
        items23.addProperty("subject_less_than", 5000);
        JsonObject items24 = new JsonObject();
        items24.addProperty("point_amount", 5);
        items24.addProperty("point_amount_unit", "percent");
        items24.addProperty("subject_more_than_or_equal", 1000);
        items24.addProperty("subject_less_than", 5000);
        JsonObject items25 = new JsonObject();
        items25.addProperty("point_amount", 5);
        items25.addProperty("point_amount_unit", "percent");
        items25.addProperty("subject_more_than_or_equal", 1000);
        items25.addProperty("subject_less_than", 5000);
        JsonObject items26 = new JsonObject();
        items26.addProperty("point_amount", 5);
        items26.addProperty("point_amount_unit", "percent");
        items26.addProperty("subject_more_than_or_equal", 1000);
        items26.addProperty("subject_less_than", 5000);
        JsonObject items27 = new JsonObject();
        items27.addProperty("point_amount", 5);
        items27.addProperty("point_amount_unit", "percent");
        items27.addProperty("subject_more_than_or_equal", 1000);
        items27.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "HigoBW1BueiscJwva25XeNoYbtUlIuzpyUw5IHQ90tz5aYZlETNRAbh6gBixeF13J3e4aor0DL98XOg18bFy826Ec9vAp7wYvdsUxHhLTwuMYskJMy9bZTzEcC49QryizHKxPbjagewGC1Y1BLlgVbyMDS63LbhSrxLUrMR2ZlzkVoOMBck0MISLJsGHjRKxw5JN4mWtTXsx0pFenI",
            "41e8e493-61a3-4fc0-ad32-82b408083b17",
            "2021-01-04T18:38:30.000000+09:00",
            "2022-07-17T20:39:27.000000+09:00",
            7872,
            "topup"
        )
                .blacklistedShopIds(new String[]{"a70235f6-a881-4b5d-bbe3-cba4cb12375c","97a1a423-05b9-45d3-ae3f-49965649c9f8","0c1cf100-434b-4c5f-8626-944cb20383c8","a103e973-c79f-4f2a-898b-5359a4d16069","e6b71005-575b-484b-8a3e-a51bd61729b5","b1fab1f9-e7ee-417b-86ea-ec206c92fe61","181550ec-ad1f-42cf-aadc-f055b6af471f","2b485c2b-c4e4-4c47-9c55-0fa082c9d051","0138e873-b0b2-4ef6-a60c-df6c9334fe1d","bbbe298b-f1de-44f9-95e4-09e068e84de0"})
                .applicableTransactionMetadata(applicable_transaction_metadata)
                .applicableAccountMetadata(applicable_account_metadata)
                .destPrivateMoneyId("90c28468-3f34-4426-a2f0-f88890ebd4a2")
                .maxTotalPointAmount(6536)
                .maxPointAmount(7663)
                .existInEachProductGroups(true)
                .minimumNumberForCombinationPurchase(7587)
                .minimumNumberOfAmount(1886)
                .minimumNumberOfProducts(3307)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5,items6})
                .applicableDaysOfWeek(new Integer[]{4,2,0,5,3})
                .blacklistedProductRules(new Object[]{items7,items8,items9})
                .productBasedPointRules(new Object[]{items10,items11,items12,items13,items14,items15,items16,items17,items18,items19})
                .amountBasedPointRules(new Object[]{items20,items21,items22,items23,items24,items25,items26,items27})
                .subject("all")
                .setExclusive(false)
                .pointExpiresInDays(7561)
                .pointExpiresAt("2021-12-19T09:56:43.000000+09:00")
                .status("enabled")
                .description("YRbthn6eTDui63q55P4peQCLpYBbi5PRwkMVtGsanu0LQaEAiT3x6TJw9ZXw5wApIW3L6WtugeuOHV6lzVcbeXvz6Hqegyz0eAj7EYxrXULMr83HscQIqDXPVEdNW48BXZYziGuPGIqN3pbrIn3z4c")
                .bearPointShopId("1c0cebb3-8f3a-4225-9324-560ef0ad7b23");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test45() throws ConnectionError, ProcessingError {
        JsonObject applicable_transaction_metadata = new JsonObject();
        applicable_transaction_metadata.addProperty("key", "rank");
        applicable_transaction_metadata.addProperty("value", "bronze");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("from", "12:00");
        items7.addProperty("to", "23:59");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("classification_code", "c123");
        JsonObject items11 = new JsonObject();
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("classification_code", "c123");
        JsonObject items12 = new JsonObject();
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("classification_code", "c123");
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("is_multiply_by_count", true);
        items16.addProperty("required_count", 2);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("is_multiply_by_count", true);
        items17.addProperty("required_count", 2);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("product_code", "4912345678904");
        items18.addProperty("is_multiply_by_count", true);
        items18.addProperty("required_count", 2);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("product_code", "4912345678904");
        items19.addProperty("is_multiply_by_count", true);
        items19.addProperty("required_count", 2);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("product_code", "4912345678904");
        items20.addProperty("is_multiply_by_count", true);
        items20.addProperty("required_count", 2);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("subject_more_than_or_equal", 1000);
        items21.addProperty("subject_less_than", 5000);
        JsonObject items22 = new JsonObject();
        items22.addProperty("point_amount", 5);
        items22.addProperty("point_amount_unit", "percent");
        items22.addProperty("subject_more_than_or_equal", 1000);
        items22.addProperty("subject_less_than", 5000);
        JsonObject items23 = new JsonObject();
        items23.addProperty("point_amount", 5);
        items23.addProperty("point_amount_unit", "percent");
        items23.addProperty("subject_more_than_or_equal", 1000);
        items23.addProperty("subject_less_than", 5000);
        JsonObject items24 = new JsonObject();
        items24.addProperty("point_amount", 5);
        items24.addProperty("point_amount_unit", "percent");
        items24.addProperty("subject_more_than_or_equal", 1000);
        items24.addProperty("subject_less_than", 5000);
        JsonObject items25 = new JsonObject();
        items25.addProperty("point_amount", 5);
        items25.addProperty("point_amount_unit", "percent");
        items25.addProperty("subject_more_than_or_equal", 1000);
        items25.addProperty("subject_less_than", 5000);
        JsonObject items26 = new JsonObject();
        items26.addProperty("point_amount", 5);
        items26.addProperty("point_amount_unit", "percent");
        items26.addProperty("subject_more_than_or_equal", 1000);
        items26.addProperty("subject_less_than", 5000);
        JsonObject items27 = new JsonObject();
        items27.addProperty("point_amount", 5);
        items27.addProperty("point_amount_unit", "percent");
        items27.addProperty("subject_more_than_or_equal", 1000);
        items27.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "HigoBW1BueiscJwva25XeNoYbtUlIuzpyUw5IHQ90tz5aYZlETNRAbh6gBixeF13J3e4aor0DL98XOg18bFy826Ec9vAp7wYvdsUxHhLTwuMYskJMy9bZTzEcC49QryizHKxPbjagewGC1Y1BLlgVbyMDS63LbhSrxLUrMR2ZlzkVoOMBck0MISLJsGHjRKxw5JN4mWtTXsx0pFenI",
            "41e8e493-61a3-4fc0-ad32-82b408083b17",
            "2021-01-04T18:38:30.000000+09:00",
            "2022-07-17T20:39:27.000000+09:00",
            7872,
            "topup"
        )
                .blacklistedShopIds(new String[]{"a536147d-8133-4069-b7cd-5e71e0d66c36","20e31ac9-5eb0-4cae-9377-f9353c16ddc1","7591202e-05b9-4e9d-8e3c-c69be014a350","94d38342-7996-42c9-9917-ff9f3ef8f5c2"})
                .budgetCapsAmount(201144861)
                .applicableTransactionMetadata(applicable_transaction_metadata)
                .applicableAccountMetadata(applicable_account_metadata)
                .destPrivateMoneyId("fad0be75-a2b7-44fc-a3c4-af29a4c527bc")
                .maxTotalPointAmount(4114)
                .maxPointAmount(8679)
                .existInEachProductGroups(true)
                .minimumNumberForCombinationPurchase(8188)
                .minimumNumberOfAmount(6403)
                .minimumNumberOfProducts(6958)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5,items6,items7})
                .applicableDaysOfWeek(new Integer[]{6,1})
                .blacklistedProductRules(new Object[]{items8,items9,items10,items11,items12})
                .productBasedPointRules(new Object[]{items13,items14,items15,items16,items17,items18,items19,items20})
                .amountBasedPointRules(new Object[]{items21,items22,items23,items24,items25,items26,items27})
                .subject("money")
                .setExclusive(true)
                .pointExpiresInDays(769)
                .pointExpiresAt("2021-11-26T13:54:52.000000+09:00")
                .status("disabled")
                .description("9eMT1991qU9d9QrHCmrmzWoF9XMVbrIUW4zaESpR2ep71lliSfr1CYr1cm3a5WDVwebs0PxyOHClSlsjhdxJUjWUTr0r0wrIb34F0VV1KFwSWKa4qvSNKXXwidY2n8X5CY76iUuCNH5i3qU4I1jKu6pzYquiUfufczBwR88TlCkbDoIWDx1PzIYOcZB18Rzoa5se")
                .bearPointShopId("430879cf-65dd-439c-a28b-55709f0b3068");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
}
