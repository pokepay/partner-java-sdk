// DO NOT EDIT: File is generated by code generator.
package jp.pokepay.partnerapi;

import jp.pokepay.partnerapi.request.CreateCampaign;
import jp.pokepay.partnerapi.request.Request;
import com.google.gson.JsonObject;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class CreateCampaignTest {
    @Test
    void test0() throws ConnectionError, ProcessingError {
        Request request = new CreateCampaign(
            "BIPqdCDvWnTRvriMMqT8Y2wPxWWXEUoqg0zXsuvc8LF4mbP1hyPDbNVjct5yQNjVn35rDh040vhQYw5VlT5PtGoiFuhhxPNxJedAo6IB1JwI4HtHPlHFEuPGo3",
            "787a93c7-7ceb-460d-a428-a1f98945efe7",
            "2020-02-28T15:38:38.000000Z",
            "2021-01-29T22:29:35.000000Z",
            5711,
            "external-transaction"
        );
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test1() throws ConnectionError, ProcessingError {
        Request request = new CreateCampaign(
            "BIPqdCDvWnTRvriMMqT8Y2wPxWWXEUoqg0zXsuvc8LF4mbP1hyPDbNVjct5yQNjVn35rDh040vhQYw5VlT5PtGoiFuhhxPNxJedAo6IB1JwI4HtHPlHFEuPGo3",
            "787a93c7-7ceb-460d-a428-a1f98945efe7",
            "2020-02-28T15:38:38.000000Z",
            "2021-01-29T22:29:35.000000Z",
            5711,
            "external-transaction"
        )
                .budgetCapsAmount(826378708);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test2() throws ConnectionError, ProcessingError {
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new CreateCampaign(
            "BIPqdCDvWnTRvriMMqT8Y2wPxWWXEUoqg0zXsuvc8LF4mbP1hyPDbNVjct5yQNjVn35rDh040vhQYw5VlT5PtGoiFuhhxPNxJedAo6IB1JwI4HtHPlHFEuPGo3",
            "787a93c7-7ceb-460d-a428-a1f98945efe7",
            "2020-02-28T15:38:38.000000Z",
            "2021-01-29T22:29:35.000000Z",
            5711,
            "external-transaction"
        )
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(619822229);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test3() throws ConnectionError, ProcessingError {
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new CreateCampaign(
            "BIPqdCDvWnTRvriMMqT8Y2wPxWWXEUoqg0zXsuvc8LF4mbP1hyPDbNVjct5yQNjVn35rDh040vhQYw5VlT5PtGoiFuhhxPNxJedAo6IB1JwI4HtHPlHFEuPGo3",
            "787a93c7-7ceb-460d-a428-a1f98945efe7",
            "2020-02-28T15:38:38.000000Z",
            "2021-01-29T22:29:35.000000Z",
            5711,
            "external-transaction"
        )
                .destPrivateMoneyId("874b3279-0484-4c86-ba2f-13d129ee3dc0")
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(1933776541);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test4() throws ConnectionError, ProcessingError {
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new CreateCampaign(
            "BIPqdCDvWnTRvriMMqT8Y2wPxWWXEUoqg0zXsuvc8LF4mbP1hyPDbNVjct5yQNjVn35rDh040vhQYw5VlT5PtGoiFuhhxPNxJedAo6IB1JwI4HtHPlHFEuPGo3",
            "787a93c7-7ceb-460d-a428-a1f98945efe7",
            "2020-02-28T15:38:38.000000Z",
            "2021-01-29T22:29:35.000000Z",
            5711,
            "external-transaction"
        )
                .maxTotalPointAmount(449)
                .destPrivateMoneyId("7d082cbd-93e5-4654-b823-7e8a24141542")
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(1764941427);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test5() throws ConnectionError, ProcessingError {
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new CreateCampaign(
            "BIPqdCDvWnTRvriMMqT8Y2wPxWWXEUoqg0zXsuvc8LF4mbP1hyPDbNVjct5yQNjVn35rDh040vhQYw5VlT5PtGoiFuhhxPNxJedAo6IB1JwI4HtHPlHFEuPGo3",
            "787a93c7-7ceb-460d-a428-a1f98945efe7",
            "2020-02-28T15:38:38.000000Z",
            "2021-01-29T22:29:35.000000Z",
            5711,
            "external-transaction"
        )
                .maxPointAmount(6740)
                .maxTotalPointAmount(6373)
                .destPrivateMoneyId("c4793847-f9c2-4eff-b4db-68db0b40ce74")
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(1046979123);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test6() throws ConnectionError, ProcessingError {
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new CreateCampaign(
            "BIPqdCDvWnTRvriMMqT8Y2wPxWWXEUoqg0zXsuvc8LF4mbP1hyPDbNVjct5yQNjVn35rDh040vhQYw5VlT5PtGoiFuhhxPNxJedAo6IB1JwI4HtHPlHFEuPGo3",
            "787a93c7-7ceb-460d-a428-a1f98945efe7",
            "2020-02-28T15:38:38.000000Z",
            "2021-01-29T22:29:35.000000Z",
            5711,
            "external-transaction"
        )
                .existInEachProductGroups(false)
                .maxPointAmount(3313)
                .maxTotalPointAmount(1827)
                .destPrivateMoneyId("cc729950-54fb-4d0f-a18b-ab8113d363b3")
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(204619724);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test7() throws ConnectionError, ProcessingError {
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new CreateCampaign(
            "BIPqdCDvWnTRvriMMqT8Y2wPxWWXEUoqg0zXsuvc8LF4mbP1hyPDbNVjct5yQNjVn35rDh040vhQYw5VlT5PtGoiFuhhxPNxJedAo6IB1JwI4HtHPlHFEuPGo3",
            "787a93c7-7ceb-460d-a428-a1f98945efe7",
            "2020-02-28T15:38:38.000000Z",
            "2021-01-29T22:29:35.000000Z",
            5711,
            "external-transaction"
        )
                .minimumNumberForCombinationPurchase(7792)
                .existInEachProductGroups(true)
                .maxPointAmount(720)
                .maxTotalPointAmount(8923)
                .destPrivateMoneyId("300d0313-4c73-4d25-ad41-9627b85011b8")
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(1187813134);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test8() throws ConnectionError, ProcessingError {
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new CreateCampaign(
            "BIPqdCDvWnTRvriMMqT8Y2wPxWWXEUoqg0zXsuvc8LF4mbP1hyPDbNVjct5yQNjVn35rDh040vhQYw5VlT5PtGoiFuhhxPNxJedAo6IB1JwI4HtHPlHFEuPGo3",
            "787a93c7-7ceb-460d-a428-a1f98945efe7",
            "2020-02-28T15:38:38.000000Z",
            "2021-01-29T22:29:35.000000Z",
            5711,
            "external-transaction"
        )
                .minimumNumberOfAmount(7580)
                .minimumNumberForCombinationPurchase(6246)
                .existInEachProductGroups(true)
                .maxPointAmount(3682)
                .maxTotalPointAmount(4593)
                .destPrivateMoneyId("aec63e50-12e2-4040-81e2-b9ebf071400f")
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(127213637);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test9() throws ConnectionError, ProcessingError {
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new CreateCampaign(
            "BIPqdCDvWnTRvriMMqT8Y2wPxWWXEUoqg0zXsuvc8LF4mbP1hyPDbNVjct5yQNjVn35rDh040vhQYw5VlT5PtGoiFuhhxPNxJedAo6IB1JwI4HtHPlHFEuPGo3",
            "787a93c7-7ceb-460d-a428-a1f98945efe7",
            "2020-02-28T15:38:38.000000Z",
            "2021-01-29T22:29:35.000000Z",
            5711,
            "external-transaction"
        )
                .minimumNumberOfProducts(5810)
                .minimumNumberOfAmount(666)
                .minimumNumberForCombinationPurchase(18)
                .existInEachProductGroups(true)
                .maxPointAmount(1706)
                .maxTotalPointAmount(208)
                .destPrivateMoneyId("9840cdab-d0c2-4c8d-a166-1013dd582994")
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(1283939849);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test10() throws ConnectionError, ProcessingError {
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new CreateCampaign(
            "BIPqdCDvWnTRvriMMqT8Y2wPxWWXEUoqg0zXsuvc8LF4mbP1hyPDbNVjct5yQNjVn35rDh040vhQYw5VlT5PtGoiFuhhxPNxJedAo6IB1JwI4HtHPlHFEuPGo3",
            "787a93c7-7ceb-460d-a428-a1f98945efe7",
            "2020-02-28T15:38:38.000000Z",
            "2021-01-29T22:29:35.000000Z",
            5711,
            "external-transaction"
        )
                .applicableShopIds(new String[]{"d89c76fa-454e-41d4-8291-5cbddb249f87","c6697a11-6b58-4349-967f-4d915b7302b1","e48ef5f7-443d-4283-9b18-b7ac761ce9c7","ed07dcfd-c909-4bf0-8ab1-390c81cf733b","af6135d2-1886-44ee-b355-4f08d319d194","404a7398-1c3d-4c09-a1b4-1416fe5dc4cb"})
                .minimumNumberOfProducts(3903)
                .minimumNumberOfAmount(9760)
                .minimumNumberForCombinationPurchase(7088)
                .existInEachProductGroups(false)
                .maxPointAmount(4034)
                .maxTotalPointAmount(6638)
                .destPrivateMoneyId("cb22f064-4ed6-4327-8918-3813bd641c2a")
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(1101544356);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test11() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new CreateCampaign(
            "BIPqdCDvWnTRvriMMqT8Y2wPxWWXEUoqg0zXsuvc8LF4mbP1hyPDbNVjct5yQNjVn35rDh040vhQYw5VlT5PtGoiFuhhxPNxJedAo6IB1JwI4HtHPlHFEuPGo3",
            "787a93c7-7ceb-460d-a428-a1f98945efe7",
            "2020-02-28T15:38:38.000000Z",
            "2021-01-29T22:29:35.000000Z",
            5711,
            "external-transaction"
        )
                .applicableTimeRanges(new Object[]{items,items2})
                .applicableShopIds(new String[]{"af1c4822-11a4-413f-9072-310d5945d355","930b0fbd-881e-47e9-8e12-d168522fcd4e"})
                .minimumNumberOfProducts(6707)
                .minimumNumberOfAmount(8423)
                .minimumNumberForCombinationPurchase(5760)
                .existInEachProductGroups(false)
                .maxPointAmount(1717)
                .maxTotalPointAmount(3772)
                .destPrivateMoneyId("6694a68b-b428-403c-b6b0-e536ec92f73d")
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(1994554518);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test12() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("from", "12:00");
        items7.addProperty("to", "23:59");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new CreateCampaign(
            "BIPqdCDvWnTRvriMMqT8Y2wPxWWXEUoqg0zXsuvc8LF4mbP1hyPDbNVjct5yQNjVn35rDh040vhQYw5VlT5PtGoiFuhhxPNxJedAo6IB1JwI4HtHPlHFEuPGo3",
            "787a93c7-7ceb-460d-a428-a1f98945efe7",
            "2020-02-28T15:38:38.000000Z",
            "2021-01-29T22:29:35.000000Z",
            5711,
            "external-transaction"
        )
                .applicableDaysOfWeek(new Integer[]{2,5,3,0,4,3,6,2})
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5,items6,items7})
                .applicableShopIds(new String[]{"03a49247-b289-4ebd-8cba-6a7166e3e4d1","9689cfe9-af82-482b-a3a3-ca9228274a71"})
                .minimumNumberOfProducts(8418)
                .minimumNumberOfAmount(3644)
                .minimumNumberForCombinationPurchase(5803)
                .existInEachProductGroups(false)
                .maxPointAmount(2483)
                .maxTotalPointAmount(4209)
                .destPrivateMoneyId("1da33c39-b581-44e9-8072-64d60b01a80e")
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(435207887);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test13() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("product_code", "4912345678904");
        items.addProperty("classification_code", "c123");
        JsonObject items2 = new JsonObject();
        items2.addProperty("product_code", "4912345678904");
        items2.addProperty("classification_code", "c123");
        JsonObject items3 = new JsonObject();
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("classification_code", "c123");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new CreateCampaign(
            "BIPqdCDvWnTRvriMMqT8Y2wPxWWXEUoqg0zXsuvc8LF4mbP1hyPDbNVjct5yQNjVn35rDh040vhQYw5VlT5PtGoiFuhhxPNxJedAo6IB1JwI4HtHPlHFEuPGo3",
            "787a93c7-7ceb-460d-a428-a1f98945efe7",
            "2020-02-28T15:38:38.000000Z",
            "2021-01-29T22:29:35.000000Z",
            5711,
            "external-transaction"
        )
                .blacklistedProductRules(new Object[]{items,items2,items3})
                .applicableDaysOfWeek(new Integer[]{3,2,1,0,5,5,5,4})
                .applicableTimeRanges(new Object[]{items4,items5,items6})
                .applicableShopIds(new String[]{"cbed6dde-5e8b-47c5-b905-9f70d15bd0e6","ac327f02-05a8-4b81-b2a5-14f30e19f29d","e22d4b9f-c162-4a05-be4d-3dfa40fa8a06","f70d1735-35f3-4a5c-a2c7-46b19e1cac0f","fbf0a4a6-f38e-4f80-8700-5e67590958ff","460f0ba1-9979-4272-8fb7-1a7d502d6f95","0d328b2c-4923-44ef-a1fc-6b9130675d92"})
                .minimumNumberOfProducts(4426)
                .minimumNumberOfAmount(1489)
                .minimumNumberForCombinationPurchase(2070)
                .existInEachProductGroups(true)
                .maxPointAmount(6059)
                .maxTotalPointAmount(840)
                .destPrivateMoneyId("39408316-624a-4437-8a47-0c42c6b1db7e")
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(413072068);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test14() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("product_code", "4912345678904");
        items.addProperty("is_multiply_by_count", true);
        items.addProperty("required_count", 2);
        JsonObject items2 = new JsonObject();
        items2.addProperty("product_code", "4912345678904");
        items2.addProperty("classification_code", "c123");
        JsonObject items3 = new JsonObject();
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("classification_code", "c123");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("from", "12:00");
        items7.addProperty("to", "23:59");
        JsonObject items8 = new JsonObject();
        items8.addProperty("from", "12:00");
        items8.addProperty("to", "23:59");
        JsonObject items9 = new JsonObject();
        items9.addProperty("from", "12:00");
        items9.addProperty("to", "23:59");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new CreateCampaign(
            "BIPqdCDvWnTRvriMMqT8Y2wPxWWXEUoqg0zXsuvc8LF4mbP1hyPDbNVjct5yQNjVn35rDh040vhQYw5VlT5PtGoiFuhhxPNxJedAo6IB1JwI4HtHPlHFEuPGo3",
            "787a93c7-7ceb-460d-a428-a1f98945efe7",
            "2020-02-28T15:38:38.000000Z",
            "2021-01-29T22:29:35.000000Z",
            5711,
            "external-transaction"
        )
                .productBasedPointRules(new Object[]{items})
                .blacklistedProductRules(new Object[]{items2,items3})
                .applicableDaysOfWeek(new Integer[]{1,5,4,2,5,0,4,6})
                .applicableTimeRanges(new Object[]{items4,items5,items6,items7,items8,items9})
                .applicableShopIds(new String[]{"08ae7609-c839-463e-b677-edbb9446e466","ef4f316d-778a-40d6-b2d7-22f266970e4b","99a0b664-64b8-4920-9ae3-9a6b5bb7156e","80e5d760-c7e4-4796-9750-6e6e386caa1c"})
                .minimumNumberOfProducts(6769)
                .minimumNumberOfAmount(8351)
                .minimumNumberForCombinationPurchase(32)
                .existInEachProductGroups(false)
                .maxPointAmount(2287)
                .maxTotalPointAmount(297)
                .destPrivateMoneyId("fdccb7a5-4c12-4f12-9b13-bb914f6d6ffc")
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(405791693);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test15() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("subject_more_than_or_equal", 1000);
        items.addProperty("subject_less_than", 5000);
        JsonObject items2 = new JsonObject();
        items2.addProperty("point_amount", 5);
        items2.addProperty("point_amount_unit", "percent");
        items2.addProperty("subject_more_than_or_equal", 1000);
        items2.addProperty("subject_less_than", 5000);
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("subject_more_than_or_equal", 1000);
        items3.addProperty("subject_less_than", 5000);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("subject_more_than_or_equal", 1000);
        items4.addProperty("subject_less_than", 5000);
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("subject_more_than_or_equal", 1000);
        items5.addProperty("subject_less_than", 5000);
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("is_multiply_by_count", true);
        items6.addProperty("required_count", 2);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("is_multiply_by_count", true);
        items7.addProperty("required_count", 2);
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("classification_code", "c123");
        JsonObject items11 = new JsonObject();
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("classification_code", "c123");
        JsonObject items12 = new JsonObject();
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("classification_code", "c123");
        JsonObject items13 = new JsonObject();
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("classification_code", "c123");
        JsonObject items14 = new JsonObject();
        items14.addProperty("from", "12:00");
        items14.addProperty("to", "23:59");
        JsonObject items15 = new JsonObject();
        items15.addProperty("from", "12:00");
        items15.addProperty("to", "23:59");
        JsonObject items16 = new JsonObject();
        items16.addProperty("from", "12:00");
        items16.addProperty("to", "23:59");
        JsonObject items17 = new JsonObject();
        items17.addProperty("from", "12:00");
        items17.addProperty("to", "23:59");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new CreateCampaign(
            "BIPqdCDvWnTRvriMMqT8Y2wPxWWXEUoqg0zXsuvc8LF4mbP1hyPDbNVjct5yQNjVn35rDh040vhQYw5VlT5PtGoiFuhhxPNxJedAo6IB1JwI4HtHPlHFEuPGo3",
            "787a93c7-7ceb-460d-a428-a1f98945efe7",
            "2020-02-28T15:38:38.000000Z",
            "2021-01-29T22:29:35.000000Z",
            5711,
            "external-transaction"
        )
                .amountBasedPointRules(new Object[]{items,items2,items3,items4,items5})
                .productBasedPointRules(new Object[]{items6,items7})
                .blacklistedProductRules(new Object[]{items8,items9,items10,items11,items12,items13})
                .applicableDaysOfWeek(new Integer[]{4,5,6})
                .applicableTimeRanges(new Object[]{items14,items15,items16,items17})
                .applicableShopIds(new String[]{"c127b51b-9170-4fcf-a862-b238afbab276"})
                .minimumNumberOfProducts(4131)
                .minimumNumberOfAmount(7296)
                .minimumNumberForCombinationPurchase(7888)
                .existInEachProductGroups(false)
                .maxPointAmount(7211)
                .maxTotalPointAmount(2765)
                .destPrivateMoneyId("46343905-42e5-487d-8361-b49b5355045f")
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(601600727);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test16() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("subject_more_than_or_equal", 1000);
        items.addProperty("subject_less_than", 5000);
        JsonObject items2 = new JsonObject();
        items2.addProperty("point_amount", 5);
        items2.addProperty("point_amount_unit", "percent");
        items2.addProperty("subject_more_than_or_equal", 1000);
        items2.addProperty("subject_less_than", 5000);
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("subject_more_than_or_equal", 1000);
        items3.addProperty("subject_less_than", 5000);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("subject_more_than_or_equal", 1000);
        items4.addProperty("subject_less_than", 5000);
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("subject_more_than_or_equal", 1000);
        items5.addProperty("subject_less_than", 5000);
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("subject_more_than_or_equal", 1000);
        items6.addProperty("subject_less_than", 5000);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("subject_more_than_or_equal", 1000);
        items7.addProperty("subject_less_than", 5000);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("subject_more_than_or_equal", 1000);
        items8.addProperty("subject_less_than", 5000);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("subject_more_than_or_equal", 1000);
        items9.addProperty("subject_less_than", 5000);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("is_multiply_by_count", true);
        items16.addProperty("required_count", 2);
        JsonObject items17 = new JsonObject();
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("classification_code", "c123");
        JsonObject items18 = new JsonObject();
        items18.addProperty("product_code", "4912345678904");
        items18.addProperty("classification_code", "c123");
        JsonObject items19 = new JsonObject();
        items19.addProperty("product_code", "4912345678904");
        items19.addProperty("classification_code", "c123");
        JsonObject items20 = new JsonObject();
        items20.addProperty("from", "12:00");
        items20.addProperty("to", "23:59");
        JsonObject items21 = new JsonObject();
        items21.addProperty("from", "12:00");
        items21.addProperty("to", "23:59");
        JsonObject items22 = new JsonObject();
        items22.addProperty("from", "12:00");
        items22.addProperty("to", "23:59");
        JsonObject items23 = new JsonObject();
        items23.addProperty("from", "12:00");
        items23.addProperty("to", "23:59");
        JsonObject items24 = new JsonObject();
        items24.addProperty("from", "12:00");
        items24.addProperty("to", "23:59");
        JsonObject items25 = new JsonObject();
        items25.addProperty("from", "12:00");
        items25.addProperty("to", "23:59");
        JsonObject items26 = new JsonObject();
        items26.addProperty("from", "12:00");
        items26.addProperty("to", "23:59");
        JsonObject items27 = new JsonObject();
        items27.addProperty("from", "12:00");
        items27.addProperty("to", "23:59");
        JsonObject items28 = new JsonObject();
        items28.addProperty("from", "12:00");
        items28.addProperty("to", "23:59");
        JsonObject items29 = new JsonObject();
        items29.addProperty("from", "12:00");
        items29.addProperty("to", "23:59");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new CreateCampaign(
            "BIPqdCDvWnTRvriMMqT8Y2wPxWWXEUoqg0zXsuvc8LF4mbP1hyPDbNVjct5yQNjVn35rDh040vhQYw5VlT5PtGoiFuhhxPNxJedAo6IB1JwI4HtHPlHFEuPGo3",
            "787a93c7-7ceb-460d-a428-a1f98945efe7",
            "2020-02-28T15:38:38.000000Z",
            "2021-01-29T22:29:35.000000Z",
            5711,
            "external-transaction"
        )
                .subject("all")
                .amountBasedPointRules(new Object[]{items,items2,items3,items4,items5,items6,items7,items8,items9})
                .productBasedPointRules(new Object[]{items10,items11,items12,items13,items14,items15,items16})
                .blacklistedProductRules(new Object[]{items17,items18,items19})
                .applicableDaysOfWeek(new Integer[]{1,3,3})
                .applicableTimeRanges(new Object[]{items20,items21,items22,items23,items24,items25,items26,items27,items28,items29})
                .applicableShopIds(new String[]{"7c85eb77-a868-495f-b0b9-d6045bb2c13e","b78bf37f-ce7d-433c-b627-a9aa6a0d51df","d8317293-b676-4508-9929-cd40c097e006"})
                .minimumNumberOfProducts(3930)
                .minimumNumberOfAmount(4844)
                .minimumNumberForCombinationPurchase(3303)
                .existInEachProductGroups(true)
                .maxPointAmount(2802)
                .maxTotalPointAmount(6850)
                .destPrivateMoneyId("c0850b72-6beb-4156-864f-57919bff2c2c")
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(949953665);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test17() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("subject_more_than_or_equal", 1000);
        items.addProperty("subject_less_than", 5000);
        JsonObject items2 = new JsonObject();
        items2.addProperty("point_amount", 5);
        items2.addProperty("point_amount_unit", "percent");
        items2.addProperty("subject_more_than_or_equal", 1000);
        items2.addProperty("subject_less_than", 5000);
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("subject_more_than_or_equal", 1000);
        items3.addProperty("subject_less_than", 5000);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("subject_more_than_or_equal", 1000);
        items4.addProperty("subject_less_than", 5000);
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("subject_more_than_or_equal", 1000);
        items5.addProperty("subject_less_than", 5000);
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("subject_more_than_or_equal", 1000);
        items6.addProperty("subject_less_than", 5000);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("subject_more_than_or_equal", 1000);
        items7.addProperty("subject_less_than", 5000);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("subject_more_than_or_equal", 1000);
        items8.addProperty("subject_less_than", 5000);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("subject_more_than_or_equal", 1000);
        items9.addProperty("subject_less_than", 5000);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("is_multiply_by_count", true);
        items16.addProperty("required_count", 2);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("is_multiply_by_count", true);
        items17.addProperty("required_count", 2);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("product_code", "4912345678904");
        items18.addProperty("is_multiply_by_count", true);
        items18.addProperty("required_count", 2);
        JsonObject items19 = new JsonObject();
        items19.addProperty("product_code", "4912345678904");
        items19.addProperty("classification_code", "c123");
        JsonObject items20 = new JsonObject();
        items20.addProperty("product_code", "4912345678904");
        items20.addProperty("classification_code", "c123");
        JsonObject items21 = new JsonObject();
        items21.addProperty("product_code", "4912345678904");
        items21.addProperty("classification_code", "c123");
        JsonObject items22 = new JsonObject();
        items22.addProperty("product_code", "4912345678904");
        items22.addProperty("classification_code", "c123");
        JsonObject items23 = new JsonObject();
        items23.addProperty("product_code", "4912345678904");
        items23.addProperty("classification_code", "c123");
        JsonObject items24 = new JsonObject();
        items24.addProperty("from", "12:00");
        items24.addProperty("to", "23:59");
        JsonObject items25 = new JsonObject();
        items25.addProperty("from", "12:00");
        items25.addProperty("to", "23:59");
        JsonObject items26 = new JsonObject();
        items26.addProperty("from", "12:00");
        items26.addProperty("to", "23:59");
        JsonObject items27 = new JsonObject();
        items27.addProperty("from", "12:00");
        items27.addProperty("to", "23:59");
        JsonObject items28 = new JsonObject();
        items28.addProperty("from", "12:00");
        items28.addProperty("to", "23:59");
        JsonObject items29 = new JsonObject();
        items29.addProperty("from", "12:00");
        items29.addProperty("to", "23:59");
        JsonObject items30 = new JsonObject();
        items30.addProperty("from", "12:00");
        items30.addProperty("to", "23:59");
        JsonObject items31 = new JsonObject();
        items31.addProperty("from", "12:00");
        items31.addProperty("to", "23:59");
        JsonObject items32 = new JsonObject();
        items32.addProperty("from", "12:00");
        items32.addProperty("to", "23:59");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new CreateCampaign(
            "BIPqdCDvWnTRvriMMqT8Y2wPxWWXEUoqg0zXsuvc8LF4mbP1hyPDbNVjct5yQNjVn35rDh040vhQYw5VlT5PtGoiFuhhxPNxJedAo6IB1JwI4HtHPlHFEuPGo3",
            "787a93c7-7ceb-460d-a428-a1f98945efe7",
            "2020-02-28T15:38:38.000000Z",
            "2021-01-29T22:29:35.000000Z",
            5711,
            "external-transaction"
        )
                .setExclusive(false)
                .subject("all")
                .amountBasedPointRules(new Object[]{items,items2,items3,items4,items5,items6,items7,items8,items9})
                .productBasedPointRules(new Object[]{items10,items11,items12,items13,items14,items15,items16,items17,items18})
                .blacklistedProductRules(new Object[]{items19,items20,items21,items22,items23})
                .applicableDaysOfWeek(new Integer[]{6,1,1,0,4,2,1,2,5})
                .applicableTimeRanges(new Object[]{items24,items25,items26,items27,items28,items29,items30,items31,items32})
                .applicableShopIds(new String[]{"1bd8f4b6-a1de-454b-a056-004689f84ee2"})
                .minimumNumberOfProducts(3230)
                .minimumNumberOfAmount(7451)
                .minimumNumberForCombinationPurchase(4554)
                .existInEachProductGroups(true)
                .maxPointAmount(7742)
                .maxTotalPointAmount(9479)
                .destPrivateMoneyId("11e29df1-b359-4fe7-826c-6a1b02142139")
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(1048575674);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test18() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("subject_more_than_or_equal", 1000);
        items.addProperty("subject_less_than", 5000);
        JsonObject items2 = new JsonObject();
        items2.addProperty("point_amount", 5);
        items2.addProperty("point_amount_unit", "percent");
        items2.addProperty("subject_more_than_or_equal", 1000);
        items2.addProperty("subject_less_than", 5000);
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("subject_more_than_or_equal", 1000);
        items3.addProperty("subject_less_than", 5000);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("subject_more_than_or_equal", 1000);
        items4.addProperty("subject_less_than", 5000);
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("is_multiply_by_count", true);
        items5.addProperty("required_count", 2);
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("is_multiply_by_count", true);
        items6.addProperty("required_count", 2);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("is_multiply_by_count", true);
        items7.addProperty("required_count", 2);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("is_multiply_by_count", true);
        items8.addProperty("required_count", 2);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("is_multiply_by_count", true);
        items9.addProperty("required_count", 2);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("classification_code", "c123");
        JsonObject items16 = new JsonObject();
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("classification_code", "c123");
        JsonObject items17 = new JsonObject();
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("classification_code", "c123");
        JsonObject items18 = new JsonObject();
        items18.addProperty("product_code", "4912345678904");
        items18.addProperty("classification_code", "c123");
        JsonObject items19 = new JsonObject();
        items19.addProperty("product_code", "4912345678904");
        items19.addProperty("classification_code", "c123");
        JsonObject items20 = new JsonObject();
        items20.addProperty("product_code", "4912345678904");
        items20.addProperty("classification_code", "c123");
        JsonObject items21 = new JsonObject();
        items21.addProperty("product_code", "4912345678904");
        items21.addProperty("classification_code", "c123");
        JsonObject items22 = new JsonObject();
        items22.addProperty("product_code", "4912345678904");
        items22.addProperty("classification_code", "c123");
        JsonObject items23 = new JsonObject();
        items23.addProperty("product_code", "4912345678904");
        items23.addProperty("classification_code", "c123");
        JsonObject items24 = new JsonObject();
        items24.addProperty("product_code", "4912345678904");
        items24.addProperty("classification_code", "c123");
        JsonObject items25 = new JsonObject();
        items25.addProperty("from", "12:00");
        items25.addProperty("to", "23:59");
        JsonObject items26 = new JsonObject();
        items26.addProperty("from", "12:00");
        items26.addProperty("to", "23:59");
        JsonObject items27 = new JsonObject();
        items27.addProperty("from", "12:00");
        items27.addProperty("to", "23:59");
        JsonObject items28 = new JsonObject();
        items28.addProperty("from", "12:00");
        items28.addProperty("to", "23:59");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new CreateCampaign(
            "BIPqdCDvWnTRvriMMqT8Y2wPxWWXEUoqg0zXsuvc8LF4mbP1hyPDbNVjct5yQNjVn35rDh040vhQYw5VlT5PtGoiFuhhxPNxJedAo6IB1JwI4HtHPlHFEuPGo3",
            "787a93c7-7ceb-460d-a428-a1f98945efe7",
            "2020-02-28T15:38:38.000000Z",
            "2021-01-29T22:29:35.000000Z",
            5711,
            "external-transaction"
        )
                .pointExpiresInDays(9721)
                .setExclusive(false)
                .subject("money")
                .amountBasedPointRules(new Object[]{items,items2,items3,items4})
                .productBasedPointRules(new Object[]{items5,items6,items7,items8,items9,items10,items11,items12,items13,items14})
                .blacklistedProductRules(new Object[]{items15,items16,items17,items18,items19,items20,items21,items22,items23,items24})
                .applicableDaysOfWeek(new Integer[]{5,0,6,6,3,2,6,4})
                .applicableTimeRanges(new Object[]{items25,items26,items27,items28})
                .applicableShopIds(new String[]{"af29f425-4c7e-47c8-b716-1d8be8f18f6c","ce4285ea-7620-4829-8c71-28076bf5b6c5","f08aaf64-c470-44ba-87aa-fd2a00b03b71","5ec7a743-2297-42e3-902c-5ccfdaf98fbd"})
                .minimumNumberOfProducts(6)
                .minimumNumberOfAmount(3953)
                .minimumNumberForCombinationPurchase(7000)
                .existInEachProductGroups(true)
                .maxPointAmount(8742)
                .maxTotalPointAmount(619)
                .destPrivateMoneyId("cfc5f52c-d12f-4f69-b602-fcaaac59caa9")
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(818977520);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test19() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("subject_more_than_or_equal", 1000);
        items.addProperty("subject_less_than", 5000);
        JsonObject items2 = new JsonObject();
        items2.addProperty("point_amount", 5);
        items2.addProperty("point_amount_unit", "percent");
        items2.addProperty("subject_more_than_or_equal", 1000);
        items2.addProperty("subject_less_than", 5000);
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("subject_more_than_or_equal", 1000);
        items3.addProperty("subject_less_than", 5000);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("subject_more_than_or_equal", 1000);
        items4.addProperty("subject_less_than", 5000);
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("subject_more_than_or_equal", 1000);
        items5.addProperty("subject_less_than", 5000);
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("subject_more_than_or_equal", 1000);
        items6.addProperty("subject_less_than", 5000);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("subject_more_than_or_equal", 1000);
        items7.addProperty("subject_less_than", 5000);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("subject_more_than_or_equal", 1000);
        items8.addProperty("subject_less_than", 5000);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("is_multiply_by_count", true);
        items9.addProperty("required_count", 2);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("is_multiply_by_count", true);
        items16.addProperty("required_count", 2);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("is_multiply_by_count", true);
        items17.addProperty("required_count", 2);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("product_code", "4912345678904");
        items18.addProperty("is_multiply_by_count", true);
        items18.addProperty("required_count", 2);
        JsonObject items19 = new JsonObject();
        items19.addProperty("product_code", "4912345678904");
        items19.addProperty("classification_code", "c123");
        JsonObject items20 = new JsonObject();
        items20.addProperty("product_code", "4912345678904");
        items20.addProperty("classification_code", "c123");
        JsonObject items21 = new JsonObject();
        items21.addProperty("product_code", "4912345678904");
        items21.addProperty("classification_code", "c123");
        JsonObject items22 = new JsonObject();
        items22.addProperty("product_code", "4912345678904");
        items22.addProperty("classification_code", "c123");
        JsonObject items23 = new JsonObject();
        items23.addProperty("from", "12:00");
        items23.addProperty("to", "23:59");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new CreateCampaign(
            "BIPqdCDvWnTRvriMMqT8Y2wPxWWXEUoqg0zXsuvc8LF4mbP1hyPDbNVjct5yQNjVn35rDh040vhQYw5VlT5PtGoiFuhhxPNxJedAo6IB1JwI4HtHPlHFEuPGo3",
            "787a93c7-7ceb-460d-a428-a1f98945efe7",
            "2020-02-28T15:38:38.000000Z",
            "2021-01-29T22:29:35.000000Z",
            5711,
            "external-transaction"
        )
                .pointExpiresAt("2022-01-04T18:02:55.000000Z")
                .pointExpiresInDays(5615)
                .setExclusive(false)
                .subject("all")
                .amountBasedPointRules(new Object[]{items,items2,items3,items4,items5,items6,items7,items8})
                .productBasedPointRules(new Object[]{items9,items10,items11,items12,items13,items14,items15,items16,items17,items18})
                .blacklistedProductRules(new Object[]{items19,items20,items21,items22})
                .applicableDaysOfWeek(new Integer[]{6,4,5,4,5,6,4})
                .applicableTimeRanges(new Object[]{items23})
                .applicableShopIds(new String[]{"521515bb-9086-4a17-b67d-7aecabf86ce4","26b04c3b-bab3-403c-8965-1eca8f7c7517","e35c7111-77f9-4de8-bf2d-6412bb8900af","73bfd454-da7d-426c-9222-9167c61c77a3","65018b54-aad4-4fdd-a2bd-c5329d539fba","7fa3464e-d15e-4178-9369-24f0ad5c1868","aa30e614-77da-46a4-921c-28ec383fbccc","9519c782-5f2f-45dc-9910-576fad00152c","7e9ffe22-b0ab-4b06-8c22-3bfdf1b1243f","995a029b-d088-421d-aa4d-1514a8e73ded"})
                .minimumNumberOfProducts(4799)
                .minimumNumberOfAmount(3234)
                .minimumNumberForCombinationPurchase(6996)
                .existInEachProductGroups(false)
                .maxPointAmount(7422)
                .maxTotalPointAmount(3913)
                .destPrivateMoneyId("ec7e1215-88d1-4216-bf19-230d0eb4d484")
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(1686759322);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test20() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("subject_more_than_or_equal", 1000);
        items.addProperty("subject_less_than", 5000);
        JsonObject items2 = new JsonObject();
        items2.addProperty("point_amount", 5);
        items2.addProperty("point_amount_unit", "percent");
        items2.addProperty("subject_more_than_or_equal", 1000);
        items2.addProperty("subject_less_than", 5000);
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("subject_more_than_or_equal", 1000);
        items3.addProperty("subject_less_than", 5000);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("subject_more_than_or_equal", 1000);
        items4.addProperty("subject_less_than", 5000);
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("subject_more_than_or_equal", 1000);
        items5.addProperty("subject_less_than", 5000);
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("subject_more_than_or_equal", 1000);
        items6.addProperty("subject_less_than", 5000);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("subject_more_than_or_equal", 1000);
        items7.addProperty("subject_less_than", 5000);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("subject_more_than_or_equal", 1000);
        items8.addProperty("subject_less_than", 5000);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("subject_more_than_or_equal", 1000);
        items9.addProperty("subject_less_than", 5000);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("classification_code", "c123");
        JsonObject items15 = new JsonObject();
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("classification_code", "c123");
        JsonObject items16 = new JsonObject();
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("classification_code", "c123");
        JsonObject items17 = new JsonObject();
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("classification_code", "c123");
        JsonObject items18 = new JsonObject();
        items18.addProperty("product_code", "4912345678904");
        items18.addProperty("classification_code", "c123");
        JsonObject items19 = new JsonObject();
        items19.addProperty("product_code", "4912345678904");
        items19.addProperty("classification_code", "c123");
        JsonObject items20 = new JsonObject();
        items20.addProperty("from", "12:00");
        items20.addProperty("to", "23:59");
        JsonObject items21 = new JsonObject();
        items21.addProperty("from", "12:00");
        items21.addProperty("to", "23:59");
        JsonObject items22 = new JsonObject();
        items22.addProperty("from", "12:00");
        items22.addProperty("to", "23:59");
        JsonObject items23 = new JsonObject();
        items23.addProperty("from", "12:00");
        items23.addProperty("to", "23:59");
        JsonObject items24 = new JsonObject();
        items24.addProperty("from", "12:00");
        items24.addProperty("to", "23:59");
        JsonObject items25 = new JsonObject();
        items25.addProperty("from", "12:00");
        items25.addProperty("to", "23:59");
        JsonObject items26 = new JsonObject();
        items26.addProperty("from", "12:00");
        items26.addProperty("to", "23:59");
        JsonObject items27 = new JsonObject();
        items27.addProperty("from", "12:00");
        items27.addProperty("to", "23:59");
        JsonObject items28 = new JsonObject();
        items28.addProperty("from", "12:00");
        items28.addProperty("to", "23:59");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new CreateCampaign(
            "BIPqdCDvWnTRvriMMqT8Y2wPxWWXEUoqg0zXsuvc8LF4mbP1hyPDbNVjct5yQNjVn35rDh040vhQYw5VlT5PtGoiFuhhxPNxJedAo6IB1JwI4HtHPlHFEuPGo3",
            "787a93c7-7ceb-460d-a428-a1f98945efe7",
            "2020-02-28T15:38:38.000000Z",
            "2021-01-29T22:29:35.000000Z",
            5711,
            "external-transaction"
        )
                .status("enabled")
                .pointExpiresAt("2023-08-09T04:23:09.000000Z")
                .pointExpiresInDays(6024)
                .setExclusive(true)
                .subject("money")
                .amountBasedPointRules(new Object[]{items,items2,items3,items4,items5,items6,items7,items8,items9})
                .productBasedPointRules(new Object[]{items10,items11,items12,items13})
                .blacklistedProductRules(new Object[]{items14,items15,items16,items17,items18,items19})
                .applicableDaysOfWeek(new Integer[]{4,0,3,0,6})
                .applicableTimeRanges(new Object[]{items20,items21,items22,items23,items24,items25,items26,items27,items28})
                .applicableShopIds(new String[]{"5fccadec-02c0-4c76-8b60-de7852784c8d","2703a543-6b19-4ebf-b85e-4e10ba37690c","1985f651-840f-41aa-bb95-9194ab8c0140","21ac83ef-9e02-416a-88ce-aca9b2e8c3cb","e6e0277b-00ce-438f-8130-7bae71779ffa"})
                .minimumNumberOfProducts(9110)
                .minimumNumberOfAmount(1010)
                .minimumNumberForCombinationPurchase(3863)
                .existInEachProductGroups(false)
                .maxPointAmount(4164)
                .maxTotalPointAmount(1671)
                .destPrivateMoneyId("85ecf905-d23b-4c90-9274-9fc06bc89d13")
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(2086510520);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test21() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("subject_more_than_or_equal", 1000);
        items.addProperty("subject_less_than", 5000);
        JsonObject items2 = new JsonObject();
        items2.addProperty("point_amount", 5);
        items2.addProperty("point_amount_unit", "percent");
        items2.addProperty("subject_more_than_or_equal", 1000);
        items2.addProperty("subject_less_than", 5000);
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("subject_more_than_or_equal", 1000);
        items3.addProperty("subject_less_than", 5000);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("subject_more_than_or_equal", 1000);
        items4.addProperty("subject_less_than", 5000);
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("subject_more_than_or_equal", 1000);
        items5.addProperty("subject_less_than", 5000);
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("subject_more_than_or_equal", 1000);
        items6.addProperty("subject_less_than", 5000);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("subject_more_than_or_equal", 1000);
        items7.addProperty("subject_less_than", 5000);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("subject_more_than_or_equal", 1000);
        items8.addProperty("subject_less_than", 5000);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("is_multiply_by_count", true);
        items9.addProperty("required_count", 2);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("classification_code", "c123");
        JsonObject items17 = new JsonObject();
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("classification_code", "c123");
        JsonObject items18 = new JsonObject();
        items18.addProperty("product_code", "4912345678904");
        items18.addProperty("classification_code", "c123");
        JsonObject items19 = new JsonObject();
        items19.addProperty("product_code", "4912345678904");
        items19.addProperty("classification_code", "c123");
        JsonObject items20 = new JsonObject();
        items20.addProperty("product_code", "4912345678904");
        items20.addProperty("classification_code", "c123");
        JsonObject items21 = new JsonObject();
        items21.addProperty("product_code", "4912345678904");
        items21.addProperty("classification_code", "c123");
        JsonObject items22 = new JsonObject();
        items22.addProperty("product_code", "4912345678904");
        items22.addProperty("classification_code", "c123");
        JsonObject items23 = new JsonObject();
        items23.addProperty("from", "12:00");
        items23.addProperty("to", "23:59");
        JsonObject items24 = new JsonObject();
        items24.addProperty("from", "12:00");
        items24.addProperty("to", "23:59");
        JsonObject items25 = new JsonObject();
        items25.addProperty("from", "12:00");
        items25.addProperty("to", "23:59");
        JsonObject items26 = new JsonObject();
        items26.addProperty("from", "12:00");
        items26.addProperty("to", "23:59");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new CreateCampaign(
            "BIPqdCDvWnTRvriMMqT8Y2wPxWWXEUoqg0zXsuvc8LF4mbP1hyPDbNVjct5yQNjVn35rDh040vhQYw5VlT5PtGoiFuhhxPNxJedAo6IB1JwI4HtHPlHFEuPGo3",
            "787a93c7-7ceb-460d-a428-a1f98945efe7",
            "2020-02-28T15:38:38.000000Z",
            "2021-01-29T22:29:35.000000Z",
            5711,
            "external-transaction"
        )
                .description("PEIsHw9iaxaPzoaDv6U6SXLkHad9cOSRej1Twb2rvpiwJLSyhoqY6ZnwMWmZEdo3Ttk")
                .status("disabled")
                .pointExpiresAt("2023-07-08T21:45:49.000000Z")
                .pointExpiresInDays(7077)
                .setExclusive(true)
                .subject("money")
                .amountBasedPointRules(new Object[]{items,items2,items3,items4,items5,items6,items7,items8})
                .productBasedPointRules(new Object[]{items9,items10,items11,items12,items13,items14,items15})
                .blacklistedProductRules(new Object[]{items16,items17,items18,items19,items20,items21,items22})
                .applicableDaysOfWeek(new Integer[]{6,1,4,2,6,4,3,2,2,0})
                .applicableTimeRanges(new Object[]{items23,items24,items25,items26})
                .applicableShopIds(new String[]{"19760078-71e1-44d3-92f5-00aa990d70bb","74899646-7783-4423-a501-fe7667f81c87","b02d11e3-257c-47ea-b373-c02b8874d80c","77441aaf-bc1f-41af-95b2-3ad1672e8fee","cb77e988-6303-4e5e-b833-dee7beb678db","95ece3be-7ed7-4916-86c8-257f34d20737","78c9a768-24bc-46bd-8630-aaa689c4450f","6cee271f-ecd4-4902-8438-ce2742d3e903","2fa4d94e-c768-4c37-a5ef-3e1f8999785b","0c6c4b4f-c0a9-4810-97a8-c13a67601118"})
                .minimumNumberOfProducts(695)
                .minimumNumberOfAmount(3627)
                .minimumNumberForCombinationPurchase(5402)
                .existInEachProductGroups(false)
                .maxPointAmount(8829)
                .maxTotalPointAmount(4980)
                .destPrivateMoneyId("760504bc-ab2e-43ea-9dcf-838067b7f47b")
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(983324416);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test22() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("subject_more_than_or_equal", 1000);
        items.addProperty("subject_less_than", 5000);
        JsonObject items2 = new JsonObject();
        items2.addProperty("point_amount", 5);
        items2.addProperty("point_amount_unit", "percent");
        items2.addProperty("subject_more_than_or_equal", 1000);
        items2.addProperty("subject_less_than", 5000);
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("subject_more_than_or_equal", 1000);
        items3.addProperty("subject_less_than", 5000);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("subject_more_than_or_equal", 1000);
        items4.addProperty("subject_less_than", 5000);
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("subject_more_than_or_equal", 1000);
        items5.addProperty("subject_less_than", 5000);
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("subject_more_than_or_equal", 1000);
        items6.addProperty("subject_less_than", 5000);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("subject_more_than_or_equal", 1000);
        items7.addProperty("subject_less_than", 5000);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("subject_more_than_or_equal", 1000);
        items8.addProperty("subject_less_than", 5000);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("is_multiply_by_count", true);
        items9.addProperty("required_count", 2);
        JsonObject items10 = new JsonObject();
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("classification_code", "c123");
        JsonObject items11 = new JsonObject();
        items11.addProperty("from", "12:00");
        items11.addProperty("to", "23:59");
        JsonObject items12 = new JsonObject();
        items12.addProperty("from", "12:00");
        items12.addProperty("to", "23:59");
        JsonObject items13 = new JsonObject();
        items13.addProperty("from", "12:00");
        items13.addProperty("to", "23:59");
        JsonObject items14 = new JsonObject();
        items14.addProperty("from", "12:00");
        items14.addProperty("to", "23:59");
        JsonObject items15 = new JsonObject();
        items15.addProperty("from", "12:00");
        items15.addProperty("to", "23:59");
        JsonObject items16 = new JsonObject();
        items16.addProperty("from", "12:00");
        items16.addProperty("to", "23:59");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new CreateCampaign(
            "BIPqdCDvWnTRvriMMqT8Y2wPxWWXEUoqg0zXsuvc8LF4mbP1hyPDbNVjct5yQNjVn35rDh040vhQYw5VlT5PtGoiFuhhxPNxJedAo6IB1JwI4HtHPlHFEuPGo3",
            "787a93c7-7ceb-460d-a428-a1f98945efe7",
            "2020-02-28T15:38:38.000000Z",
            "2021-01-29T22:29:35.000000Z",
            5711,
            "external-transaction"
        )
                .bearPointShopId("11f10eef-2e78-4cb0-9206-8dd2ef518714")
                .description("gJ8qllmxnkMgshIHzbucfDhID3qemlo7JMNmGUe8Jtqof")
                .status("disabled")
                .pointExpiresAt("2020-03-23T11:05:38.000000Z")
                .pointExpiresInDays(5114)
                .setExclusive(true)
                .subject("all")
                .amountBasedPointRules(new Object[]{items,items2,items3,items4,items5,items6,items7,items8})
                .productBasedPointRules(new Object[]{items9})
                .blacklistedProductRules(new Object[]{items10})
                .applicableDaysOfWeek(new Integer[]{5,3,4,6,3,3})
                .applicableTimeRanges(new Object[]{items11,items12,items13,items14,items15,items16})
                .applicableShopIds(new String[]{"1485bae7-bc91-4b7e-9532-97d31ed5ecfc","0f960c70-0f8a-42c4-afe5-32c718d50ec0","8f4a6f72-b920-4379-8abb-2683f77d6349","fc204909-3519-4d1e-bd35-8d5d3d169acf","159ee39a-ee51-45d1-b925-4fc7dbd3f582","1365dc6f-fa85-4a9f-92e5-2926fd531d68"})
                .minimumNumberOfProducts(9233)
                .minimumNumberOfAmount(4834)
                .minimumNumberForCombinationPurchase(6942)
                .existInEachProductGroups(true)
                .maxPointAmount(2896)
                .maxTotalPointAmount(7167)
                .destPrivateMoneyId("8eac67b2-059c-451c-af01-3e21d210b388")
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(1835558922);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
}
