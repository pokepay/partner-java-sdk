// DO NOT EDIT: File is generated by code generator.
package jp.pokepay.partnerapi;

import jp.pokepay.partnerapi.request.CreateCampaign;
import jp.pokepay.partnerapi.request.Request;
import com.google.gson.JsonObject;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class CreateCampaignTest {
    @Test
    void test0() throws ConnectionError, ProcessingError {
        Request request = new CreateCampaign(
            "XjpoYOkLYbJM46YGKDJVQANtfU",
            "355c3a64-acc8-4fa8-9663-b0f3118a1e6f",
            "2021-03-25T02:22:53.000000+09:00",
            "2021-11-24T05:31:10.000000+09:00",
            1912,
            "payment"
        );
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test1() throws ConnectionError, ProcessingError {
        Request request = new CreateCampaign(
            "XjpoYOkLYbJM46YGKDJVQANtfU",
            "355c3a64-acc8-4fa8-9663-b0f3118a1e6f",
            "2021-03-25T02:22:53.000000+09:00",
            "2021-11-24T05:31:10.000000+09:00",
            1912,
            "payment"
        )
                .destPrivateMoneyId("de6731b9-ba12-40c3-a6c8-981305bcf564");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test2() throws ConnectionError, ProcessingError {
        Request request = new CreateCampaign(
            "XjpoYOkLYbJM46YGKDJVQANtfU",
            "355c3a64-acc8-4fa8-9663-b0f3118a1e6f",
            "2021-03-25T02:22:53.000000+09:00",
            "2021-11-24T05:31:10.000000+09:00",
            1912,
            "payment"
        )
                .minimumNumberForCombinationPurchase(4955)
                .destPrivateMoneyId("c6cbf95f-1747-46bd-ab45-ed17f93abace");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test3() throws ConnectionError, ProcessingError {
        Request request = new CreateCampaign(
            "XjpoYOkLYbJM46YGKDJVQANtfU",
            "355c3a64-acc8-4fa8-9663-b0f3118a1e6f",
            "2021-03-25T02:22:53.000000+09:00",
            "2021-11-24T05:31:10.000000+09:00",
            1912,
            "payment"
        )
                .applicableShopIds(new String[]{"6107883f-9012-4fc4-81d3-35eb718836a4","b776e952-f479-4466-9799-9b60f974f14b","033eae41-2378-406a-8c24-46fc52cf11d1","b5934c88-afd7-43ea-8e43-2842315ab0b8","0c506492-f39a-461f-80ee-22c688b2e63f","3f574c2f-d090-4c7c-a382-50f1c5915912","622c28ed-d045-4886-a698-564eda5c0c05","37f0b966-7ec4-486f-bb95-5cbf014cddf2","1bef7931-a6fa-45ac-a721-c0f74887ae3f"})
                .minimumNumberForCombinationPurchase(6043)
                .destPrivateMoneyId("668091c6-9439-4d78-b378-f58238ef7122");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test4() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("from", "12:00");
        items7.addProperty("to", "23:59");
        JsonObject items8 = new JsonObject();
        items8.addProperty("from", "12:00");
        items8.addProperty("to", "23:59");
        JsonObject items9 = new JsonObject();
        items9.addProperty("from", "12:00");
        items9.addProperty("to", "23:59");
        JsonObject items10 = new JsonObject();
        items10.addProperty("from", "12:00");
        items10.addProperty("to", "23:59");
        Request request = new CreateCampaign(
            "XjpoYOkLYbJM46YGKDJVQANtfU",
            "355c3a64-acc8-4fa8-9663-b0f3118a1e6f",
            "2021-03-25T02:22:53.000000+09:00",
            "2021-11-24T05:31:10.000000+09:00",
            1912,
            "payment"
        )
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5,items6,items7,items8,items9,items10})
                .applicableShopIds(new String[]{"9400bd73-1d20-4040-9235-40e2fdc61e4c","f4f36c4a-712b-4250-a812-7668e888b0c8","63b0f633-e4c6-4423-97c5-e19162e23fab","f542b19e-18c8-4e9b-9384-490842c437be","3ef913a7-4cfc-491d-bae2-fc2bb1f4c211","5474eec0-c566-4455-bb3a-8cb4f337e91a","be016263-e811-4cc4-b60e-97f3da461ded","715daac1-8ce5-49e0-a0f1-732b5fe1f6ee","eb62af67-e3db-4fe9-a6ea-ea4eab6b3e69","166b1398-e46b-452c-b144-d57e1cca3fab"})
                .minimumNumberForCombinationPurchase(9632)
                .destPrivateMoneyId("3f6cef33-6a4f-4b90-aba1-2df529f04be4");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test5() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        Request request = new CreateCampaign(
            "XjpoYOkLYbJM46YGKDJVQANtfU",
            "355c3a64-acc8-4fa8-9663-b0f3118a1e6f",
            "2021-03-25T02:22:53.000000+09:00",
            "2021-11-24T05:31:10.000000+09:00",
            1912,
            "payment"
        )
                .applicableDaysOfWeek(new Integer[]{0,0,5})
                .applicableTimeRanges(new Object[]{items,items2,items3,items4})
                .applicableShopIds(new String[]{"82633b59-d0e8-4e2f-8ef7-7446a7bdf8d7","c2628355-1841-45cb-8f3c-f0ee2f5845d7","f670a0ec-b0e8-49ee-8cfc-1ce1a0a044a9","5c482a30-01ec-4911-9e59-3703918782ce"})
                .minimumNumberForCombinationPurchase(5518)
                .destPrivateMoneyId("32061151-f11f-480d-bce2-ddc54309f87d");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test6() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("product_code", "4912345678904");
        items.addProperty("is_multiply_by_count", true);
        items.addProperty("required_count", 2);
        JsonObject items2 = new JsonObject();
        items2.addProperty("point_amount", 5);
        items2.addProperty("point_amount_unit", "percent");
        items2.addProperty("product_code", "4912345678904");
        items2.addProperty("is_multiply_by_count", true);
        items2.addProperty("required_count", 2);
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        Request request = new CreateCampaign(
            "XjpoYOkLYbJM46YGKDJVQANtfU",
            "355c3a64-acc8-4fa8-9663-b0f3118a1e6f",
            "2021-03-25T02:22:53.000000+09:00",
            "2021-11-24T05:31:10.000000+09:00",
            1912,
            "payment"
        )
                .productBasedPointRules(new Object[]{items,items2})
                .applicableDaysOfWeek(new Integer[]{3,0,5,6,3,1,4})
                .applicableTimeRanges(new Object[]{items3,items4})
                .applicableShopIds(new String[]{"79717c39-c511-4680-8e3a-e9477cc25c35","2b09a25d-1b61-4bc5-9b2a-dd33bd04f271","fc8dcc34-a8a4-47e7-94ce-213913029686","e1c79326-2633-4023-a748-32cacb75dca2","f0654427-e741-40aa-bc3b-bf31e5ede99a","0b3b8099-3dc6-422c-a6ab-be063fd4446e","b3fd0b21-3582-452b-a558-901f38a834fe","eefa4c86-9ed9-45d2-968d-20a2e96d2bb1","65148f46-26a5-4bc2-b539-7bdbaaf636d6"})
                .minimumNumberForCombinationPurchase(1522)
                .destPrivateMoneyId("139192f7-56ed-4bcb-85b2-acdbf238309e");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test7() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("subject_more_than_or_equal", 1000);
        items.addProperty("subject_less_than", 5000);
        JsonObject items2 = new JsonObject();
        items2.addProperty("point_amount", 5);
        items2.addProperty("point_amount_unit", "percent");
        items2.addProperty("subject_more_than_or_equal", 1000);
        items2.addProperty("subject_less_than", 5000);
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("subject_more_than_or_equal", 1000);
        items3.addProperty("subject_less_than", 5000);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("subject_more_than_or_equal", 1000);
        items4.addProperty("subject_less_than", 5000);
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("subject_more_than_or_equal", 1000);
        items5.addProperty("subject_less_than", 5000);
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("subject_more_than_or_equal", 1000);
        items6.addProperty("subject_less_than", 5000);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("subject_more_than_or_equal", 1000);
        items7.addProperty("subject_less_than", 5000);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("subject_more_than_or_equal", 1000);
        items8.addProperty("subject_less_than", 5000);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("is_multiply_by_count", true);
        items9.addProperty("required_count", 2);
        JsonObject items10 = new JsonObject();
        items10.addProperty("from", "12:00");
        items10.addProperty("to", "23:59");
        JsonObject items11 = new JsonObject();
        items11.addProperty("from", "12:00");
        items11.addProperty("to", "23:59");
        JsonObject items12 = new JsonObject();
        items12.addProperty("from", "12:00");
        items12.addProperty("to", "23:59");
        JsonObject items13 = new JsonObject();
        items13.addProperty("from", "12:00");
        items13.addProperty("to", "23:59");
        JsonObject items14 = new JsonObject();
        items14.addProperty("from", "12:00");
        items14.addProperty("to", "23:59");
        JsonObject items15 = new JsonObject();
        items15.addProperty("from", "12:00");
        items15.addProperty("to", "23:59");
        JsonObject items16 = new JsonObject();
        items16.addProperty("from", "12:00");
        items16.addProperty("to", "23:59");
        Request request = new CreateCampaign(
            "XjpoYOkLYbJM46YGKDJVQANtfU",
            "355c3a64-acc8-4fa8-9663-b0f3118a1e6f",
            "2021-03-25T02:22:53.000000+09:00",
            "2021-11-24T05:31:10.000000+09:00",
            1912,
            "payment"
        )
                .amountBasedPointRules(new Object[]{items,items2,items3,items4,items5,items6,items7,items8})
                .productBasedPointRules(new Object[]{items9})
                .applicableDaysOfWeek(new Integer[]{5})
                .applicableTimeRanges(new Object[]{items10,items11,items12,items13,items14,items15,items16})
                .applicableShopIds(new String[]{"a51afa27-6a2b-44c5-aaeb-ace1bb9d51c9","2d0bda7f-4a90-4127-ab1c-8b128a59d0b3","309c04ce-2966-4b33-b0b4-df9f20184f1f","db579a17-d6c1-4265-926f-e64de56b97df","f9b445c2-bca1-447f-aefe-8e19ace97f87","53c62859-198b-4152-a6a5-000da50287f2","1cf9de08-a196-49e0-bec3-dfa3926cd934"})
                .minimumNumberForCombinationPurchase(4441)
                .destPrivateMoneyId("c4b26b74-204b-4251-941b-66b05e033f40");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test8() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("subject_more_than_or_equal", 1000);
        items.addProperty("subject_less_than", 5000);
        JsonObject items2 = new JsonObject();
        items2.addProperty("point_amount", 5);
        items2.addProperty("point_amount_unit", "percent");
        items2.addProperty("subject_more_than_or_equal", 1000);
        items2.addProperty("subject_less_than", 5000);
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("subject_more_than_or_equal", 1000);
        items3.addProperty("subject_less_than", 5000);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("subject_more_than_or_equal", 1000);
        items4.addProperty("subject_less_than", 5000);
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("subject_more_than_or_equal", 1000);
        items5.addProperty("subject_less_than", 5000);
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("subject_more_than_or_equal", 1000);
        items6.addProperty("subject_less_than", 5000);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("subject_more_than_or_equal", 1000);
        items7.addProperty("subject_less_than", 5000);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("is_multiply_by_count", true);
        items8.addProperty("required_count", 2);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("is_multiply_by_count", true);
        items9.addProperty("required_count", 2);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("is_multiply_by_count", true);
        items16.addProperty("required_count", 2);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("is_multiply_by_count", true);
        items17.addProperty("required_count", 2);
        JsonObject items18 = new JsonObject();
        items18.addProperty("from", "12:00");
        items18.addProperty("to", "23:59");
        JsonObject items19 = new JsonObject();
        items19.addProperty("from", "12:00");
        items19.addProperty("to", "23:59");
        JsonObject items20 = new JsonObject();
        items20.addProperty("from", "12:00");
        items20.addProperty("to", "23:59");
        JsonObject items21 = new JsonObject();
        items21.addProperty("from", "12:00");
        items21.addProperty("to", "23:59");
        Request request = new CreateCampaign(
            "XjpoYOkLYbJM46YGKDJVQANtfU",
            "355c3a64-acc8-4fa8-9663-b0f3118a1e6f",
            "2021-03-25T02:22:53.000000+09:00",
            "2021-11-24T05:31:10.000000+09:00",
            1912,
            "payment"
        )
                .subject("all")
                .amountBasedPointRules(new Object[]{items,items2,items3,items4,items5,items6,items7})
                .productBasedPointRules(new Object[]{items8,items9,items10,items11,items12,items13,items14,items15,items16,items17})
                .applicableDaysOfWeek(new Integer[]{1})
                .applicableTimeRanges(new Object[]{items18,items19,items20,items21})
                .applicableShopIds(new String[]{"0f4cf328-71cf-46a8-9f2e-3ddd18812301","cfc5742e-21df-4250-9191-6ca8dd0d6adf","1ede0bf2-1d29-4b81-88bb-4b7431660132","ae82df74-2702-4972-afa7-f8369df0cddf","02b4209f-80b5-47d2-bacd-ae3c00e4c100","46361234-8f53-43d9-9979-c8d7848404d0"})
                .minimumNumberForCombinationPurchase(8018)
                .destPrivateMoneyId("14b223a4-54b4-4804-a2b5-e24506be7ef6");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test9() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("subject_more_than_or_equal", 1000);
        items.addProperty("subject_less_than", 5000);
        JsonObject items2 = new JsonObject();
        items2.addProperty("point_amount", 5);
        items2.addProperty("point_amount_unit", "percent");
        items2.addProperty("subject_more_than_or_equal", 1000);
        items2.addProperty("subject_less_than", 5000);
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("subject_more_than_or_equal", 1000);
        items3.addProperty("subject_less_than", 5000);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("subject_more_than_or_equal", 1000);
        items4.addProperty("subject_less_than", 5000);
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("subject_more_than_or_equal", 1000);
        items5.addProperty("subject_less_than", 5000);
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("subject_more_than_or_equal", 1000);
        items6.addProperty("subject_less_than", 5000);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("subject_more_than_or_equal", 1000);
        items7.addProperty("subject_less_than", 5000);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("subject_more_than_or_equal", 1000);
        items8.addProperty("subject_less_than", 5000);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("is_multiply_by_count", true);
        items9.addProperty("required_count", 2);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("from", "12:00");
        items16.addProperty("to", "23:59");
        JsonObject items17 = new JsonObject();
        items17.addProperty("from", "12:00");
        items17.addProperty("to", "23:59");
        JsonObject items18 = new JsonObject();
        items18.addProperty("from", "12:00");
        items18.addProperty("to", "23:59");
        JsonObject items19 = new JsonObject();
        items19.addProperty("from", "12:00");
        items19.addProperty("to", "23:59");
        JsonObject items20 = new JsonObject();
        items20.addProperty("from", "12:00");
        items20.addProperty("to", "23:59");
        JsonObject items21 = new JsonObject();
        items21.addProperty("from", "12:00");
        items21.addProperty("to", "23:59");
        Request request = new CreateCampaign(
            "XjpoYOkLYbJM46YGKDJVQANtfU",
            "355c3a64-acc8-4fa8-9663-b0f3118a1e6f",
            "2021-03-25T02:22:53.000000+09:00",
            "2021-11-24T05:31:10.000000+09:00",
            1912,
            "payment"
        )
                .setExclusive(true)
                .subject("money")
                .amountBasedPointRules(new Object[]{items,items2,items3,items4,items5,items6,items7,items8})
                .productBasedPointRules(new Object[]{items9,items10,items11,items12,items13,items14,items15})
                .applicableDaysOfWeek(new Integer[]{4,0,2,1,3,5})
                .applicableTimeRanges(new Object[]{items16,items17,items18,items19,items20,items21})
                .applicableShopIds(new String[]{"e84d6703-18d7-4170-a9f0-c0685582fed8","0c37b63b-3d71-4282-9ea4-80dc9fd36b4e","911ea167-cffa-4766-b5e0-175bdfada2a4","b5e66a96-1082-4058-aa46-295470e7b58e","2fe204d9-4b41-443d-88a7-fe4ae1e0ab64","ea1498de-68c6-41e5-8dc7-95da89985d90","ee754969-7f20-4fb1-8eca-ca1348585b49","9b61b9e1-f2db-4939-8e2f-ab2f103e5b2d","bf0a659b-3e40-4f54-9883-87729ef7486b"})
                .minimumNumberForCombinationPurchase(9062)
                .destPrivateMoneyId("6df5765d-1041-40ac-a660-480583036acb");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test10() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("subject_more_than_or_equal", 1000);
        items.addProperty("subject_less_than", 5000);
        JsonObject items2 = new JsonObject();
        items2.addProperty("point_amount", 5);
        items2.addProperty("point_amount_unit", "percent");
        items2.addProperty("subject_more_than_or_equal", 1000);
        items2.addProperty("subject_less_than", 5000);
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("subject_more_than_or_equal", 1000);
        items3.addProperty("subject_less_than", 5000);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("subject_more_than_or_equal", 1000);
        items4.addProperty("subject_less_than", 5000);
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("subject_more_than_or_equal", 1000);
        items5.addProperty("subject_less_than", 5000);
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("is_multiply_by_count", true);
        items6.addProperty("required_count", 2);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("is_multiply_by_count", true);
        items7.addProperty("required_count", 2);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("is_multiply_by_count", true);
        items8.addProperty("required_count", 2);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("is_multiply_by_count", true);
        items9.addProperty("required_count", 2);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("from", "12:00");
        items12.addProperty("to", "23:59");
        Request request = new CreateCampaign(
            "XjpoYOkLYbJM46YGKDJVQANtfU",
            "355c3a64-acc8-4fa8-9663-b0f3118a1e6f",
            "2021-03-25T02:22:53.000000+09:00",
            "2021-11-24T05:31:10.000000+09:00",
            1912,
            "payment"
        )
                .pointExpiresInDays(7065)
                .setExclusive(true)
                .subject("money")
                .amountBasedPointRules(new Object[]{items,items2,items3,items4,items5})
                .productBasedPointRules(new Object[]{items6,items7,items8,items9,items10,items11})
                .applicableDaysOfWeek(new Integer[]{5,2,4,3,3,6,5})
                .applicableTimeRanges(new Object[]{items12})
                .applicableShopIds(new String[]{"47f5b620-238f-4801-b1ce-be0d8bef45af"})
                .minimumNumberForCombinationPurchase(5656)
                .destPrivateMoneyId("924a619c-b04d-40f2-9d10-f0f732906334");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test11() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("subject_more_than_or_equal", 1000);
        items.addProperty("subject_less_than", 5000);
        JsonObject items2 = new JsonObject();
        items2.addProperty("point_amount", 5);
        items2.addProperty("point_amount_unit", "percent");
        items2.addProperty("subject_more_than_or_equal", 1000);
        items2.addProperty("subject_less_than", 5000);
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("is_multiply_by_count", true);
        items3.addProperty("required_count", 2);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("is_multiply_by_count", true);
        items4.addProperty("required_count", 2);
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("is_multiply_by_count", true);
        items5.addProperty("required_count", 2);
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("is_multiply_by_count", true);
        items6.addProperty("required_count", 2);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("is_multiply_by_count", true);
        items7.addProperty("required_count", 2);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("is_multiply_by_count", true);
        items8.addProperty("required_count", 2);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("is_multiply_by_count", true);
        items9.addProperty("required_count", 2);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("from", "12:00");
        items12.addProperty("to", "23:59");
        JsonObject items13 = new JsonObject();
        items13.addProperty("from", "12:00");
        items13.addProperty("to", "23:59");
        JsonObject items14 = new JsonObject();
        items14.addProperty("from", "12:00");
        items14.addProperty("to", "23:59");
        JsonObject items15 = new JsonObject();
        items15.addProperty("from", "12:00");
        items15.addProperty("to", "23:59");
        JsonObject items16 = new JsonObject();
        items16.addProperty("from", "12:00");
        items16.addProperty("to", "23:59");
        JsonObject items17 = new JsonObject();
        items17.addProperty("from", "12:00");
        items17.addProperty("to", "23:59");
        JsonObject items18 = new JsonObject();
        items18.addProperty("from", "12:00");
        items18.addProperty("to", "23:59");
        Request request = new CreateCampaign(
            "XjpoYOkLYbJM46YGKDJVQANtfU",
            "355c3a64-acc8-4fa8-9663-b0f3118a1e6f",
            "2021-03-25T02:22:53.000000+09:00",
            "2021-11-24T05:31:10.000000+09:00",
            1912,
            "payment"
        )
                .pointExpiresAt("2023-12-05T07:48:34.000000+09:00")
                .pointExpiresInDays(3042)
                .setExclusive(false)
                .subject("all")
                .amountBasedPointRules(new Object[]{items,items2})
                .productBasedPointRules(new Object[]{items3,items4,items5,items6,items7,items8,items9,items10,items11})
                .applicableDaysOfWeek(new Integer[]{6,1,2,0,6})
                .applicableTimeRanges(new Object[]{items12,items13,items14,items15,items16,items17,items18})
                .applicableShopIds(new String[]{"7dba1eec-8c0f-49c5-a902-302a17feb249","86b5bf14-5946-42cb-a335-4154d198837f","17bbcb1f-1cb7-4398-84e3-1d38d7cfac6f","38e6c94f-e7a9-40f3-b4b1-be7ee490e44d","a12c59bb-45cd-44dc-9a7f-6239e54c76df"})
                .minimumNumberForCombinationPurchase(1321)
                .destPrivateMoneyId("8f11ccd0-671c-4e28-ad89-06ea8ef06e81");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test12() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("subject_more_than_or_equal", 1000);
        items.addProperty("subject_less_than", 5000);
        JsonObject items2 = new JsonObject();
        items2.addProperty("point_amount", 5);
        items2.addProperty("point_amount_unit", "percent");
        items2.addProperty("subject_more_than_or_equal", 1000);
        items2.addProperty("subject_less_than", 5000);
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("subject_more_than_or_equal", 1000);
        items3.addProperty("subject_less_than", 5000);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("subject_more_than_or_equal", 1000);
        items4.addProperty("subject_less_than", 5000);
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("subject_more_than_or_equal", 1000);
        items5.addProperty("subject_less_than", 5000);
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("subject_more_than_or_equal", 1000);
        items6.addProperty("subject_less_than", 5000);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("subject_more_than_or_equal", 1000);
        items7.addProperty("subject_less_than", 5000);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("is_multiply_by_count", true);
        items8.addProperty("required_count", 2);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("is_multiply_by_count", true);
        items9.addProperty("required_count", 2);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("from", "12:00");
        items14.addProperty("to", "23:59");
        JsonObject items15 = new JsonObject();
        items15.addProperty("from", "12:00");
        items15.addProperty("to", "23:59");
        JsonObject items16 = new JsonObject();
        items16.addProperty("from", "12:00");
        items16.addProperty("to", "23:59");
        JsonObject items17 = new JsonObject();
        items17.addProperty("from", "12:00");
        items17.addProperty("to", "23:59");
        JsonObject items18 = new JsonObject();
        items18.addProperty("from", "12:00");
        items18.addProperty("to", "23:59");
        JsonObject items19 = new JsonObject();
        items19.addProperty("from", "12:00");
        items19.addProperty("to", "23:59");
        JsonObject items20 = new JsonObject();
        items20.addProperty("from", "12:00");
        items20.addProperty("to", "23:59");
        Request request = new CreateCampaign(
            "XjpoYOkLYbJM46YGKDJVQANtfU",
            "355c3a64-acc8-4fa8-9663-b0f3118a1e6f",
            "2021-03-25T02:22:53.000000+09:00",
            "2021-11-24T05:31:10.000000+09:00",
            1912,
            "payment"
        )
                .status("enabled")
                .pointExpiresAt("2016-03-12T21:23:16.000000+09:00")
                .pointExpiresInDays(1165)
                .setExclusive(false)
                .subject("all")
                .amountBasedPointRules(new Object[]{items,items2,items3,items4,items5,items6,items7})
                .productBasedPointRules(new Object[]{items8,items9,items10,items11,items12,items13})
                .applicableDaysOfWeek(new Integer[]{2,6,0,4,1})
                .applicableTimeRanges(new Object[]{items14,items15,items16,items17,items18,items19,items20})
                .applicableShopIds(new String[]{"2b760b40-0271-4aa2-8f35-df54a6203797","467d61f4-fe32-465d-bc75-98a2dfef33a3","c71f8fdf-f70a-4451-87cb-7e01e48ad341"})
                .minimumNumberForCombinationPurchase(8260)
                .destPrivateMoneyId("5efb7852-5ef1-4fc4-aefa-4a67c8f45b8f");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test13() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("subject_more_than_or_equal", 1000);
        items.addProperty("subject_less_than", 5000);
        JsonObject items2 = new JsonObject();
        items2.addProperty("point_amount", 5);
        items2.addProperty("point_amount_unit", "percent");
        items2.addProperty("subject_more_than_or_equal", 1000);
        items2.addProperty("subject_less_than", 5000);
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("subject_more_than_or_equal", 1000);
        items3.addProperty("subject_less_than", 5000);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("subject_more_than_or_equal", 1000);
        items4.addProperty("subject_less_than", 5000);
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("subject_more_than_or_equal", 1000);
        items5.addProperty("subject_less_than", 5000);
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("subject_more_than_or_equal", 1000);
        items6.addProperty("subject_less_than", 5000);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("is_multiply_by_count", true);
        items7.addProperty("required_count", 2);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("is_multiply_by_count", true);
        items8.addProperty("required_count", 2);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("is_multiply_by_count", true);
        items9.addProperty("required_count", 2);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("is_multiply_by_count", true);
        items16.addProperty("required_count", 2);
        Request request = new CreateCampaign(
            "XjpoYOkLYbJM46YGKDJVQANtfU",
            "355c3a64-acc8-4fa8-9663-b0f3118a1e6f",
            "2021-03-25T02:22:53.000000+09:00",
            "2021-11-24T05:31:10.000000+09:00",
            1912,
            "payment"
        )
                .description("ekX1v8dvD0ApeDNVXLZhDHmMPohPl8jvZE0kmWyBRnvtcRhoAfyfPvqbgkbgVyEBxJxS2dp5fON6g3h5b1QYmVCtk78Jxd")
                .status("disabled")
                .pointExpiresAt("2019-06-03T01:21:37.000000+09:00")
                .pointExpiresInDays(7172)
                .setExclusive(true)
                .subject("money")
                .amountBasedPointRules(new Object[]{items,items2,items3,items4,items5,items6})
                .productBasedPointRules(new Object[]{items7,items8,items9,items10,items11,items12,items13,items14,items15,items16})
                .applicableDaysOfWeek(new Integer[]{2,3,6,2,6,0,4,6,3,2})
                .applicableTimeRanges(new Object[]{})
                .applicableShopIds(new String[]{"d985aef2-4076-4403-be99-52fb7a2a5ed0"})
                .minimumNumberForCombinationPurchase(7087)
                .destPrivateMoneyId("30e93625-a406-463b-b6c0-66591bd6180d");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test14() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("subject_more_than_or_equal", 1000);
        items.addProperty("subject_less_than", 5000);
        JsonObject items2 = new JsonObject();
        items2.addProperty("point_amount", 5);
        items2.addProperty("point_amount_unit", "percent");
        items2.addProperty("product_code", "4912345678904");
        items2.addProperty("is_multiply_by_count", true);
        items2.addProperty("required_count", 2);
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("is_multiply_by_count", true);
        items3.addProperty("required_count", 2);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("is_multiply_by_count", true);
        items4.addProperty("required_count", 2);
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("is_multiply_by_count", true);
        items5.addProperty("required_count", 2);
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("from", "12:00");
        items7.addProperty("to", "23:59");
        JsonObject items8 = new JsonObject();
        items8.addProperty("from", "12:00");
        items8.addProperty("to", "23:59");
        JsonObject items9 = new JsonObject();
        items9.addProperty("from", "12:00");
        items9.addProperty("to", "23:59");
        JsonObject items10 = new JsonObject();
        items10.addProperty("from", "12:00");
        items10.addProperty("to", "23:59");
        JsonObject items11 = new JsonObject();
        items11.addProperty("from", "12:00");
        items11.addProperty("to", "23:59");
        JsonObject items12 = new JsonObject();
        items12.addProperty("from", "12:00");
        items12.addProperty("to", "23:59");
        JsonObject items13 = new JsonObject();
        items13.addProperty("from", "12:00");
        items13.addProperty("to", "23:59");
        Request request = new CreateCampaign(
            "XjpoYOkLYbJM46YGKDJVQANtfU",
            "355c3a64-acc8-4fa8-9663-b0f3118a1e6f",
            "2021-03-25T02:22:53.000000+09:00",
            "2021-11-24T05:31:10.000000+09:00",
            1912,
            "payment"
        )
                .bearPointShopId("cef03e05-b575-4339-8887-d026b750ad3d")
                .description("rBGsdWvnLspaw0X1BOuUcrgAIrlVAxUxxoJ3m2cOYFN3fJYwkLiuasNI3TQ4Ubb8U4LoGEUFzMVQ4l9WdfwN1GBXrbSDIYZlYLOis5sBRV50E243Lt7Q0CkQGlHLmFUomkHrvNClWFSWTgMn5wd60p6qorR")
                .status("enabled")
                .pointExpiresAt("2021-02-27T12:11:07.000000+09:00")
                .pointExpiresInDays(2490)
                .setExclusive(true)
                .subject("money")
                .amountBasedPointRules(new Object[]{items})
                .productBasedPointRules(new Object[]{items2,items3,items4,items5})
                .applicableDaysOfWeek(new Integer[]{})
                .applicableTimeRanges(new Object[]{items6,items7,items8,items9,items10,items11,items12,items13})
                .applicableShopIds(new String[]{"2f803094-ac6f-4098-a69c-a22b6fb99657"})
                .minimumNumberForCombinationPurchase(5506)
                .destPrivateMoneyId("367be2ed-53e6-469c-8540-5e9fd3437851");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
}
