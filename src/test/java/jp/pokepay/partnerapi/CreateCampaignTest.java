// DO NOT EDIT: File is generated by code generator.
package jp.pokepay.partnerapi;

import jp.pokepay.partnerapi.request.CreateCampaign;
import jp.pokepay.partnerapi.request.Request;
import com.google.gson.JsonObject;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class CreateCampaignTest {
    @Test
    void test0() throws ConnectionError, ProcessingError {
        Request request = new CreateCampaign(
            "V1KmKqNhpuD1AS4IxvpFPGaTF6gXtd3nJyyNe74Q2bvFtDoku",
            "1e1a0f25-bf2f-4164-8cfa-6994b790dfd0",
            "2021-02-25T21:26:31.000000Z",
            "2020-09-09T10:07:27.000000Z",
            6174,
            "topup"
        )
                .applicableShopIds(new String[]{"5907704a-6730-41fd-85b9-2c95e35a3a0b","c8b53f99-3b77-4329-a812-f1ec9b21671b","eb5011c6-da36-4d94-8ac3-c522c7fa359d"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test1() throws ConnectionError, ProcessingError {
        Request request = new CreateCampaign(
            "V1KmKqNhpuD1AS4IxvpFPGaTF6gXtd3nJyyNe74Q2bvFtDoku",
            "1e1a0f25-bf2f-4164-8cfa-6994b790dfd0",
            "2021-02-25T21:26:31.000000Z",
            "2020-09-09T10:07:27.000000Z",
            6174,
            "topup"
        )
                .applicableShopIds(new String[]{"b3a30f6c-d4cd-492b-8bc6-982efb72e8a1","b890bc48-c36b-4354-9c48-91c5dbb06afb","4c3d0960-e747-4caf-9229-07d7c082e4d5","63fb1142-6801-49d6-95da-71dbfd26a7e1","116eefb1-639b-4586-b2ed-0cfff5f6767c","67386841-db78-407a-9fdf-021a8b9d0146","65548214-e7d5-40c6-b682-eee9627cc068"})
                .bearPointShopId("3867ad2c-76f6-406c-8d5d-6d7db08283c9");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test2() throws ConnectionError, ProcessingError {
        Request request = new CreateCampaign(
            "V1KmKqNhpuD1AS4IxvpFPGaTF6gXtd3nJyyNe74Q2bvFtDoku",
            "1e1a0f25-bf2f-4164-8cfa-6994b790dfd0",
            "2021-02-25T21:26:31.000000Z",
            "2020-09-09T10:07:27.000000Z",
            6174,
            "topup"
        )
                .applicableShopIds(new String[]{"6d43b906-651e-4405-9adc-14ffb85786f5","7d7056af-db6f-4a4f-8510-ae6eead2b2a6","53e9445f-c6c0-4429-bf4b-32f250e98961","5559e2ce-139e-465d-aa05-463fff20333a","09cfde92-8621-432d-b02a-d011f0283e5e"})
                .description("sN9SjDxtxrgs7e0dkiAAa8jwX6FLCB1XlvzBazSCE1hEG2Ek")
                .bearPointShopId("a0a75deb-72dd-465e-8cd0-05325678ba0d");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test3() throws ConnectionError, ProcessingError {
        Request request = new CreateCampaign(
            "V1KmKqNhpuD1AS4IxvpFPGaTF6gXtd3nJyyNe74Q2bvFtDoku",
            "1e1a0f25-bf2f-4164-8cfa-6994b790dfd0",
            "2021-02-25T21:26:31.000000Z",
            "2020-09-09T10:07:27.000000Z",
            6174,
            "topup"
        )
                .applicableShopIds(new String[]{"69379425-1008-431d-8916-efd02b10f1f9","e5afaa02-c73e-4b37-bb48-aa3e4c403e89","e8e8a085-2557-46b7-a4c5-9e5e3b7a5ae5","6f9d91a7-dd5c-4cb7-a8a9-70fe5c9856f3","d8dfba6b-43c2-48b9-badd-8e207b381308","95937bbc-621f-4d12-8229-9642fe742928","8c2074b1-389e-4d18-9983-fd4e371fac2f"})
                .status("disabled")
                .description("E0n87A30l6vspNWH9u8x4Yq2mxjIub5W9d4fa79SnOHSfjKkp3QkI11kPUOWIOCC9XRXSkWvgwMdC6YsQVBM615BSLRTB4phpjbt6QHeDKxXdEg3OxGlsZaVSpjoQ6ff")
                .bearPointShopId("4a270b59-c3c1-4b65-9fab-04807155db36");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test4() throws ConnectionError, ProcessingError {
        Request request = new CreateCampaign(
            "V1KmKqNhpuD1AS4IxvpFPGaTF6gXtd3nJyyNe74Q2bvFtDoku",
            "1e1a0f25-bf2f-4164-8cfa-6994b790dfd0",
            "2021-02-25T21:26:31.000000Z",
            "2020-09-09T10:07:27.000000Z",
            6174,
            "topup"
        )
                .applicableShopIds(new String[]{"bdd50904-966b-4dbb-b02e-d71a93ad6dd8","c180197c-193e-40e9-87c3-dc54710cab69","b7d97953-8a42-4c55-8965-0635d7705f2d","05d9b269-b4db-4a71-8906-a49a2389514d","53f24d4f-4f63-45ea-b9f1-0c05c3192ac2","6d51375f-a63b-4d4b-ac53-a446a89b11c7"})
                .pointExpiresAt("2022-03-04T07:27:56.000000Z")
                .status("enabled")
                .description("LuqDn2oMYRFh8cqnV2spFoKb7jYgx3gTJKy6dBb3ykYYVRZ4jdyfDGYQa0QPCC60HT399N8hkxoSQFYDUU0HuG332kYdREQC39nZBUv4F8J7UzyDYEv7bctcmIqdmvTV8RBzp0gixsK")
                .bearPointShopId("d12b845a-9510-43d7-af55-afabd0e15793");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test5() throws ConnectionError, ProcessingError {
        Request request = new CreateCampaign(
            "V1KmKqNhpuD1AS4IxvpFPGaTF6gXtd3nJyyNe74Q2bvFtDoku",
            "1e1a0f25-bf2f-4164-8cfa-6994b790dfd0",
            "2021-02-25T21:26:31.000000Z",
            "2020-09-09T10:07:27.000000Z",
            6174,
            "topup"
        )
                .applicableShopIds(new String[]{"5129d44f-0152-4a3a-8cb9-abffe94f0714","70b32f38-20a3-46ad-919f-1e3efd957d44","26219476-e939-405b-940e-5dd7316295b3","ed4fd8df-5c04-462f-b4ef-92979752f56e","ecab59f2-f216-4bf5-b5c4-883d7c71ac01","59bd5f2e-aef8-4e78-9b52-b7a78d10f78d"})
                .pointExpiresInDays(7576)
                .pointExpiresAt("2023-08-05T02:11:40.000000Z")
                .status("disabled")
                .description("kiR4daTST401zYU9O5bmxo5R8HDeIrg38UDixRQOsOxJyiut30")
                .bearPointShopId("3ca2b36f-445f-4388-9206-17a809bf05f3");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test6() throws ConnectionError, ProcessingError {
        Request request = new CreateCampaign(
            "V1KmKqNhpuD1AS4IxvpFPGaTF6gXtd3nJyyNe74Q2bvFtDoku",
            "1e1a0f25-bf2f-4164-8cfa-6994b790dfd0",
            "2021-02-25T21:26:31.000000Z",
            "2020-09-09T10:07:27.000000Z",
            6174,
            "topup"
        )
                .applicableShopIds(new String[]{"43680453-40cc-4a23-915f-0c6020782fe9","55769d26-45a8-4b34-8a46-9816f75d8514","962bb4c1-15d7-49de-aa76-2b9aad9963a3","74ffebce-382f-4f22-bf46-a56ce38ec102","33663cfd-21cd-4184-a947-c668bd55871b","9cc23acf-4c00-4637-8d6a-7f0aab4ad005","2e630fef-5e0d-489f-ae84-54a91762a046","d48528e9-d448-4b4c-a2f4-a44e19e6620d"})
                .setExclusive(false)
                .pointExpiresInDays(5594)
                .pointExpiresAt("2024-01-26T14:59:07.000000Z")
                .status("disabled")
                .description("7R5Sel4rqjqD6mB2gz0FIdNSbIrXOBo1I3rdkLB5vuUQlHHWHdfJKJGJOe4o3A7Ast7GZKKewMQbpvWdRIf0j2NcGpd9kTg7fbzWuGj28bjzoMkUfQZyG6ql9k")
                .bearPointShopId("0b3c2c76-0f49-417e-ba20-32e3dc79c4b3");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test7() throws ConnectionError, ProcessingError {
        Request request = new CreateCampaign(
            "V1KmKqNhpuD1AS4IxvpFPGaTF6gXtd3nJyyNe74Q2bvFtDoku",
            "1e1a0f25-bf2f-4164-8cfa-6994b790dfd0",
            "2021-02-25T21:26:31.000000Z",
            "2020-09-09T10:07:27.000000Z",
            6174,
            "topup"
        )
                .applicableShopIds(new String[]{"3233323b-118a-4ee7-9182-3088ea5e9515","7fcce72f-d066-4fd6-8363-2977f15ef4cb","98b99fc5-9715-453f-8f41-a26cfc981986","f6e8ee4d-a3d5-4e15-ac95-039478d88e5c","f1304959-93e2-416c-a37b-9ec1082471ee","8d94a54f-cf18-42ca-955d-e7ff46aaff20"})
                .subject("all")
                .setExclusive(true)
                .pointExpiresInDays(164)
                .pointExpiresAt("2021-01-10T21:46:04.000000Z")
                .status("disabled")
                .description("YgLUj2LWIHcZ5Kh7Upt9fM2ThdFR4ZGmC3lYSdkRdIHlBo7iMGslQeLzTg9FCP6boJkANEWZ0xko5rtXdkjCZ6KXkiMx1kHTVbpRx79qoFTViWGk7rsKgu")
                .bearPointShopId("7220fe40-9fb2-4469-a880-b8ef757ac34d");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test8() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("subject_more_than_or_equal", 1000);
        items.addProperty("subject_less_than", 5000);
        JsonObject items2 = new JsonObject();
        items2.addProperty("point_amount", 5);
        items2.addProperty("point_amount_unit", "percent");
        items2.addProperty("subject_more_than_or_equal", 1000);
        items2.addProperty("subject_less_than", 5000);
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("subject_more_than_or_equal", 1000);
        items3.addProperty("subject_less_than", 5000);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("subject_more_than_or_equal", 1000);
        items4.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "V1KmKqNhpuD1AS4IxvpFPGaTF6gXtd3nJyyNe74Q2bvFtDoku",
            "1e1a0f25-bf2f-4164-8cfa-6994b790dfd0",
            "2021-02-25T21:26:31.000000Z",
            "2020-09-09T10:07:27.000000Z",
            6174,
            "topup"
        )
                .applicableShopIds(new String[]{"658543a0-00f8-4428-84aa-155b0c94df73","cb1affe6-0055-47b3-9b80-3bd439bf55aa","efffde14-f5c3-488c-b1c1-25fc069e8f38","d0f43b66-a3d6-45b5-9c03-bfeef84419eb","b6b03683-907a-48f9-a107-5b4d85a6316f","b9a5f81c-8c36-412c-9048-23ce9bccc0ff","0f588a8b-1046-49ea-8e31-7cb64209664d","1e5171f4-e131-4a4e-9707-b9ceb4debd2e","287a9988-84de-45fc-a4fb-de86366f3ad4","165af330-8692-4f97-8c5b-070965140396"})
                .amountBasedPointRules(new Object[]{items,items2,items3,items4})
                .subject("money")
                .setExclusive(false)
                .pointExpiresInDays(8993)
                .pointExpiresAt("2022-11-29T18:34:52.000000Z")
                .status("disabled")
                .description("iaSmxOiabyCFBUZkKwMvzRhZdC9PIbxRIokrSMcAe6DLpfhwjho9qAj035em2B0e1zQxL4LWrE")
                .bearPointShopId("4e803ceb-cbd5-4ef2-8b5d-74d55fa15309");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test9() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("product_code", "4912345678904");
        items.addProperty("is_multiply_by_count", true);
        items.addProperty("required_count", 2);
        JsonObject items2 = new JsonObject();
        items2.addProperty("point_amount", 5);
        items2.addProperty("point_amount_unit", "percent");
        items2.addProperty("product_code", "4912345678904");
        items2.addProperty("is_multiply_by_count", true);
        items2.addProperty("required_count", 2);
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("is_multiply_by_count", true);
        items3.addProperty("required_count", 2);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("is_multiply_by_count", true);
        items4.addProperty("required_count", 2);
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("is_multiply_by_count", true);
        items5.addProperty("required_count", 2);
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("is_multiply_by_count", true);
        items6.addProperty("required_count", 2);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("is_multiply_by_count", true);
        items7.addProperty("required_count", 2);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("subject_more_than_or_equal", 1000);
        items8.addProperty("subject_less_than", 5000);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("subject_more_than_or_equal", 1000);
        items9.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "V1KmKqNhpuD1AS4IxvpFPGaTF6gXtd3nJyyNe74Q2bvFtDoku",
            "1e1a0f25-bf2f-4164-8cfa-6994b790dfd0",
            "2021-02-25T21:26:31.000000Z",
            "2020-09-09T10:07:27.000000Z",
            6174,
            "topup"
        )
                .applicableShopIds(new String[]{"61c54144-fcac-47d9-a461-ced5c04d01ff","e4eda0cd-4140-4dd3-b48a-3517c56906fb"})
                .productBasedPointRules(new Object[]{items,items2,items3,items4,items5,items6,items7})
                .amountBasedPointRules(new Object[]{items8,items9})
                .subject("all")
                .setExclusive(false)
                .pointExpiresInDays(2564)
                .pointExpiresAt("2022-03-27T05:22:02.000000Z")
                .status("enabled")
                .description("9RliuqOBINm")
                .bearPointShopId("1508f3b4-0651-4022-b737-9d5b2511702f");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test10() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("product_code", "4912345678904");
        items.addProperty("classification_code", "c123");
        JsonObject items2 = new JsonObject();
        items2.addProperty("product_code", "4912345678904");
        items2.addProperty("classification_code", "c123");
        JsonObject items3 = new JsonObject();
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("classification_code", "c123");
        JsonObject items4 = new JsonObject();
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("classification_code", "c123");
        JsonObject items5 = new JsonObject();
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("classification_code", "c123");
        JsonObject items6 = new JsonObject();
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("classification_code", "c123");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("is_multiply_by_count", true);
        items8.addProperty("required_count", 2);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("is_multiply_by_count", true);
        items9.addProperty("required_count", 2);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("subject_more_than_or_equal", 1000);
        items11.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "V1KmKqNhpuD1AS4IxvpFPGaTF6gXtd3nJyyNe74Q2bvFtDoku",
            "1e1a0f25-bf2f-4164-8cfa-6994b790dfd0",
            "2021-02-25T21:26:31.000000Z",
            "2020-09-09T10:07:27.000000Z",
            6174,
            "topup"
        )
                .applicableShopIds(new String[]{"167e148a-f60d-4028-b971-afe9e382d27b","ac0c702a-f3fa-4bab-8656-cfd1e7757485","c6ef7a6f-5b16-4007-a53e-d10e90a9d33a"})
                .blacklistedProductRules(new Object[]{items,items2,items3,items4,items5,items6,items7})
                .productBasedPointRules(new Object[]{items8,items9,items10})
                .amountBasedPointRules(new Object[]{items11})
                .subject("money")
                .setExclusive(true)
                .pointExpiresInDays(8894)
                .pointExpiresAt("2023-08-22T21:01:30.000000Z")
                .status("disabled")
                .description("QJiEELVlycfdA0sn1Jp9ctBvXrxjspmUg2Jofbfd8lI7ca3oyQQIsUl3rCM2ZMpE4WDor4IADTHdTPsjhUsWbuhnbIUFlfvobOclFXKfvdQivs")
                .bearPointShopId("c8946e96-32b3-417b-a8ea-37212adf9a9d");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test11() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("product_code", "4912345678904");
        items.addProperty("classification_code", "c123");
        JsonObject items2 = new JsonObject();
        items2.addProperty("product_code", "4912345678904");
        items2.addProperty("classification_code", "c123");
        JsonObject items3 = new JsonObject();
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("classification_code", "c123");
        JsonObject items4 = new JsonObject();
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("classification_code", "c123");
        JsonObject items5 = new JsonObject();
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("classification_code", "c123");
        JsonObject items6 = new JsonObject();
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("classification_code", "c123");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("subject_more_than_or_equal", 1000);
        items12.addProperty("subject_less_than", 5000);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("subject_more_than_or_equal", 1000);
        items13.addProperty("subject_less_than", 5000);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("subject_more_than_or_equal", 1000);
        items14.addProperty("subject_less_than", 5000);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("subject_more_than_or_equal", 1000);
        items15.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "V1KmKqNhpuD1AS4IxvpFPGaTF6gXtd3nJyyNe74Q2bvFtDoku",
            "1e1a0f25-bf2f-4164-8cfa-6994b790dfd0",
            "2021-02-25T21:26:31.000000Z",
            "2020-09-09T10:07:27.000000Z",
            6174,
            "topup"
        )
                .applicableShopIds(new String[]{"df4b4a1f-db22-4544-84b1-bb8c58080a56","4d0d7ea5-4f59-44fb-bd6e-a43a248cbbd4","8b92295d-8868-43c5-a08a-8a9dcf0d68d1","af0a78fe-43cf-4acc-b46c-e70a73af16eb","11dc2fde-2f3a-49dd-92d0-84c9e4243741"})
                .applicableDaysOfWeek(new Integer[]{5,1,6})
                .blacklistedProductRules(new Object[]{items,items2,items3,items4,items5,items6,items7,items8,items9})
                .productBasedPointRules(new Object[]{items10,items11})
                .amountBasedPointRules(new Object[]{items12,items13,items14,items15})
                .subject("all")
                .setExclusive(true)
                .pointExpiresInDays(4036)
                .pointExpiresAt("2023-12-04T19:40:33.000000Z")
                .status("enabled")
                .description("LwoSJ0t0xwzgZ3SAsjpAuPQwOMExC1w6ifl9ZUstqj")
                .bearPointShopId("21eae237-9903-486a-a8ca-6faf6cd35db1");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test12() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("product_code", "4912345678904");
        items2.addProperty("classification_code", "c123");
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("is_multiply_by_count", true);
        items3.addProperty("required_count", 2);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("is_multiply_by_count", true);
        items4.addProperty("required_count", 2);
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("is_multiply_by_count", true);
        items5.addProperty("required_count", 2);
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("is_multiply_by_count", true);
        items6.addProperty("required_count", 2);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("is_multiply_by_count", true);
        items7.addProperty("required_count", 2);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("subject_more_than_or_equal", 1000);
        items8.addProperty("subject_less_than", 5000);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("subject_more_than_or_equal", 1000);
        items9.addProperty("subject_less_than", 5000);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("subject_more_than_or_equal", 1000);
        items10.addProperty("subject_less_than", 5000);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("subject_more_than_or_equal", 1000);
        items11.addProperty("subject_less_than", 5000);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("subject_more_than_or_equal", 1000);
        items12.addProperty("subject_less_than", 5000);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("subject_more_than_or_equal", 1000);
        items13.addProperty("subject_less_than", 5000);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("subject_more_than_or_equal", 1000);
        items14.addProperty("subject_less_than", 5000);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("subject_more_than_or_equal", 1000);
        items15.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "V1KmKqNhpuD1AS4IxvpFPGaTF6gXtd3nJyyNe74Q2bvFtDoku",
            "1e1a0f25-bf2f-4164-8cfa-6994b790dfd0",
            "2021-02-25T21:26:31.000000Z",
            "2020-09-09T10:07:27.000000Z",
            6174,
            "topup"
        )
                .applicableShopIds(new String[]{"f4428aa8-2018-4961-bae4-5db03f8e3005","781c38c0-897f-4b4d-9730-d5d1c2553615","48608f45-8415-40b8-a287-a926e9dd5ff3","db65c1e9-c691-46b7-be57-fdeb56918886","839228f4-74fb-4eef-a16d-f65449b03e53","feec9c1f-6ca4-4949-88fd-b62dbf3cfcf3","d732deb3-9c00-4773-8673-f93d7a4b66f3","163a513a-d3b0-43e2-935a-f5b14948a6fc","5cb12b63-c3a0-47d2-8735-ba7295336d04"})
                .applicableTimeRanges(new Object[]{items})
                .applicableDaysOfWeek(new Integer[]{1,5,6,0,5})
                .blacklistedProductRules(new Object[]{items2})
                .productBasedPointRules(new Object[]{items3,items4,items5,items6,items7})
                .amountBasedPointRules(new Object[]{items8,items9,items10,items11,items12,items13,items14,items15})
                .subject("money")
                .setExclusive(false)
                .pointExpiresInDays(9667)
                .pointExpiresAt("2023-04-07T15:17:38.000000Z")
                .status("enabled")
                .description("t6R89vRehYIZbMh6MfShA8D4E")
                .bearPointShopId("e65a7cf6-32b7-400f-9a21-37cf67d8d1dc");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test13() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("from", "12:00");
        items7.addProperty("to", "23:59");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("classification_code", "c123");
        JsonObject items11 = new JsonObject();
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("classification_code", "c123");
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("is_multiply_by_count", true);
        items16.addProperty("required_count", 2);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("is_multiply_by_count", true);
        items17.addProperty("required_count", 2);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("product_code", "4912345678904");
        items18.addProperty("is_multiply_by_count", true);
        items18.addProperty("required_count", 2);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("product_code", "4912345678904");
        items19.addProperty("is_multiply_by_count", true);
        items19.addProperty("required_count", 2);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("product_code", "4912345678904");
        items20.addProperty("is_multiply_by_count", true);
        items20.addProperty("required_count", 2);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("subject_more_than_or_equal", 1000);
        items21.addProperty("subject_less_than", 5000);
        JsonObject items22 = new JsonObject();
        items22.addProperty("point_amount", 5);
        items22.addProperty("point_amount_unit", "percent");
        items22.addProperty("subject_more_than_or_equal", 1000);
        items22.addProperty("subject_less_than", 5000);
        JsonObject items23 = new JsonObject();
        items23.addProperty("point_amount", 5);
        items23.addProperty("point_amount_unit", "percent");
        items23.addProperty("subject_more_than_or_equal", 1000);
        items23.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "V1KmKqNhpuD1AS4IxvpFPGaTF6gXtd3nJyyNe74Q2bvFtDoku",
            "1e1a0f25-bf2f-4164-8cfa-6994b790dfd0",
            "2021-02-25T21:26:31.000000Z",
            "2020-09-09T10:07:27.000000Z",
            6174,
            "topup"
        )
                .applicableShopIds(new String[]{"a4dae680-9ebe-44d4-9447-0754dca30b37","bdbcb730-824c-432f-a1c0-ee90f544750a","b81e6151-0e5d-42b2-9465-4af064ebe511","a2a60878-7968-448e-93d8-cb94cc8faf76","bd351dae-bd08-4d13-a64a-51f24aa1cbdf","02be5ffe-2394-4b71-bf01-93186575231f","157f190c-f3a7-4ff7-bcc3-65aa5b0da585","4df2778b-cdf7-432b-badd-ef767f6b4f1f"})
                .minimumNumberOfProducts(8904)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5,items6,items7})
                .applicableDaysOfWeek(new Integer[]{5,4,1,4})
                .blacklistedProductRules(new Object[]{items8,items9,items10,items11})
                .productBasedPointRules(new Object[]{items12,items13,items14,items15,items16,items17,items18,items19,items20})
                .amountBasedPointRules(new Object[]{items21,items22,items23})
                .subject("all")
                .setExclusive(false)
                .pointExpiresInDays(2046)
                .pointExpiresAt("2022-03-14T05:45:03.000000Z")
                .status("enabled")
                .description("AdQSvr2jD2CPBEg6qDXhSH8hafJy0sDTnMPtA7T3E2nC8JZcqIcqZB2nkhw5Vunnh29qWQZz14xB891rPV7FcdDeB61vcOZ1uNBAdr6lfzbfqKlnsG40wZo0RT90mTv9imeNiY62Bc0n5yxxXvKDa0c2v5NvERR1ovUoSMxuwois43hKOt")
                .bearPointShopId("5d0cd008-0741-4bef-bf29-048dce507f58");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test14() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("from", "12:00");
        items7.addProperty("to", "23:59");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("classification_code", "c123");
        JsonObject items11 = new JsonObject();
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("classification_code", "c123");
        JsonObject items12 = new JsonObject();
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("classification_code", "c123");
        JsonObject items13 = new JsonObject();
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("classification_code", "c123");
        JsonObject items14 = new JsonObject();
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("classification_code", "c123");
        JsonObject items15 = new JsonObject();
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("classification_code", "c123");
        JsonObject items16 = new JsonObject();
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("classification_code", "c123");
        JsonObject items17 = new JsonObject();
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("classification_code", "c123");
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("product_code", "4912345678904");
        items18.addProperty("is_multiply_by_count", true);
        items18.addProperty("required_count", 2);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("product_code", "4912345678904");
        items19.addProperty("is_multiply_by_count", true);
        items19.addProperty("required_count", 2);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("product_code", "4912345678904");
        items20.addProperty("is_multiply_by_count", true);
        items20.addProperty("required_count", 2);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("product_code", "4912345678904");
        items21.addProperty("is_multiply_by_count", true);
        items21.addProperty("required_count", 2);
        JsonObject items22 = new JsonObject();
        items22.addProperty("point_amount", 5);
        items22.addProperty("point_amount_unit", "percent");
        items22.addProperty("product_code", "4912345678904");
        items22.addProperty("is_multiply_by_count", true);
        items22.addProperty("required_count", 2);
        JsonObject items23 = new JsonObject();
        items23.addProperty("point_amount", 5);
        items23.addProperty("point_amount_unit", "percent");
        items23.addProperty("product_code", "4912345678904");
        items23.addProperty("is_multiply_by_count", true);
        items23.addProperty("required_count", 2);
        JsonObject items24 = new JsonObject();
        items24.addProperty("point_amount", 5);
        items24.addProperty("point_amount_unit", "percent");
        items24.addProperty("product_code", "4912345678904");
        items24.addProperty("is_multiply_by_count", true);
        items24.addProperty("required_count", 2);
        JsonObject items25 = new JsonObject();
        items25.addProperty("point_amount", 5);
        items25.addProperty("point_amount_unit", "percent");
        items25.addProperty("product_code", "4912345678904");
        items25.addProperty("is_multiply_by_count", true);
        items25.addProperty("required_count", 2);
        JsonObject items26 = new JsonObject();
        items26.addProperty("point_amount", 5);
        items26.addProperty("point_amount_unit", "percent");
        items26.addProperty("product_code", "4912345678904");
        items26.addProperty("is_multiply_by_count", true);
        items26.addProperty("required_count", 2);
        JsonObject items27 = new JsonObject();
        items27.addProperty("point_amount", 5);
        items27.addProperty("point_amount_unit", "percent");
        items27.addProperty("product_code", "4912345678904");
        items27.addProperty("is_multiply_by_count", true);
        items27.addProperty("required_count", 2);
        JsonObject items28 = new JsonObject();
        items28.addProperty("point_amount", 5);
        items28.addProperty("point_amount_unit", "percent");
        items28.addProperty("subject_more_than_or_equal", 1000);
        items28.addProperty("subject_less_than", 5000);
        JsonObject items29 = new JsonObject();
        items29.addProperty("point_amount", 5);
        items29.addProperty("point_amount_unit", "percent");
        items29.addProperty("subject_more_than_or_equal", 1000);
        items29.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "V1KmKqNhpuD1AS4IxvpFPGaTF6gXtd3nJyyNe74Q2bvFtDoku",
            "1e1a0f25-bf2f-4164-8cfa-6994b790dfd0",
            "2021-02-25T21:26:31.000000Z",
            "2020-09-09T10:07:27.000000Z",
            6174,
            "topup"
        )
                .applicableShopIds(new String[]{"a86289a7-3137-4d27-af70-362c4cda0814","3b373df5-b261-44e5-a337-a86cedcfe79a","6ecb2710-75cf-4a2e-b5ad-8e38607f33c1","066efe3d-0222-4a7c-a5b6-e2a879e26a3b","4c284a68-0554-4fee-a17d-55f28066d029","382227c6-6bd3-436a-a2c2-d7fda50a91ba","e229141c-028e-4f97-b12d-ca0ef81f99e8","d8d0cd69-2b52-44ea-9318-7754299d9597","019950ce-7cd3-4da7-9595-5f28dceb1155"})
                .minimumNumberOfAmount(1205)
                .minimumNumberOfProducts(1449)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5,items6,items7})
                .applicableDaysOfWeek(new Integer[]{3,0,2,6,5})
                .blacklistedProductRules(new Object[]{items8,items9,items10,items11,items12,items13,items14,items15,items16,items17})
                .productBasedPointRules(new Object[]{items18,items19,items20,items21,items22,items23,items24,items25,items26,items27})
                .amountBasedPointRules(new Object[]{items28,items29})
                .subject("money")
                .setExclusive(false)
                .pointExpiresInDays(5580)
                .pointExpiresAt("2024-08-01T12:57:01.000000Z")
                .status("disabled")
                .description("cWCyKm4tG2FzeWXxPN6RiMVhZmmGj0TMjP")
                .bearPointShopId("c5f62e06-7f17-4426-92ac-f1a83e64c546");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test15() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("from", "12:00");
        items7.addProperty("to", "23:59");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("classification_code", "c123");
        JsonObject items11 = new JsonObject();
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("classification_code", "c123");
        JsonObject items12 = new JsonObject();
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("classification_code", "c123");
        JsonObject items13 = new JsonObject();
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("classification_code", "c123");
        JsonObject items14 = new JsonObject();
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("classification_code", "c123");
        JsonObject items15 = new JsonObject();
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("classification_code", "c123");
        JsonObject items16 = new JsonObject();
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("classification_code", "c123");
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("is_multiply_by_count", true);
        items17.addProperty("required_count", 2);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("subject_more_than_or_equal", 1000);
        items18.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "V1KmKqNhpuD1AS4IxvpFPGaTF6gXtd3nJyyNe74Q2bvFtDoku",
            "1e1a0f25-bf2f-4164-8cfa-6994b790dfd0",
            "2021-02-25T21:26:31.000000Z",
            "2020-09-09T10:07:27.000000Z",
            6174,
            "topup"
        )
                .applicableShopIds(new String[]{"5d9c5908-df18-45cd-ab1e-e2b0d517d25c","c722168f-8abe-40c4-8c7c-8a88b433f764","fc7207f7-82c0-4f15-96d8-f12409d015a2","41c62b31-25aa-4624-9f3f-4de018cd3bee","9be2e2bf-a866-4a50-9a1e-fef424139a88","bf6620fa-9747-47f5-aed6-308876f6d9ca","78481ea8-2ce2-477c-b4c3-c41fd13cc483","b2f9a8ee-d773-429a-afe0-d7ff75bc6ffc"})
                .minimumNumberForCombinationPurchase(8486)
                .minimumNumberOfAmount(4679)
                .minimumNumberOfProducts(8725)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5,items6,items7})
                .applicableDaysOfWeek(new Integer[]{3,4,2,6})
                .blacklistedProductRules(new Object[]{items8,items9,items10,items11,items12,items13,items14,items15,items16})
                .productBasedPointRules(new Object[]{items17})
                .amountBasedPointRules(new Object[]{items18})
                .subject("money")
                .setExclusive(false)
                .pointExpiresInDays(1676)
                .pointExpiresAt("2024-03-24T10:38:38.000000Z")
                .status("disabled")
                .description("r7nBijaa4uqZKlbpHQT4mZQDB6u1kMJt8otXLMwiqJK6Mis")
                .bearPointShopId("9f337750-19a8-4dd4-81d8-003bd1fc6d76");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test16() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("classification_code", "c123");
        JsonObject items4 = new JsonObject();
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("classification_code", "c123");
        JsonObject items5 = new JsonObject();
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("classification_code", "c123");
        JsonObject items6 = new JsonObject();
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("classification_code", "c123");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("is_multiply_by_count", true);
        items8.addProperty("required_count", 2);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("is_multiply_by_count", true);
        items9.addProperty("required_count", 2);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("subject_more_than_or_equal", 1000);
        items12.addProperty("subject_less_than", 5000);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("subject_more_than_or_equal", 1000);
        items13.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "V1KmKqNhpuD1AS4IxvpFPGaTF6gXtd3nJyyNe74Q2bvFtDoku",
            "1e1a0f25-bf2f-4164-8cfa-6994b790dfd0",
            "2021-02-25T21:26:31.000000Z",
            "2020-09-09T10:07:27.000000Z",
            6174,
            "topup"
        )
                .applicableShopIds(new String[]{"013b0a99-f0c1-4450-bebc-59276a539257","fb6937d6-44fd-4d2c-a6b0-16a592992ac0","5991d5a1-f95c-4c8d-aeeb-5f4963c3c6b2","eaf58ae3-5c70-45db-a9da-d2726b4fe55f","f466ca77-d82f-4ce8-b4e0-198210a8cb90","da9952fd-9930-439d-8ea3-5f1ad49d075e","92bf133b-25fe-419a-b2e4-3a683b2a51d4","f42f6a9c-3382-4873-8990-bf189801a753","4286dffb-a63a-410c-b88f-69185e691ece","69340d9f-d0ba-4dbd-bea2-27d828808784"})
                .existInEachProductGroups(false)
                .minimumNumberForCombinationPurchase(8003)
                .minimumNumberOfAmount(7361)
                .minimumNumberOfProducts(77)
                .applicableTimeRanges(new Object[]{items,items2})
                .applicableDaysOfWeek(new Integer[]{3,0,3,0,2,4,6,0,2})
                .blacklistedProductRules(new Object[]{items3,items4,items5,items6,items7})
                .productBasedPointRules(new Object[]{items8,items9,items10,items11})
                .amountBasedPointRules(new Object[]{items12,items13})
                .subject("all")
                .setExclusive(true)
                .pointExpiresInDays(2597)
                .pointExpiresAt("2020-03-27T07:03:19.000000Z")
                .status("disabled")
                .description("9jsPo3qRbXC06hH5q5N6rSqlhclxbbI1pwNVNkX1wbtHq7h4XHkBbxR0RnLtirGJS2N5S6EEO")
                .bearPointShopId("64659729-edbc-420a-b542-9b973fb793a2");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test17() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("from", "12:00");
        items7.addProperty("to", "23:59");
        JsonObject items8 = new JsonObject();
        items8.addProperty("from", "12:00");
        items8.addProperty("to", "23:59");
        JsonObject items9 = new JsonObject();
        items9.addProperty("from", "12:00");
        items9.addProperty("to", "23:59");
        JsonObject items10 = new JsonObject();
        items10.addProperty("from", "12:00");
        items10.addProperty("to", "23:59");
        JsonObject items11 = new JsonObject();
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("classification_code", "c123");
        JsonObject items12 = new JsonObject();
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("classification_code", "c123");
        JsonObject items13 = new JsonObject();
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("classification_code", "c123");
        JsonObject items14 = new JsonObject();
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("classification_code", "c123");
        JsonObject items15 = new JsonObject();
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("classification_code", "c123");
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("is_multiply_by_count", true);
        items16.addProperty("required_count", 2);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("is_multiply_by_count", true);
        items17.addProperty("required_count", 2);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("product_code", "4912345678904");
        items18.addProperty("is_multiply_by_count", true);
        items18.addProperty("required_count", 2);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("product_code", "4912345678904");
        items19.addProperty("is_multiply_by_count", true);
        items19.addProperty("required_count", 2);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("product_code", "4912345678904");
        items20.addProperty("is_multiply_by_count", true);
        items20.addProperty("required_count", 2);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("product_code", "4912345678904");
        items21.addProperty("is_multiply_by_count", true);
        items21.addProperty("required_count", 2);
        JsonObject items22 = new JsonObject();
        items22.addProperty("point_amount", 5);
        items22.addProperty("point_amount_unit", "percent");
        items22.addProperty("product_code", "4912345678904");
        items22.addProperty("is_multiply_by_count", true);
        items22.addProperty("required_count", 2);
        JsonObject items23 = new JsonObject();
        items23.addProperty("point_amount", 5);
        items23.addProperty("point_amount_unit", "percent");
        items23.addProperty("product_code", "4912345678904");
        items23.addProperty("is_multiply_by_count", true);
        items23.addProperty("required_count", 2);
        JsonObject items24 = new JsonObject();
        items24.addProperty("point_amount", 5);
        items24.addProperty("point_amount_unit", "percent");
        items24.addProperty("product_code", "4912345678904");
        items24.addProperty("is_multiply_by_count", true);
        items24.addProperty("required_count", 2);
        JsonObject items25 = new JsonObject();
        items25.addProperty("point_amount", 5);
        items25.addProperty("point_amount_unit", "percent");
        items25.addProperty("product_code", "4912345678904");
        items25.addProperty("is_multiply_by_count", true);
        items25.addProperty("required_count", 2);
        JsonObject items26 = new JsonObject();
        items26.addProperty("point_amount", 5);
        items26.addProperty("point_amount_unit", "percent");
        items26.addProperty("subject_more_than_or_equal", 1000);
        items26.addProperty("subject_less_than", 5000);
        JsonObject items27 = new JsonObject();
        items27.addProperty("point_amount", 5);
        items27.addProperty("point_amount_unit", "percent");
        items27.addProperty("subject_more_than_or_equal", 1000);
        items27.addProperty("subject_less_than", 5000);
        JsonObject items28 = new JsonObject();
        items28.addProperty("point_amount", 5);
        items28.addProperty("point_amount_unit", "percent");
        items28.addProperty("subject_more_than_or_equal", 1000);
        items28.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "V1KmKqNhpuD1AS4IxvpFPGaTF6gXtd3nJyyNe74Q2bvFtDoku",
            "1e1a0f25-bf2f-4164-8cfa-6994b790dfd0",
            "2021-02-25T21:26:31.000000Z",
            "2020-09-09T10:07:27.000000Z",
            6174,
            "topup"
        )
                .applicableShopIds(new String[]{"93257eac-0ab0-4154-8961-2d3dc674afa1"})
                .maxPointAmount(2958)
                .existInEachProductGroups(false)
                .minimumNumberForCombinationPurchase(645)
                .minimumNumberOfAmount(1165)
                .minimumNumberOfProducts(8850)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5,items6,items7,items8,items9,items10})
                .applicableDaysOfWeek(new Integer[]{2,3,5})
                .blacklistedProductRules(new Object[]{items11,items12,items13,items14,items15})
                .productBasedPointRules(new Object[]{items16,items17,items18,items19,items20,items21,items22,items23,items24,items25})
                .amountBasedPointRules(new Object[]{items26,items27,items28})
                .subject("all")
                .setExclusive(false)
                .pointExpiresInDays(5055)
                .pointExpiresAt("2023-03-03T21:23:26.000000Z")
                .status("disabled")
                .description("XXwjFaRAeTxfe0YQCHzm8OG8zcqkOxIGcWZjjM6j3edDcpZu9iiEwcokneeQ36NR2IjhyB4vKQ7cGlo7SrCjimdlgwn9qvauQ2kDhj5HLJcSNTCm30yK3y8WI")
                .bearPointShopId("c977b7f4-0ac3-4dab-a539-5f828e954ed6");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test18() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("classification_code", "c123");
        JsonObject items4 = new JsonObject();
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("classification_code", "c123");
        JsonObject items5 = new JsonObject();
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("classification_code", "c123");
        JsonObject items6 = new JsonObject();
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("classification_code", "c123");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("is_multiply_by_count", true);
        items8.addProperty("required_count", 2);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("subject_more_than_or_equal", 1000);
        items9.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "V1KmKqNhpuD1AS4IxvpFPGaTF6gXtd3nJyyNe74Q2bvFtDoku",
            "1e1a0f25-bf2f-4164-8cfa-6994b790dfd0",
            "2021-02-25T21:26:31.000000Z",
            "2020-09-09T10:07:27.000000Z",
            6174,
            "topup"
        )
                .applicableShopIds(new String[]{"51abeb94-00a2-4580-9060-efffddc839ff","05207684-2f8e-4267-894d-f85fd2d14713","ad351f28-6079-42e4-85e1-256c69d8c247","cb91613b-da37-48a9-b602-aa71a94545bc","2d4d922e-f794-4845-8fb4-85014d0b48d4","347c6031-7ff6-414f-b20c-b482317519cb","0253d98d-cf41-4a1e-b449-e277a7b67aa5","242f0104-27e7-4619-93b5-10c14521aa01","21b20767-a121-4069-898b-3d5b6172b4a7","25c78b2a-b46a-45d7-88d2-7179d5182ca9"})
                .maxTotalPointAmount(2297)
                .maxPointAmount(3609)
                .existInEachProductGroups(false)
                .minimumNumberForCombinationPurchase(7151)
                .minimumNumberOfAmount(2668)
                .minimumNumberOfProducts(5412)
                .applicableTimeRanges(new Object[]{items,items2})
                .applicableDaysOfWeek(new Integer[]{6,6,0,3,1,5,4})
                .blacklistedProductRules(new Object[]{items3,items4,items5,items6,items7})
                .productBasedPointRules(new Object[]{items8})
                .amountBasedPointRules(new Object[]{items9})
                .subject("money")
                .setExclusive(true)
                .pointExpiresInDays(906)
                .pointExpiresAt("2021-04-08T00:19:48.000000Z")
                .status("enabled")
                .description("evW68NKpdkq0PMSo6iR11TAHpgNTXOx")
                .bearPointShopId("87223ac6-6082-4aa1-bd26-17778d231371");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test19() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("from", "12:00");
        items7.addProperty("to", "23:59");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("is_multiply_by_count", true);
        items9.addProperty("required_count", 2);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("is_multiply_by_count", true);
        items16.addProperty("required_count", 2);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("is_multiply_by_count", true);
        items17.addProperty("required_count", 2);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("product_code", "4912345678904");
        items18.addProperty("is_multiply_by_count", true);
        items18.addProperty("required_count", 2);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("subject_more_than_or_equal", 1000);
        items19.addProperty("subject_less_than", 5000);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("subject_more_than_or_equal", 1000);
        items20.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "V1KmKqNhpuD1AS4IxvpFPGaTF6gXtd3nJyyNe74Q2bvFtDoku",
            "1e1a0f25-bf2f-4164-8cfa-6994b790dfd0",
            "2021-02-25T21:26:31.000000Z",
            "2020-09-09T10:07:27.000000Z",
            6174,
            "topup"
        )
                .applicableShopIds(new String[]{"b232d627-16e8-456b-8c93-628b4306078a","03643582-0b85-4f70-bd5a-acbe8f5418d6","194600a2-bb96-4c61-8468-100a21e1c3f0","a6a61e46-8c1c-4d13-bb02-e01bc25ee3d0"})
                .destPrivateMoneyId("46ab49fc-5d7f-4698-bc0c-101cd3803495")
                .maxTotalPointAmount(8305)
                .maxPointAmount(4500)
                .existInEachProductGroups(false)
                .minimumNumberForCombinationPurchase(1072)
                .minimumNumberOfAmount(6237)
                .minimumNumberOfProducts(8931)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5,items6,items7})
                .applicableDaysOfWeek(new Integer[]{3,6,6,4,1,5,2,4})
                .blacklistedProductRules(new Object[]{items8})
                .productBasedPointRules(new Object[]{items9,items10,items11,items12,items13,items14,items15,items16,items17,items18})
                .amountBasedPointRules(new Object[]{items19,items20})
                .subject("all")
                .setExclusive(false)
                .pointExpiresInDays(2086)
                .pointExpiresAt("2020-04-13T12:51:34.000000Z")
                .status("enabled")
                .description("vyI6ywfpyKilj5zg8pn57kF0DYbPLXjuwrpeD0A9IDYP4sAiFNwaac9r9GBqh0SVIl9M1spjv4mKXU1rVLf6U0K44BovHKqYzk7GBG1DZKj2tBRFerhSuL22gGga7pF0nmLMfnIYTQdqHJZ8WnDHEVfpIBtEOMP2U7IkYygmkkDxd3MzpkzvPsP")
                .bearPointShopId("3cf579ef-5eb2-42f6-abbf-6ce36c4fbcda");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test20() throws ConnectionError, ProcessingError {
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("from", "12:00");
        items7.addProperty("to", "23:59");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("classification_code", "c123");
        JsonObject items11 = new JsonObject();
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("classification_code", "c123");
        JsonObject items12 = new JsonObject();
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("classification_code", "c123");
        JsonObject items13 = new JsonObject();
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("classification_code", "c123");
        JsonObject items14 = new JsonObject();
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("classification_code", "c123");
        JsonObject items15 = new JsonObject();
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("classification_code", "c123");
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("is_multiply_by_count", true);
        items16.addProperty("required_count", 2);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("is_multiply_by_count", true);
        items17.addProperty("required_count", 2);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("product_code", "4912345678904");
        items18.addProperty("is_multiply_by_count", true);
        items18.addProperty("required_count", 2);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("product_code", "4912345678904");
        items19.addProperty("is_multiply_by_count", true);
        items19.addProperty("required_count", 2);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("product_code", "4912345678904");
        items20.addProperty("is_multiply_by_count", true);
        items20.addProperty("required_count", 2);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("product_code", "4912345678904");
        items21.addProperty("is_multiply_by_count", true);
        items21.addProperty("required_count", 2);
        JsonObject items22 = new JsonObject();
        items22.addProperty("point_amount", 5);
        items22.addProperty("point_amount_unit", "percent");
        items22.addProperty("product_code", "4912345678904");
        items22.addProperty("is_multiply_by_count", true);
        items22.addProperty("required_count", 2);
        JsonObject items23 = new JsonObject();
        items23.addProperty("point_amount", 5);
        items23.addProperty("point_amount_unit", "percent");
        items23.addProperty("product_code", "4912345678904");
        items23.addProperty("is_multiply_by_count", true);
        items23.addProperty("required_count", 2);
        JsonObject items24 = new JsonObject();
        items24.addProperty("point_amount", 5);
        items24.addProperty("point_amount_unit", "percent");
        items24.addProperty("product_code", "4912345678904");
        items24.addProperty("is_multiply_by_count", true);
        items24.addProperty("required_count", 2);
        JsonObject items25 = new JsonObject();
        items25.addProperty("point_amount", 5);
        items25.addProperty("point_amount_unit", "percent");
        items25.addProperty("product_code", "4912345678904");
        items25.addProperty("is_multiply_by_count", true);
        items25.addProperty("required_count", 2);
        JsonObject items26 = new JsonObject();
        items26.addProperty("point_amount", 5);
        items26.addProperty("point_amount_unit", "percent");
        items26.addProperty("subject_more_than_or_equal", 1000);
        items26.addProperty("subject_less_than", 5000);
        JsonObject items27 = new JsonObject();
        items27.addProperty("point_amount", 5);
        items27.addProperty("point_amount_unit", "percent");
        items27.addProperty("subject_more_than_or_equal", 1000);
        items27.addProperty("subject_less_than", 5000);
        JsonObject items28 = new JsonObject();
        items28.addProperty("point_amount", 5);
        items28.addProperty("point_amount_unit", "percent");
        items28.addProperty("subject_more_than_or_equal", 1000);
        items28.addProperty("subject_less_than", 5000);
        JsonObject items29 = new JsonObject();
        items29.addProperty("point_amount", 5);
        items29.addProperty("point_amount_unit", "percent");
        items29.addProperty("subject_more_than_or_equal", 1000);
        items29.addProperty("subject_less_than", 5000);
        JsonObject items30 = new JsonObject();
        items30.addProperty("point_amount", 5);
        items30.addProperty("point_amount_unit", "percent");
        items30.addProperty("subject_more_than_or_equal", 1000);
        items30.addProperty("subject_less_than", 5000);
        JsonObject items31 = new JsonObject();
        items31.addProperty("point_amount", 5);
        items31.addProperty("point_amount_unit", "percent");
        items31.addProperty("subject_more_than_or_equal", 1000);
        items31.addProperty("subject_less_than", 5000);
        JsonObject items32 = new JsonObject();
        items32.addProperty("point_amount", 5);
        items32.addProperty("point_amount_unit", "percent");
        items32.addProperty("subject_more_than_or_equal", 1000);
        items32.addProperty("subject_less_than", 5000);
        JsonObject items33 = new JsonObject();
        items33.addProperty("point_amount", 5);
        items33.addProperty("point_amount_unit", "percent");
        items33.addProperty("subject_more_than_or_equal", 1000);
        items33.addProperty("subject_less_than", 5000);
        JsonObject items34 = new JsonObject();
        items34.addProperty("point_amount", 5);
        items34.addProperty("point_amount_unit", "percent");
        items34.addProperty("subject_more_than_or_equal", 1000);
        items34.addProperty("subject_less_than", 5000);
        JsonObject items35 = new JsonObject();
        items35.addProperty("point_amount", 5);
        items35.addProperty("point_amount_unit", "percent");
        items35.addProperty("subject_more_than_or_equal", 1000);
        items35.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "V1KmKqNhpuD1AS4IxvpFPGaTF6gXtd3nJyyNe74Q2bvFtDoku",
            "1e1a0f25-bf2f-4164-8cfa-6994b790dfd0",
            "2021-02-25T21:26:31.000000Z",
            "2020-09-09T10:07:27.000000Z",
            6174,
            "topup"
        )
                .applicableShopIds(new String[]{"a08b534b-8484-46a8-a1bb-6f9c4bfe0466","983dbe34-9037-4930-8d44-0c77ec02ff91","95bfea86-93b5-4959-9f9e-edacaeca4091","6b4dd3c9-f1b6-4dd3-a585-ec15dd16ed41","e5232fa6-bda2-4dad-a6a4-b027501160cf","56530d05-43c2-4294-842b-03c2ef74dce7","adf90152-c595-4b96-bc14-c19147994541"})
                .applicableAccountMetadata(applicable_account_metadata)
                .destPrivateMoneyId("bd69dc67-93ed-4eea-85de-e7f86a483e90")
                .maxTotalPointAmount(5697)
                .maxPointAmount(5312)
                .existInEachProductGroups(true)
                .minimumNumberForCombinationPurchase(328)
                .minimumNumberOfAmount(7935)
                .minimumNumberOfProducts(8451)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5,items6,items7})
                .applicableDaysOfWeek(new Integer[]{3,1,3,3,6,1,1,2})
                .blacklistedProductRules(new Object[]{items8,items9,items10,items11,items12,items13,items14,items15})
                .productBasedPointRules(new Object[]{items16,items17,items18,items19,items20,items21,items22,items23,items24,items25})
                .amountBasedPointRules(new Object[]{items26,items27,items28,items29,items30,items31,items32,items33,items34,items35})
                .subject("money")
                .setExclusive(true)
                .pointExpiresInDays(9158)
                .pointExpiresAt("2021-06-30T00:37:58.000000Z")
                .status("enabled")
                .description("dsvlfnd1NOUEcUOGTeYua5DveJsn8lhIUcgIkY0oNU4ZtZZObHmdr0N6vylnlZRhGDMxuj8A7eDOAWeoDpeF6vcSyg1N9plx7jjHK1E1PUQi")
                .bearPointShopId("6a264609-5e2b-4175-967f-0ffab378b03a");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test21() throws ConnectionError, ProcessingError {
        JsonObject applicable_transaction_metadata = new JsonObject();
        applicable_transaction_metadata.addProperty("key", "rank");
        applicable_transaction_metadata.addProperty("value", "bronze");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("from", "12:00");
        items7.addProperty("to", "23:59");
        JsonObject items8 = new JsonObject();
        items8.addProperty("from", "12:00");
        items8.addProperty("to", "23:59");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("classification_code", "c123");
        JsonObject items11 = new JsonObject();
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("classification_code", "c123");
        JsonObject items12 = new JsonObject();
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("classification_code", "c123");
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("is_multiply_by_count", true);
        items16.addProperty("required_count", 2);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("is_multiply_by_count", true);
        items17.addProperty("required_count", 2);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("product_code", "4912345678904");
        items18.addProperty("is_multiply_by_count", true);
        items18.addProperty("required_count", 2);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("product_code", "4912345678904");
        items19.addProperty("is_multiply_by_count", true);
        items19.addProperty("required_count", 2);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("product_code", "4912345678904");
        items20.addProperty("is_multiply_by_count", true);
        items20.addProperty("required_count", 2);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("product_code", "4912345678904");
        items21.addProperty("is_multiply_by_count", true);
        items21.addProperty("required_count", 2);
        JsonObject items22 = new JsonObject();
        items22.addProperty("point_amount", 5);
        items22.addProperty("point_amount_unit", "percent");
        items22.addProperty("product_code", "4912345678904");
        items22.addProperty("is_multiply_by_count", true);
        items22.addProperty("required_count", 2);
        JsonObject items23 = new JsonObject();
        items23.addProperty("point_amount", 5);
        items23.addProperty("point_amount_unit", "percent");
        items23.addProperty("subject_more_than_or_equal", 1000);
        items23.addProperty("subject_less_than", 5000);
        JsonObject items24 = new JsonObject();
        items24.addProperty("point_amount", 5);
        items24.addProperty("point_amount_unit", "percent");
        items24.addProperty("subject_more_than_or_equal", 1000);
        items24.addProperty("subject_less_than", 5000);
        JsonObject items25 = new JsonObject();
        items25.addProperty("point_amount", 5);
        items25.addProperty("point_amount_unit", "percent");
        items25.addProperty("subject_more_than_or_equal", 1000);
        items25.addProperty("subject_less_than", 5000);
        JsonObject items26 = new JsonObject();
        items26.addProperty("point_amount", 5);
        items26.addProperty("point_amount_unit", "percent");
        items26.addProperty("subject_more_than_or_equal", 1000);
        items26.addProperty("subject_less_than", 5000);
        JsonObject items27 = new JsonObject();
        items27.addProperty("point_amount", 5);
        items27.addProperty("point_amount_unit", "percent");
        items27.addProperty("subject_more_than_or_equal", 1000);
        items27.addProperty("subject_less_than", 5000);
        JsonObject items28 = new JsonObject();
        items28.addProperty("point_amount", 5);
        items28.addProperty("point_amount_unit", "percent");
        items28.addProperty("subject_more_than_or_equal", 1000);
        items28.addProperty("subject_less_than", 5000);
        JsonObject items29 = new JsonObject();
        items29.addProperty("point_amount", 5);
        items29.addProperty("point_amount_unit", "percent");
        items29.addProperty("subject_more_than_or_equal", 1000);
        items29.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "V1KmKqNhpuD1AS4IxvpFPGaTF6gXtd3nJyyNe74Q2bvFtDoku",
            "1e1a0f25-bf2f-4164-8cfa-6994b790dfd0",
            "2021-02-25T21:26:31.000000Z",
            "2020-09-09T10:07:27.000000Z",
            6174,
            "topup"
        )
                .applicableShopIds(new String[]{"844a8264-bd0d-4254-8026-68169967945b","cb04ac60-18a1-45b2-8690-31be9e408a59","1efed1d6-2656-4c3b-8ea1-d667e1c0920b"})
                .applicableTransactionMetadata(applicable_transaction_metadata)
                .applicableAccountMetadata(applicable_account_metadata)
                .destPrivateMoneyId("ffce731d-2d5d-496b-a8c7-5c5b04dde23e")
                .maxTotalPointAmount(6026)
                .maxPointAmount(4578)
                .existInEachProductGroups(true)
                .minimumNumberForCombinationPurchase(2379)
                .minimumNumberOfAmount(9491)
                .minimumNumberOfProducts(8536)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5,items6,items7,items8})
                .applicableDaysOfWeek(new Integer[]{0,6,2})
                .blacklistedProductRules(new Object[]{items9,items10,items11,items12})
                .productBasedPointRules(new Object[]{items13,items14,items15,items16,items17,items18,items19,items20,items21,items22})
                .amountBasedPointRules(new Object[]{items23,items24,items25,items26,items27,items28,items29})
                .subject("money")
                .setExclusive(true)
                .pointExpiresInDays(5123)
                .pointExpiresAt("2021-05-25T21:20:11.000000Z")
                .status("disabled")
                .description("L1Y0FzVGqOKFoU3xJNKmuaDr4cMSAgHDAlLlP6Lo5yS1v7L6lCM4yrq4lI3mHyvfAo1Zkwkd2ADoyNq2PW9ePZH1V16DlcE5mr4I9qCPq1klPYIi4fgZzpFf9vCRDU8J59OtcokEMMVhmKz2iB")
                .bearPointShopId("c444f0ef-22c7-4555-b1cf-7b8d299f1103");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test22() throws ConnectionError, ProcessingError {
        JsonObject applicable_transaction_metadata = new JsonObject();
        applicable_transaction_metadata.addProperty("key", "rank");
        applicable_transaction_metadata.addProperty("value", "bronze");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("product_code", "4912345678904");
        items2.addProperty("classification_code", "c123");
        JsonObject items3 = new JsonObject();
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("classification_code", "c123");
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("is_multiply_by_count", true);
        items4.addProperty("required_count", 2);
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("is_multiply_by_count", true);
        items5.addProperty("required_count", 2);
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("is_multiply_by_count", true);
        items6.addProperty("required_count", 2);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("is_multiply_by_count", true);
        items7.addProperty("required_count", 2);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("is_multiply_by_count", true);
        items8.addProperty("required_count", 2);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("subject_more_than_or_equal", 1000);
        items9.addProperty("subject_less_than", 5000);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("subject_more_than_or_equal", 1000);
        items10.addProperty("subject_less_than", 5000);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("subject_more_than_or_equal", 1000);
        items11.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "V1KmKqNhpuD1AS4IxvpFPGaTF6gXtd3nJyyNe74Q2bvFtDoku",
            "1e1a0f25-bf2f-4164-8cfa-6994b790dfd0",
            "2021-02-25T21:26:31.000000Z",
            "2020-09-09T10:07:27.000000Z",
            6174,
            "topup"
        )
                .applicableShopIds(new String[]{"4f0246df-5981-4a55-8021-9ea7c2f0947d","b7608b6d-dc0b-4a1d-be49-376c277e163a","93096406-0a81-48b7-896a-d53d55d41502","b9fb856c-949c-49d7-b8c0-bd99496fd9f2","f2ce2c66-a203-4794-9045-d74b3efcd84d","c7e7875f-e5d1-4982-b8c6-74a79edfd99e","94f85643-a573-47b0-a88f-f736768c87b2","dee49b50-fd4c-4b62-b539-f9794e81ad2d","cb1ab366-3ffa-406e-a9f7-6e1a36eda71a"})
                .budgetCapsAmount(1117682233)
                .applicableTransactionMetadata(applicable_transaction_metadata)
                .applicableAccountMetadata(applicable_account_metadata)
                .destPrivateMoneyId("e10a412e-5c5a-4b60-aeaa-c8b7ec6a4c54")
                .maxTotalPointAmount(688)
                .maxPointAmount(491)
                .existInEachProductGroups(true)
                .minimumNumberForCombinationPurchase(6104)
                .minimumNumberOfAmount(6401)
                .minimumNumberOfProducts(4191)
                .applicableTimeRanges(new Object[]{items})
                .applicableDaysOfWeek(new Integer[]{2,0})
                .blacklistedProductRules(new Object[]{items2,items3})
                .productBasedPointRules(new Object[]{items4,items5,items6,items7,items8})
                .amountBasedPointRules(new Object[]{items9,items10,items11})
                .subject("money")
                .setExclusive(true)
                .pointExpiresInDays(3171)
                .pointExpiresAt("2020-09-03T19:49:23.000000Z")
                .status("enabled")
                .description("AUfJnZnSogxeCWxbc4wl0P2Dqh3DSK23Mk8m6Cln0nexx5CEw")
                .bearPointShopId("fb7cdc35-e47e-4404-92b8-763347af603c");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test23() throws ConnectionError, ProcessingError {
        Request request = new CreateCampaign(
            "V1KmKqNhpuD1AS4IxvpFPGaTF6gXtd3nJyyNe74Q2bvFtDoku",
            "1e1a0f25-bf2f-4164-8cfa-6994b790dfd0",
            "2021-02-25T21:26:31.000000Z",
            "2020-09-09T10:07:27.000000Z",
            6174,
            "topup"
        )
                .blacklistedShopIds(new String[]{"84d572d7-385f-4c45-8269-026999279bdc","1f34dacf-d196-4ac6-bb10-39f552b52577","774f7d6e-0e80-413f-871b-c9ad0aa54f65"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test24() throws ConnectionError, ProcessingError {
        Request request = new CreateCampaign(
            "V1KmKqNhpuD1AS4IxvpFPGaTF6gXtd3nJyyNe74Q2bvFtDoku",
            "1e1a0f25-bf2f-4164-8cfa-6994b790dfd0",
            "2021-02-25T21:26:31.000000Z",
            "2020-09-09T10:07:27.000000Z",
            6174,
            "topup"
        )
                .blacklistedShopIds(new String[]{"2ffa9795-4e88-49d4-af15-8fe662ab2757","e33ad3c8-bbb1-4216-b0f1-27716deb26ec","05dfcc03-205e-41c9-a860-72bda745bb1d","4eb5cc68-de08-4a5d-8f46-8900eff9f69d","37ff34cb-2beb-4892-8fee-b650bcf44e9b","b8360552-3a17-4365-b367-1d88d07e82ff","267ce1b3-5c4f-41f1-9920-0fcdc42a667c","1a622886-367f-4a44-b640-d0d9986c95a7","f8385137-f91c-402f-8266-ff1d4e75b52a"})
                .bearPointShopId("7a002bff-5110-4189-acba-506f86423770");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test25() throws ConnectionError, ProcessingError {
        Request request = new CreateCampaign(
            "V1KmKqNhpuD1AS4IxvpFPGaTF6gXtd3nJyyNe74Q2bvFtDoku",
            "1e1a0f25-bf2f-4164-8cfa-6994b790dfd0",
            "2021-02-25T21:26:31.000000Z",
            "2020-09-09T10:07:27.000000Z",
            6174,
            "topup"
        )
                .blacklistedShopIds(new String[]{"9bd596dc-834c-4730-839f-beb6bbe9ed84"})
                .description("OQZ33dSb51CrQZVorM80jAnbL9pF2AijYf8ydTws4HIQ4AniWPzD9CM0oL6ak44VafBlkQEtaE8xbTpd0Pi")
                .bearPointShopId("71a17849-07a4-432f-9ede-3a0f1b86900c");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test26() throws ConnectionError, ProcessingError {
        Request request = new CreateCampaign(
            "V1KmKqNhpuD1AS4IxvpFPGaTF6gXtd3nJyyNe74Q2bvFtDoku",
            "1e1a0f25-bf2f-4164-8cfa-6994b790dfd0",
            "2021-02-25T21:26:31.000000Z",
            "2020-09-09T10:07:27.000000Z",
            6174,
            "topup"
        )
                .blacklistedShopIds(new String[]{"c3c5b45d-469e-449b-93b5-cb3fac6bf834","b954e7a1-5a97-41f1-b613-e1bcedf52e36","4da4dda9-5469-4c3f-940f-3e29f581cb05","38687c32-3b80-485c-ae5d-cf589c4b62d7","d24aedbf-a73f-42eb-bcf6-4ce6d9dd33a1","e7e42a16-aef5-4e80-b3a9-55219b4e4545","13564bb3-b906-4113-85ed-b88263854de1","51a0d8e7-7852-4a5a-8058-5b424489d476"})
                .status("enabled")
                .description("QN11diTIPMylP78XJI2fkoYuaeWPZ92K6Zt1zTkBm5QsUJIx79pUjuQLW3JQAlc0mxfIBEGWMOeqgVzvGmf46VZC1gROo7yDwwPoswLPrFl08abqydMndg7MmFsD2bCpZ")
                .bearPointShopId("a2a0fd3f-b088-4098-a639-962b3e8ea54b");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test27() throws ConnectionError, ProcessingError {
        Request request = new CreateCampaign(
            "V1KmKqNhpuD1AS4IxvpFPGaTF6gXtd3nJyyNe74Q2bvFtDoku",
            "1e1a0f25-bf2f-4164-8cfa-6994b790dfd0",
            "2021-02-25T21:26:31.000000Z",
            "2020-09-09T10:07:27.000000Z",
            6174,
            "topup"
        )
                .blacklistedShopIds(new String[]{"8e70ae16-6d32-47e3-93f6-196390b4fc12","cc99fe73-15e7-4066-b032-a6b845fd7692","be42004e-b150-45fb-9771-4deff073f936","62280b58-133a-4c71-ac97-23023d73b071","810b7e23-b2f2-4309-92b9-45ecd92aeae7","b4064298-c6f0-4a93-b4ed-337a0ccab7b4","a00569ee-2079-41d6-be2f-5fd3548ab6d5","8e74a286-9eac-4844-a4d3-998c1c7e9b05","c0dbc732-c4ab-4672-8750-15c9805d592a"})
                .pointExpiresAt("2023-12-05T23:19:49.000000Z")
                .status("enabled")
                .description("8RxpE3teEPiaYEeN8ncoL5boSBHerEtGhFgJdxHlskgg6LM7DHhWIQ2aljg7pW5tLDSL3EPYXvMXdIXxGA8eOtdDg4emZxxvv3UzyZmkPPeL3QSeHszKal8UJ7mvjTFU0wWAMu89mD0TpxWczQ")
                .bearPointShopId("80a8fc80-fd55-4c93-b998-0fd7f9549461");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test28() throws ConnectionError, ProcessingError {
        Request request = new CreateCampaign(
            "V1KmKqNhpuD1AS4IxvpFPGaTF6gXtd3nJyyNe74Q2bvFtDoku",
            "1e1a0f25-bf2f-4164-8cfa-6994b790dfd0",
            "2021-02-25T21:26:31.000000Z",
            "2020-09-09T10:07:27.000000Z",
            6174,
            "topup"
        )
                .blacklistedShopIds(new String[]{"28052ae7-8bc2-480b-a14c-27574a003619","ba1d9ecd-9290-4e98-aa57-59f09d0fabde","b8560974-6fea-47e7-bf66-cdb04bf643c6","73af1f69-a15a-41da-8344-6193e5170c60","1fa20991-44db-4d45-8aae-f3ba72b04596","73f83ac5-c04f-45b2-bcfb-7050cc7526da","0bdca3ad-03dc-40c1-a0b9-68e29a6de9e9"})
                .pointExpiresInDays(650)
                .pointExpiresAt("2022-02-17T13:36:31.000000Z")
                .status("disabled")
                .description("PG1E81jCARXbk7MR17C6RF6LyMxBAxNrASDj9VGr6rQWfEP7s2f7f5rT4gnJZ2Cz81XNoucyBbEpxFX7PDggrznNWBV0p9BBTTp6AGpMMO3btHYGiB4Qalu6chDV2Pcj2ctvmZzuG")
                .bearPointShopId("711f3035-2733-4d2d-b1dd-915a9e3153d7");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test29() throws ConnectionError, ProcessingError {
        Request request = new CreateCampaign(
            "V1KmKqNhpuD1AS4IxvpFPGaTF6gXtd3nJyyNe74Q2bvFtDoku",
            "1e1a0f25-bf2f-4164-8cfa-6994b790dfd0",
            "2021-02-25T21:26:31.000000Z",
            "2020-09-09T10:07:27.000000Z",
            6174,
            "topup"
        )
                .blacklistedShopIds(new String[]{"ef038d00-71d9-437f-827a-c302bda45210","dd995ea0-7047-4b21-93ef-9b20f3262115","686f5b98-f82a-4023-b540-3075b4b5f542","78575cdd-da58-43b6-a1cc-41fd700be2dc","465eedd5-4ad5-4b5f-8ca0-5cd5c354b3c2"})
                .setExclusive(false)
                .pointExpiresInDays(4603)
                .pointExpiresAt("2024-05-24T17:09:19.000000Z")
                .status("disabled")
                .description("18rNQjTARxcKWcb1nyLLVIf7PJ4PKIYRAl1UCuQycWgFlQrGdRqVd3CIlE3dO8Hdi7PJayBT5IgAK5b9hyZ")
                .bearPointShopId("37819da9-3c01-43aa-a863-cd5ac5da415f");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test30() throws ConnectionError, ProcessingError {
        Request request = new CreateCampaign(
            "V1KmKqNhpuD1AS4IxvpFPGaTF6gXtd3nJyyNe74Q2bvFtDoku",
            "1e1a0f25-bf2f-4164-8cfa-6994b790dfd0",
            "2021-02-25T21:26:31.000000Z",
            "2020-09-09T10:07:27.000000Z",
            6174,
            "topup"
        )
                .blacklistedShopIds(new String[]{"a4d90487-3da1-4d38-8d92-3d0a15471975","a768db53-e814-456c-9652-b99181a68223","2c3854af-a2a2-423e-961c-23cbe7004b67","d1282607-0b43-4053-b049-4e0f16308aaa","f95b3ccc-7eb1-47bb-b359-a95993c79575","a2dc8b83-66c7-41ce-b1b7-8a72aa7dc4e6","3df21a54-4e39-4828-a284-3aee2f6e9e9b","e3587d4f-698c-4525-b4a9-fbfc20b7c87d","65221743-3fbb-4402-935d-20e97f703a18"})
                .subject("money")
                .setExclusive(true)
                .pointExpiresInDays(7926)
                .pointExpiresAt("2020-05-21T11:57:51.000000Z")
                .status("enabled")
                .description("7i1rcacR4EWmJRYE0vgLGn2OdxgxwF29eViuwKtjsRjzvb8XUneGNN0gcbjHE0ykOW2yVlHndMAdWY9HjNAOFWD0f28rlwLb9YSbpNpmMET9MPbip")
                .bearPointShopId("1666ee43-0f86-4c8f-8898-be15675033bb");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test31() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("subject_more_than_or_equal", 1000);
        items.addProperty("subject_less_than", 5000);
        JsonObject items2 = new JsonObject();
        items2.addProperty("point_amount", 5);
        items2.addProperty("point_amount_unit", "percent");
        items2.addProperty("subject_more_than_or_equal", 1000);
        items2.addProperty("subject_less_than", 5000);
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("subject_more_than_or_equal", 1000);
        items3.addProperty("subject_less_than", 5000);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("subject_more_than_or_equal", 1000);
        items4.addProperty("subject_less_than", 5000);
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("subject_more_than_or_equal", 1000);
        items5.addProperty("subject_less_than", 5000);
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("subject_more_than_or_equal", 1000);
        items6.addProperty("subject_less_than", 5000);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("subject_more_than_or_equal", 1000);
        items7.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "V1KmKqNhpuD1AS4IxvpFPGaTF6gXtd3nJyyNe74Q2bvFtDoku",
            "1e1a0f25-bf2f-4164-8cfa-6994b790dfd0",
            "2021-02-25T21:26:31.000000Z",
            "2020-09-09T10:07:27.000000Z",
            6174,
            "topup"
        )
                .blacklistedShopIds(new String[]{"0e947921-1506-4dac-9075-0d74cffe94ef","b4e1096b-3dd8-42d0-8871-c330032a8631","81c75320-9ab6-4663-858a-a1ef975565dd","857e9913-01f1-4527-a6bb-483e61ada4e9","36fa6fc1-8593-4280-a813-055ed3d4fd8b","8a0b69a9-1c29-47d5-9706-5b27f10f2ad8","413d6c78-9e91-40ff-a346-d59dc58fd3df","b8a9e22b-b9d2-427a-a40f-9b3c5ce58991","0141503f-c0ce-43b5-953d-d98d85dd6745"})
                .amountBasedPointRules(new Object[]{items,items2,items3,items4,items5,items6,items7})
                .subject("money")
                .setExclusive(true)
                .pointExpiresInDays(1136)
                .pointExpiresAt("2020-03-08T17:47:40.000000Z")
                .status("enabled")
                .description("uqVIJLmWFeGJqYbyf9xqe")
                .bearPointShopId("52140f2a-5ad6-4eb9-8caa-aa9afb4f11e7");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test32() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("product_code", "4912345678904");
        items.addProperty("is_multiply_by_count", true);
        items.addProperty("required_count", 2);
        JsonObject items2 = new JsonObject();
        items2.addProperty("point_amount", 5);
        items2.addProperty("point_amount_unit", "percent");
        items2.addProperty("product_code", "4912345678904");
        items2.addProperty("is_multiply_by_count", true);
        items2.addProperty("required_count", 2);
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("is_multiply_by_count", true);
        items3.addProperty("required_count", 2);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("is_multiply_by_count", true);
        items4.addProperty("required_count", 2);
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("is_multiply_by_count", true);
        items5.addProperty("required_count", 2);
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("is_multiply_by_count", true);
        items6.addProperty("required_count", 2);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("subject_more_than_or_equal", 1000);
        items7.addProperty("subject_less_than", 5000);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("subject_more_than_or_equal", 1000);
        items8.addProperty("subject_less_than", 5000);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("subject_more_than_or_equal", 1000);
        items9.addProperty("subject_less_than", 5000);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("subject_more_than_or_equal", 1000);
        items10.addProperty("subject_less_than", 5000);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("subject_more_than_or_equal", 1000);
        items11.addProperty("subject_less_than", 5000);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("subject_more_than_or_equal", 1000);
        items12.addProperty("subject_less_than", 5000);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("subject_more_than_or_equal", 1000);
        items13.addProperty("subject_less_than", 5000);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("subject_more_than_or_equal", 1000);
        items14.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "V1KmKqNhpuD1AS4IxvpFPGaTF6gXtd3nJyyNe74Q2bvFtDoku",
            "1e1a0f25-bf2f-4164-8cfa-6994b790dfd0",
            "2021-02-25T21:26:31.000000Z",
            "2020-09-09T10:07:27.000000Z",
            6174,
            "topup"
        )
                .blacklistedShopIds(new String[]{"b2154984-e7b6-4ed4-b4ef-c512c9123897","7a13c3ef-f7d2-4cf8-9c4b-a42bafde2411","5f8ae4be-73b5-4acb-9c0c-17a68e56fdde","8a453185-a152-4d18-b2ad-a83307d7b329","c13f8516-0228-4d86-a8fb-c48e507dbdb8"})
                .productBasedPointRules(new Object[]{items,items2,items3,items4,items5,items6})
                .amountBasedPointRules(new Object[]{items7,items8,items9,items10,items11,items12,items13,items14})
                .subject("money")
                .setExclusive(true)
                .pointExpiresInDays(9934)
                .pointExpiresAt("2022-06-02T04:13:13.000000Z")
                .status("disabled")
                .description("CN7QJ0QWlqwtDL88aLfgCd3mseLQBXIUiYpTvNgfaK3PoowpKAx3kfA31wXd04SY1O8gGOF1kRrye61uzmBIXdnENFs3jBlwZrD72DB37CRt8PxiPIwClGZ1KOGgE2sj7Hu6WK5M7npguch6s")
                .bearPointShopId("fe8eee24-94b2-434a-b6b7-34b0dc7a8681");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test33() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("product_code", "4912345678904");
        items.addProperty("classification_code", "c123");
        JsonObject items2 = new JsonObject();
        items2.addProperty("product_code", "4912345678904");
        items2.addProperty("classification_code", "c123");
        JsonObject items3 = new JsonObject();
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("classification_code", "c123");
        JsonObject items4 = new JsonObject();
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("classification_code", "c123");
        JsonObject items5 = new JsonObject();
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("classification_code", "c123");
        JsonObject items6 = new JsonObject();
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("classification_code", "c123");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("is_multiply_by_count", true);
        items9.addProperty("required_count", 2);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("subject_more_than_or_equal", 1000);
        items16.addProperty("subject_less_than", 5000);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("subject_more_than_or_equal", 1000);
        items17.addProperty("subject_less_than", 5000);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("subject_more_than_or_equal", 1000);
        items18.addProperty("subject_less_than", 5000);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("subject_more_than_or_equal", 1000);
        items19.addProperty("subject_less_than", 5000);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("subject_more_than_or_equal", 1000);
        items20.addProperty("subject_less_than", 5000);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("subject_more_than_or_equal", 1000);
        items21.addProperty("subject_less_than", 5000);
        JsonObject items22 = new JsonObject();
        items22.addProperty("point_amount", 5);
        items22.addProperty("point_amount_unit", "percent");
        items22.addProperty("subject_more_than_or_equal", 1000);
        items22.addProperty("subject_less_than", 5000);
        JsonObject items23 = new JsonObject();
        items23.addProperty("point_amount", 5);
        items23.addProperty("point_amount_unit", "percent");
        items23.addProperty("subject_more_than_or_equal", 1000);
        items23.addProperty("subject_less_than", 5000);
        JsonObject items24 = new JsonObject();
        items24.addProperty("point_amount", 5);
        items24.addProperty("point_amount_unit", "percent");
        items24.addProperty("subject_more_than_or_equal", 1000);
        items24.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "V1KmKqNhpuD1AS4IxvpFPGaTF6gXtd3nJyyNe74Q2bvFtDoku",
            "1e1a0f25-bf2f-4164-8cfa-6994b790dfd0",
            "2021-02-25T21:26:31.000000Z",
            "2020-09-09T10:07:27.000000Z",
            6174,
            "topup"
        )
                .blacklistedShopIds(new String[]{"bc86f729-dbb8-4be8-9c6e-1cbdadfb6f34"})
                .blacklistedProductRules(new Object[]{items,items2,items3,items4,items5,items6,items7,items8})
                .productBasedPointRules(new Object[]{items9,items10,items11,items12,items13,items14,items15})
                .amountBasedPointRules(new Object[]{items16,items17,items18,items19,items20,items21,items22,items23,items24})
                .subject("all")
                .setExclusive(false)
                .pointExpiresInDays(1998)
                .pointExpiresAt("2024-04-05T06:31:47.000000Z")
                .status("enabled")
                .description("n521mnmeh5QEBdCZJtrUa6Fgp7ym0hYqDUAWMYxWfGNC0wV3aBOX1Ig8hROFB3MljHGXrpVSkSdQBQzqXHWCk88yAdkNbUUlXp2sT5T809AbvtJaUy0K5oRI2Afv57nsS8pT7iwNl9CKN5yCsDMuuaWg6vjoZFJU5quwx")
                .bearPointShopId("99787046-2dc2-4758-a66e-fe26e557e7ba");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test34() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("product_code", "4912345678904");
        items.addProperty("classification_code", "c123");
        JsonObject items2 = new JsonObject();
        items2.addProperty("product_code", "4912345678904");
        items2.addProperty("classification_code", "c123");
        JsonObject items3 = new JsonObject();
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("classification_code", "c123");
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("is_multiply_by_count", true);
        items4.addProperty("required_count", 2);
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("is_multiply_by_count", true);
        items5.addProperty("required_count", 2);
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("is_multiply_by_count", true);
        items6.addProperty("required_count", 2);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("is_multiply_by_count", true);
        items7.addProperty("required_count", 2);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("is_multiply_by_count", true);
        items8.addProperty("required_count", 2);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("is_multiply_by_count", true);
        items9.addProperty("required_count", 2);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("subject_more_than_or_equal", 1000);
        items12.addProperty("subject_less_than", 5000);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("subject_more_than_or_equal", 1000);
        items13.addProperty("subject_less_than", 5000);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("subject_more_than_or_equal", 1000);
        items14.addProperty("subject_less_than", 5000);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("subject_more_than_or_equal", 1000);
        items15.addProperty("subject_less_than", 5000);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("subject_more_than_or_equal", 1000);
        items16.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "V1KmKqNhpuD1AS4IxvpFPGaTF6gXtd3nJyyNe74Q2bvFtDoku",
            "1e1a0f25-bf2f-4164-8cfa-6994b790dfd0",
            "2021-02-25T21:26:31.000000Z",
            "2020-09-09T10:07:27.000000Z",
            6174,
            "topup"
        )
                .blacklistedShopIds(new String[]{"a373a745-6e9d-4160-9bac-c3a20c08ad71","c9acc803-0a36-4197-87e3-fe4e6eec6b50","13fe81ae-fdc3-4820-929a-6f45e8d3b956","cfaee0db-75fb-400f-903e-26a4c985a0f1","8f76d4b4-4336-4c40-8764-17c9968aff50","eb9b5625-c62c-484a-ad23-95386b5237e1"})
                .applicableDaysOfWeek(new Integer[]{5,0,1,2})
                .blacklistedProductRules(new Object[]{items,items2,items3})
                .productBasedPointRules(new Object[]{items4,items5,items6,items7,items8,items9,items10,items11})
                .amountBasedPointRules(new Object[]{items12,items13,items14,items15,items16})
                .subject("all")
                .setExclusive(false)
                .pointExpiresInDays(7370)
                .pointExpiresAt("2022-12-15T05:27:20.000000Z")
                .status("enabled")
                .description("YUILwDYHWq9h3ayYxNgOJ9lz7HMs7r8Mwpfor2g0yfZY1uTlDfXz0uDeov2GaxLjZM7ftEliKPQLWJArPq3tph1c8gKwadNnw5eCqfZdksVLOzbmWJa8YkV10V05hf8WtQG")
                .bearPointShopId("5dfa95aa-4bc8-4ea7-b0ba-158cef863a29");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test35() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("classification_code", "c123");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("is_multiply_by_count", true);
        items9.addProperty("required_count", 2);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("subject_more_than_or_equal", 1000);
        items15.addProperty("subject_less_than", 5000);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("subject_more_than_or_equal", 1000);
        items16.addProperty("subject_less_than", 5000);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("subject_more_than_or_equal", 1000);
        items17.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "V1KmKqNhpuD1AS4IxvpFPGaTF6gXtd3nJyyNe74Q2bvFtDoku",
            "1e1a0f25-bf2f-4164-8cfa-6994b790dfd0",
            "2021-02-25T21:26:31.000000Z",
            "2020-09-09T10:07:27.000000Z",
            6174,
            "topup"
        )
                .blacklistedShopIds(new String[]{"4a475c33-7578-4ad0-91fa-efa1c28ec250","2b58ffa5-26ce-483b-82bb-a78781092abe","67ab8d97-84bf-4d5a-8dba-c0e1e5e0b3b3","23e760e3-be54-4ced-bbaa-a810b1e951d4","3d19673f-7df3-403d-ac5f-185478850926","70d9ee44-fca9-4005-88fa-08dd8a213471","8eaec1b0-9f85-4f07-a2a5-5cb0e4dbe450"})
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5})
                .applicableDaysOfWeek(new Integer[]{3})
                .blacklistedProductRules(new Object[]{items6,items7,items8})
                .productBasedPointRules(new Object[]{items9,items10,items11,items12,items13,items14})
                .amountBasedPointRules(new Object[]{items15,items16,items17})
                .subject("all")
                .setExclusive(false)
                .pointExpiresInDays(9700)
                .pointExpiresAt("2023-04-26T22:54:50.000000Z")
                .status("enabled")
                .description("EUxwAJXNLOLDUjAEUO9KUSGzbSRmd")
                .bearPointShopId("74cd1581-dfa3-49e0-a1a4-ff363808f0b6");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test36() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("classification_code", "c123");
        JsonObject items4 = new JsonObject();
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("classification_code", "c123");
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("is_multiply_by_count", true);
        items5.addProperty("required_count", 2);
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("is_multiply_by_count", true);
        items6.addProperty("required_count", 2);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("is_multiply_by_count", true);
        items7.addProperty("required_count", 2);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("subject_more_than_or_equal", 1000);
        items8.addProperty("subject_less_than", 5000);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("subject_more_than_or_equal", 1000);
        items9.addProperty("subject_less_than", 5000);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("subject_more_than_or_equal", 1000);
        items10.addProperty("subject_less_than", 5000);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("subject_more_than_or_equal", 1000);
        items11.addProperty("subject_less_than", 5000);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("subject_more_than_or_equal", 1000);
        items12.addProperty("subject_less_than", 5000);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("subject_more_than_or_equal", 1000);
        items13.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "V1KmKqNhpuD1AS4IxvpFPGaTF6gXtd3nJyyNe74Q2bvFtDoku",
            "1e1a0f25-bf2f-4164-8cfa-6994b790dfd0",
            "2021-02-25T21:26:31.000000Z",
            "2020-09-09T10:07:27.000000Z",
            6174,
            "topup"
        )
                .blacklistedShopIds(new String[]{"7a214bc8-bdbc-4d7f-8df8-e69581d342a6","c3643096-8263-46b4-9177-c3406034222d","b5b25866-8b30-4856-99f3-ae63e52da02f","94e9f769-43da-4e9c-b198-aa56c0d00e0f","312dfd1a-ca67-4cb9-83a3-ead955b23c7f","f20a201b-e52a-438d-b4ca-64f98c7ca482","772c6427-868b-41f8-bcd5-cb7133bcd701","a9bca16d-72a1-4db9-aadc-c3d14a688cba","a3eb8f1c-6fd9-425d-bc9d-fbd83cc05416","9ff32fa9-b391-451f-9c39-ade5fe27234f"})
                .minimumNumberOfProducts(4307)
                .applicableTimeRanges(new Object[]{items,items2})
                .applicableDaysOfWeek(new Integer[]{0,2,0,4,0,6,0})
                .blacklistedProductRules(new Object[]{items3,items4})
                .productBasedPointRules(new Object[]{items5,items6,items7})
                .amountBasedPointRules(new Object[]{items8,items9,items10,items11,items12,items13})
                .subject("all")
                .setExclusive(true)
                .pointExpiresInDays(1547)
                .pointExpiresAt("2020-12-16T05:35:03.000000Z")
                .status("enabled")
                .description("jexe42N6h2JPSKXOz8JwoXWD3OcRqlTHYwOestfQFumGQVfUsw4hfYXr8Tws7k48pGfLa44NJMCeJ8jlsCf1")
                .bearPointShopId("7fcfb2da-cf11-462f-87ae-782da38bcf7d");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test37() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("from", "12:00");
        items7.addProperty("to", "23:59");
        JsonObject items8 = new JsonObject();
        items8.addProperty("from", "12:00");
        items8.addProperty("to", "23:59");
        JsonObject items9 = new JsonObject();
        items9.addProperty("from", "12:00");
        items9.addProperty("to", "23:59");
        JsonObject items10 = new JsonObject();
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("classification_code", "c123");
        JsonObject items11 = new JsonObject();
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("classification_code", "c123");
        JsonObject items12 = new JsonObject();
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("classification_code", "c123");
        JsonObject items13 = new JsonObject();
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("classification_code", "c123");
        JsonObject items14 = new JsonObject();
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("classification_code", "c123");
        JsonObject items15 = new JsonObject();
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("classification_code", "c123");
        JsonObject items16 = new JsonObject();
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("classification_code", "c123");
        JsonObject items17 = new JsonObject();
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("classification_code", "c123");
        JsonObject items18 = new JsonObject();
        items18.addProperty("product_code", "4912345678904");
        items18.addProperty("classification_code", "c123");
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("product_code", "4912345678904");
        items19.addProperty("is_multiply_by_count", true);
        items19.addProperty("required_count", 2);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("product_code", "4912345678904");
        items20.addProperty("is_multiply_by_count", true);
        items20.addProperty("required_count", 2);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("product_code", "4912345678904");
        items21.addProperty("is_multiply_by_count", true);
        items21.addProperty("required_count", 2);
        JsonObject items22 = new JsonObject();
        items22.addProperty("point_amount", 5);
        items22.addProperty("point_amount_unit", "percent");
        items22.addProperty("product_code", "4912345678904");
        items22.addProperty("is_multiply_by_count", true);
        items22.addProperty("required_count", 2);
        JsonObject items23 = new JsonObject();
        items23.addProperty("point_amount", 5);
        items23.addProperty("point_amount_unit", "percent");
        items23.addProperty("product_code", "4912345678904");
        items23.addProperty("is_multiply_by_count", true);
        items23.addProperty("required_count", 2);
        JsonObject items24 = new JsonObject();
        items24.addProperty("point_amount", 5);
        items24.addProperty("point_amount_unit", "percent");
        items24.addProperty("product_code", "4912345678904");
        items24.addProperty("is_multiply_by_count", true);
        items24.addProperty("required_count", 2);
        JsonObject items25 = new JsonObject();
        items25.addProperty("point_amount", 5);
        items25.addProperty("point_amount_unit", "percent");
        items25.addProperty("product_code", "4912345678904");
        items25.addProperty("is_multiply_by_count", true);
        items25.addProperty("required_count", 2);
        JsonObject items26 = new JsonObject();
        items26.addProperty("point_amount", 5);
        items26.addProperty("point_amount_unit", "percent");
        items26.addProperty("product_code", "4912345678904");
        items26.addProperty("is_multiply_by_count", true);
        items26.addProperty("required_count", 2);
        JsonObject items27 = new JsonObject();
        items27.addProperty("point_amount", 5);
        items27.addProperty("point_amount_unit", "percent");
        items27.addProperty("product_code", "4912345678904");
        items27.addProperty("is_multiply_by_count", true);
        items27.addProperty("required_count", 2);
        JsonObject items28 = new JsonObject();
        items28.addProperty("point_amount", 5);
        items28.addProperty("point_amount_unit", "percent");
        items28.addProperty("subject_more_than_or_equal", 1000);
        items28.addProperty("subject_less_than", 5000);
        JsonObject items29 = new JsonObject();
        items29.addProperty("point_amount", 5);
        items29.addProperty("point_amount_unit", "percent");
        items29.addProperty("subject_more_than_or_equal", 1000);
        items29.addProperty("subject_less_than", 5000);
        JsonObject items30 = new JsonObject();
        items30.addProperty("point_amount", 5);
        items30.addProperty("point_amount_unit", "percent");
        items30.addProperty("subject_more_than_or_equal", 1000);
        items30.addProperty("subject_less_than", 5000);
        JsonObject items31 = new JsonObject();
        items31.addProperty("point_amount", 5);
        items31.addProperty("point_amount_unit", "percent");
        items31.addProperty("subject_more_than_or_equal", 1000);
        items31.addProperty("subject_less_than", 5000);
        JsonObject items32 = new JsonObject();
        items32.addProperty("point_amount", 5);
        items32.addProperty("point_amount_unit", "percent");
        items32.addProperty("subject_more_than_or_equal", 1000);
        items32.addProperty("subject_less_than", 5000);
        JsonObject items33 = new JsonObject();
        items33.addProperty("point_amount", 5);
        items33.addProperty("point_amount_unit", "percent");
        items33.addProperty("subject_more_than_or_equal", 1000);
        items33.addProperty("subject_less_than", 5000);
        JsonObject items34 = new JsonObject();
        items34.addProperty("point_amount", 5);
        items34.addProperty("point_amount_unit", "percent");
        items34.addProperty("subject_more_than_or_equal", 1000);
        items34.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "V1KmKqNhpuD1AS4IxvpFPGaTF6gXtd3nJyyNe74Q2bvFtDoku",
            "1e1a0f25-bf2f-4164-8cfa-6994b790dfd0",
            "2021-02-25T21:26:31.000000Z",
            "2020-09-09T10:07:27.000000Z",
            6174,
            "topup"
        )
                .blacklistedShopIds(new String[]{"a581fa65-a77f-4cb6-a753-a519a8a87998","146464b6-d6fd-49a2-87f8-528259326d3e","827a7531-e65b-49c4-b14d-74cf43c211f8","bd8bb343-00dd-448d-bf3f-a8c7e05151be","da143655-4b5c-4db3-9a66-69bd5f4f16ff","7dbb5fb6-28ba-4541-8d89-105082197cae","be89184a-c67e-4aee-820e-fb9975d20d00"})
                .minimumNumberOfAmount(8447)
                .minimumNumberOfProducts(7069)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5,items6,items7,items8,items9})
                .applicableDaysOfWeek(new Integer[]{1,1,0,0,2,1,1,3,0,6})
                .blacklistedProductRules(new Object[]{items10,items11,items12,items13,items14,items15,items16,items17,items18})
                .productBasedPointRules(new Object[]{items19,items20,items21,items22,items23,items24,items25,items26,items27})
                .amountBasedPointRules(new Object[]{items28,items29,items30,items31,items32,items33,items34})
                .subject("all")
                .setExclusive(false)
                .pointExpiresInDays(5346)
                .pointExpiresAt("2020-11-19T19:29:32.000000Z")
                .status("enabled")
                .description("ZxbhLpAG3vIRMVqbJVgHdPhvPKwzwzrbVYcpu84LTKQxDTzMnM7RDpI6DZQTPfIajSBmWzFbVfaL5LT2cPjctfArtA5QzauCKeqrCHLOb6c1NzcpMx2l8O1vhN74ziDPGC2ST6zTd6xVdSlQkj4Z4gR5YjMfLJAECo2gNDDCrV3PxozvlpngWpA6")
                .bearPointShopId("dc513694-9421-47f8-a25a-8ccd6655641d");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test38() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("classification_code", "c123");
        JsonObject items6 = new JsonObject();
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("classification_code", "c123");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("classification_code", "c123");
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("is_multiply_by_count", true);
        items16.addProperty("required_count", 2);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("subject_more_than_or_equal", 1000);
        items17.addProperty("subject_less_than", 5000);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("subject_more_than_or_equal", 1000);
        items18.addProperty("subject_less_than", 5000);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("subject_more_than_or_equal", 1000);
        items19.addProperty("subject_less_than", 5000);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("subject_more_than_or_equal", 1000);
        items20.addProperty("subject_less_than", 5000);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("subject_more_than_or_equal", 1000);
        items21.addProperty("subject_less_than", 5000);
        JsonObject items22 = new JsonObject();
        items22.addProperty("point_amount", 5);
        items22.addProperty("point_amount_unit", "percent");
        items22.addProperty("subject_more_than_or_equal", 1000);
        items22.addProperty("subject_less_than", 5000);
        JsonObject items23 = new JsonObject();
        items23.addProperty("point_amount", 5);
        items23.addProperty("point_amount_unit", "percent");
        items23.addProperty("subject_more_than_or_equal", 1000);
        items23.addProperty("subject_less_than", 5000);
        JsonObject items24 = new JsonObject();
        items24.addProperty("point_amount", 5);
        items24.addProperty("point_amount_unit", "percent");
        items24.addProperty("subject_more_than_or_equal", 1000);
        items24.addProperty("subject_less_than", 5000);
        JsonObject items25 = new JsonObject();
        items25.addProperty("point_amount", 5);
        items25.addProperty("point_amount_unit", "percent");
        items25.addProperty("subject_more_than_or_equal", 1000);
        items25.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "V1KmKqNhpuD1AS4IxvpFPGaTF6gXtd3nJyyNe74Q2bvFtDoku",
            "1e1a0f25-bf2f-4164-8cfa-6994b790dfd0",
            "2021-02-25T21:26:31.000000Z",
            "2020-09-09T10:07:27.000000Z",
            6174,
            "topup"
        )
                .blacklistedShopIds(new String[]{"da1fb68f-4266-44e3-b03f-b1aacf385a75","93d591dd-0377-47f0-b0c9-02a5c391acce"})
                .minimumNumberForCombinationPurchase(9392)
                .minimumNumberOfAmount(9974)
                .minimumNumberOfProducts(9246)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4})
                .applicableDaysOfWeek(new Integer[]{2,3})
                .blacklistedProductRules(new Object[]{items5,items6,items7,items8,items9,items10})
                .productBasedPointRules(new Object[]{items11,items12,items13,items14,items15,items16})
                .amountBasedPointRules(new Object[]{items17,items18,items19,items20,items21,items22,items23,items24,items25})
                .subject("all")
                .setExclusive(false)
                .pointExpiresInDays(2638)
                .pointExpiresAt("2024-04-28T00:47:57.000000Z")
                .status("disabled")
                .description("qZDhOobPpK6TParuulg11gUrgWq51AuUounyHv57rDbvmuL7BqYd28Ylq4PTRllx603bU9utxlgE1LKaCgZVizYnvZve6TUWFWHy2b5Vs5gPuvHuA5")
                .bearPointShopId("39b59148-a7d7-4d5b-a049-7e119e987df1");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test39() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("product_code", "4912345678904");
        items2.addProperty("classification_code", "c123");
        JsonObject items3 = new JsonObject();
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("classification_code", "c123");
        JsonObject items4 = new JsonObject();
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("classification_code", "c123");
        JsonObject items5 = new JsonObject();
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("classification_code", "c123");
        JsonObject items6 = new JsonObject();
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("classification_code", "c123");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("is_multiply_by_count", true);
        items16.addProperty("required_count", 2);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("is_multiply_by_count", true);
        items17.addProperty("required_count", 2);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("product_code", "4912345678904");
        items18.addProperty("is_multiply_by_count", true);
        items18.addProperty("required_count", 2);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("subject_more_than_or_equal", 1000);
        items19.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "V1KmKqNhpuD1AS4IxvpFPGaTF6gXtd3nJyyNe74Q2bvFtDoku",
            "1e1a0f25-bf2f-4164-8cfa-6994b790dfd0",
            "2021-02-25T21:26:31.000000Z",
            "2020-09-09T10:07:27.000000Z",
            6174,
            "topup"
        )
                .blacklistedShopIds(new String[]{"e79989ce-4f08-4803-9da5-9822750f3a55","414bc4af-c76f-4f4d-8508-441229a5c600","b4b65b9a-af2e-47e9-bfb9-1177683b4e07","de8701ce-dcc9-483c-a15d-a83b8697ffca","a7149faf-58db-49f9-89b2-7cf0595fbbc1","569a6c97-3ae0-49c4-92f3-dc32f22118c0","906edd42-5734-4d5e-91f9-b0161d346742","7909bfb1-41c7-4fa9-915a-27170967bc02","c9b2ce13-7d54-4f6b-ae02-f204bb504334"})
                .existInEachProductGroups(true)
                .minimumNumberForCombinationPurchase(9266)
                .minimumNumberOfAmount(1216)
                .minimumNumberOfProducts(8355)
                .applicableTimeRanges(new Object[]{items})
                .applicableDaysOfWeek(new Integer[]{6,2,1,2,2,3,5,0,1})
                .blacklistedProductRules(new Object[]{items2,items3,items4,items5,items6,items7,items8,items9})
                .productBasedPointRules(new Object[]{items10,items11,items12,items13,items14,items15,items16,items17,items18})
                .amountBasedPointRules(new Object[]{items19})
                .subject("money")
                .setExclusive(true)
                .pointExpiresInDays(7764)
                .pointExpiresAt("2023-07-03T06:40:54.000000Z")
                .status("enabled")
                .description("nScTvJ4VHpUajLmD9cCimPwC97LHWaSOnICBJimGKiopraV9Fu47WiDgn")
                .bearPointShopId("9ce4d227-cd39-42d6-8aea-c89ba01a9d5f");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test40() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("classification_code", "c123");
        JsonObject items6 = new JsonObject();
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("classification_code", "c123");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("classification_code", "c123");
        JsonObject items11 = new JsonObject();
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("classification_code", "c123");
        JsonObject items12 = new JsonObject();
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("classification_code", "c123");
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("is_multiply_by_count", true);
        items16.addProperty("required_count", 2);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("is_multiply_by_count", true);
        items17.addProperty("required_count", 2);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("product_code", "4912345678904");
        items18.addProperty("is_multiply_by_count", true);
        items18.addProperty("required_count", 2);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("subject_more_than_or_equal", 1000);
        items19.addProperty("subject_less_than", 5000);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("subject_more_than_or_equal", 1000);
        items20.addProperty("subject_less_than", 5000);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("subject_more_than_or_equal", 1000);
        items21.addProperty("subject_less_than", 5000);
        JsonObject items22 = new JsonObject();
        items22.addProperty("point_amount", 5);
        items22.addProperty("point_amount_unit", "percent");
        items22.addProperty("subject_more_than_or_equal", 1000);
        items22.addProperty("subject_less_than", 5000);
        JsonObject items23 = new JsonObject();
        items23.addProperty("point_amount", 5);
        items23.addProperty("point_amount_unit", "percent");
        items23.addProperty("subject_more_than_or_equal", 1000);
        items23.addProperty("subject_less_than", 5000);
        JsonObject items24 = new JsonObject();
        items24.addProperty("point_amount", 5);
        items24.addProperty("point_amount_unit", "percent");
        items24.addProperty("subject_more_than_or_equal", 1000);
        items24.addProperty("subject_less_than", 5000);
        JsonObject items25 = new JsonObject();
        items25.addProperty("point_amount", 5);
        items25.addProperty("point_amount_unit", "percent");
        items25.addProperty("subject_more_than_or_equal", 1000);
        items25.addProperty("subject_less_than", 5000);
        JsonObject items26 = new JsonObject();
        items26.addProperty("point_amount", 5);
        items26.addProperty("point_amount_unit", "percent");
        items26.addProperty("subject_more_than_or_equal", 1000);
        items26.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "V1KmKqNhpuD1AS4IxvpFPGaTF6gXtd3nJyyNe74Q2bvFtDoku",
            "1e1a0f25-bf2f-4164-8cfa-6994b790dfd0",
            "2021-02-25T21:26:31.000000Z",
            "2020-09-09T10:07:27.000000Z",
            6174,
            "topup"
        )
                .blacklistedShopIds(new String[]{"47922744-f089-4b31-9eb7-5d16cb1f736b","e780702e-5d6a-43a8-8e3a-d129e9aee72f","4df90ff2-cf25-407e-b2be-851c23f97db9","100e4803-3235-4a6e-873d-fd0e74245d7b","3a714afb-294d-4822-922f-5108dcb76c93","384ec2ec-c332-48ab-9045-19c48d14c916"})
                .maxPointAmount(8988)
                .existInEachProductGroups(true)
                .minimumNumberForCombinationPurchase(8088)
                .minimumNumberOfAmount(5579)
                .minimumNumberOfProducts(8043)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4})
                .applicableDaysOfWeek(new Integer[]{3,4,1,4,5,3,3,1,1,1})
                .blacklistedProductRules(new Object[]{items5,items6,items7,items8,items9,items10,items11,items12})
                .productBasedPointRules(new Object[]{items13,items14,items15,items16,items17,items18})
                .amountBasedPointRules(new Object[]{items19,items20,items21,items22,items23,items24,items25,items26})
                .subject("all")
                .setExclusive(false)
                .pointExpiresInDays(9944)
                .pointExpiresAt("2020-09-09T05:23:52.000000Z")
                .status("disabled")
                .description("dNFDbX7fss0ltmaJnxsla")
                .bearPointShopId("89f5a3d5-94cc-4537-9fd2-cef20bd60cf8");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test41() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("classification_code", "c123");
        JsonObject items6 = new JsonObject();
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("classification_code", "c123");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("classification_code", "c123");
        JsonObject items11 = new JsonObject();
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("classification_code", "c123");
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("is_multiply_by_count", true);
        items16.addProperty("required_count", 2);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("is_multiply_by_count", true);
        items17.addProperty("required_count", 2);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("product_code", "4912345678904");
        items18.addProperty("is_multiply_by_count", true);
        items18.addProperty("required_count", 2);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("subject_more_than_or_equal", 1000);
        items19.addProperty("subject_less_than", 5000);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("subject_more_than_or_equal", 1000);
        items20.addProperty("subject_less_than", 5000);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("subject_more_than_or_equal", 1000);
        items21.addProperty("subject_less_than", 5000);
        JsonObject items22 = new JsonObject();
        items22.addProperty("point_amount", 5);
        items22.addProperty("point_amount_unit", "percent");
        items22.addProperty("subject_more_than_or_equal", 1000);
        items22.addProperty("subject_less_than", 5000);
        JsonObject items23 = new JsonObject();
        items23.addProperty("point_amount", 5);
        items23.addProperty("point_amount_unit", "percent");
        items23.addProperty("subject_more_than_or_equal", 1000);
        items23.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "V1KmKqNhpuD1AS4IxvpFPGaTF6gXtd3nJyyNe74Q2bvFtDoku",
            "1e1a0f25-bf2f-4164-8cfa-6994b790dfd0",
            "2021-02-25T21:26:31.000000Z",
            "2020-09-09T10:07:27.000000Z",
            6174,
            "topup"
        )
                .blacklistedShopIds(new String[]{"b0e10ae2-16c2-4f01-bf22-cd9a02680d01","90fad016-1378-4f05-99b5-3517fd97613a"})
                .maxTotalPointAmount(5316)
                .maxPointAmount(9116)
                .existInEachProductGroups(false)
                .minimumNumberForCombinationPurchase(9571)
                .minimumNumberOfAmount(3193)
                .minimumNumberOfProducts(9699)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4})
                .applicableDaysOfWeek(new Integer[]{6,2,5,4,1,6})
                .blacklistedProductRules(new Object[]{items5,items6,items7,items8,items9,items10,items11})
                .productBasedPointRules(new Object[]{items12,items13,items14,items15,items16,items17,items18})
                .amountBasedPointRules(new Object[]{items19,items20,items21,items22,items23})
                .subject("all")
                .setExclusive(true)
                .pointExpiresInDays(6173)
                .pointExpiresAt("2021-09-26T21:28:04.000000Z")
                .status("enabled")
                .description("wUBkrqrvJ3GVs6GsJ8XiLApVwNY6zjKIEdqTZCuDots6o")
                .bearPointShopId("0653e022-a97e-4b1a-8ff0-4e552948b319");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test42() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("from", "12:00");
        items7.addProperty("to", "23:59");
        JsonObject items8 = new JsonObject();
        items8.addProperty("from", "12:00");
        items8.addProperty("to", "23:59");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("classification_code", "c123");
        JsonObject items11 = new JsonObject();
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("classification_code", "c123");
        JsonObject items12 = new JsonObject();
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("classification_code", "c123");
        JsonObject items13 = new JsonObject();
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("classification_code", "c123");
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("is_multiply_by_count", true);
        items16.addProperty("required_count", 2);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("subject_more_than_or_equal", 1000);
        items17.addProperty("subject_less_than", 5000);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("subject_more_than_or_equal", 1000);
        items18.addProperty("subject_less_than", 5000);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("subject_more_than_or_equal", 1000);
        items19.addProperty("subject_less_than", 5000);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("subject_more_than_or_equal", 1000);
        items20.addProperty("subject_less_than", 5000);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("subject_more_than_or_equal", 1000);
        items21.addProperty("subject_less_than", 5000);
        JsonObject items22 = new JsonObject();
        items22.addProperty("point_amount", 5);
        items22.addProperty("point_amount_unit", "percent");
        items22.addProperty("subject_more_than_or_equal", 1000);
        items22.addProperty("subject_less_than", 5000);
        JsonObject items23 = new JsonObject();
        items23.addProperty("point_amount", 5);
        items23.addProperty("point_amount_unit", "percent");
        items23.addProperty("subject_more_than_or_equal", 1000);
        items23.addProperty("subject_less_than", 5000);
        JsonObject items24 = new JsonObject();
        items24.addProperty("point_amount", 5);
        items24.addProperty("point_amount_unit", "percent");
        items24.addProperty("subject_more_than_or_equal", 1000);
        items24.addProperty("subject_less_than", 5000);
        JsonObject items25 = new JsonObject();
        items25.addProperty("point_amount", 5);
        items25.addProperty("point_amount_unit", "percent");
        items25.addProperty("subject_more_than_or_equal", 1000);
        items25.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "V1KmKqNhpuD1AS4IxvpFPGaTF6gXtd3nJyyNe74Q2bvFtDoku",
            "1e1a0f25-bf2f-4164-8cfa-6994b790dfd0",
            "2021-02-25T21:26:31.000000Z",
            "2020-09-09T10:07:27.000000Z",
            6174,
            "topup"
        )
                .blacklistedShopIds(new String[]{"b79f5e0c-8c6e-4d83-92d8-65b5d7624170","06bdac61-4165-4586-a626-3b7062f0a4f2","7311a218-4257-4574-9053-1cc7dc7fb4da","d934d772-f2cc-4a39-bb3f-27fdaaa9d2d5","5f4abd24-e372-446d-8114-face24d66925","555cca3a-c512-4202-9593-760c0e11d198","9e3a20b3-33f6-4046-a75a-1eaa6ad77c9e","1d8c0311-8736-4f18-8388-e9398c43f776","a0b38e77-03d8-4ea5-9200-13c9a811e605"})
                .destPrivateMoneyId("e8ad3462-cb5f-46ca-ac60-37b7b0378779")
                .maxTotalPointAmount(9645)
                .maxPointAmount(1169)
                .existInEachProductGroups(true)
                .minimumNumberForCombinationPurchase(7676)
                .minimumNumberOfAmount(8960)
                .minimumNumberOfProducts(307)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5,items6,items7,items8})
                .applicableDaysOfWeek(new Integer[]{3,6,0,1,2,4})
                .blacklistedProductRules(new Object[]{items9,items10,items11,items12,items13})
                .productBasedPointRules(new Object[]{items14,items15,items16})
                .amountBasedPointRules(new Object[]{items17,items18,items19,items20,items21,items22,items23,items24,items25})
                .subject("money")
                .setExclusive(false)
                .pointExpiresInDays(4060)
                .pointExpiresAt("2024-08-25T16:06:07.000000Z")
                .status("enabled")
                .description("63tcXPzmao0EWnRVCjlgZcfxXnQfXvfoocz3td7BZN78kqzJ0Us2fGrJyLKsRHFPpRHSTTSFxnvRwj3Oa3urFP8R4bhOdaBwGLVVHwtN3AFb20DhVqIxWOmhxrSYnMI0")
                .bearPointShopId("ff40b6e4-c8ff-49c5-a8cf-c79204df1027");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test43() throws ConnectionError, ProcessingError {
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("product_code", "4912345678904");
        items2.addProperty("classification_code", "c123");
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("is_multiply_by_count", true);
        items3.addProperty("required_count", 2);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("is_multiply_by_count", true);
        items4.addProperty("required_count", 2);
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("is_multiply_by_count", true);
        items5.addProperty("required_count", 2);
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("subject_more_than_or_equal", 1000);
        items6.addProperty("subject_less_than", 5000);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("subject_more_than_or_equal", 1000);
        items7.addProperty("subject_less_than", 5000);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("subject_more_than_or_equal", 1000);
        items8.addProperty("subject_less_than", 5000);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("subject_more_than_or_equal", 1000);
        items9.addProperty("subject_less_than", 5000);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("subject_more_than_or_equal", 1000);
        items10.addProperty("subject_less_than", 5000);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("subject_more_than_or_equal", 1000);
        items11.addProperty("subject_less_than", 5000);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("subject_more_than_or_equal", 1000);
        items12.addProperty("subject_less_than", 5000);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("subject_more_than_or_equal", 1000);
        items13.addProperty("subject_less_than", 5000);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("subject_more_than_or_equal", 1000);
        items14.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "V1KmKqNhpuD1AS4IxvpFPGaTF6gXtd3nJyyNe74Q2bvFtDoku",
            "1e1a0f25-bf2f-4164-8cfa-6994b790dfd0",
            "2021-02-25T21:26:31.000000Z",
            "2020-09-09T10:07:27.000000Z",
            6174,
            "topup"
        )
                .blacklistedShopIds(new String[]{"5ecdcd80-da1c-4abb-89bc-4e25539e4b17","1c349b22-1ff1-4d4f-a3c6-be879f38494c","80845371-9c6e-4e0c-b2a0-205a8905f6de","0baf9c17-7f75-484c-afeb-f29741ca25de","310197b5-3fc7-4ca6-a846-69328965d846"})
                .applicableAccountMetadata(applicable_account_metadata)
                .destPrivateMoneyId("03777006-54d5-46f5-b97b-a844b8d0a8d6")
                .maxTotalPointAmount(5436)
                .maxPointAmount(8339)
                .existInEachProductGroups(false)
                .minimumNumberForCombinationPurchase(7643)
                .minimumNumberOfAmount(4442)
                .minimumNumberOfProducts(6502)
                .applicableTimeRanges(new Object[]{items})
                .applicableDaysOfWeek(new Integer[]{3})
                .blacklistedProductRules(new Object[]{items2})
                .productBasedPointRules(new Object[]{items3,items4,items5})
                .amountBasedPointRules(new Object[]{items6,items7,items8,items9,items10,items11,items12,items13,items14})
                .subject("all")
                .setExclusive(false)
                .pointExpiresInDays(6020)
                .pointExpiresAt("2022-06-22T08:49:37.000000Z")
                .status("enabled")
                .description("DGq4e7wXOOVc8GIqj26qcMQ423OrAYOyd21L95eAaG4JW0HS7")
                .bearPointShopId("f326f101-4a5f-480e-94fe-50a26de542b0");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test44() throws ConnectionError, ProcessingError {
        JsonObject applicable_transaction_metadata = new JsonObject();
        applicable_transaction_metadata.addProperty("key", "rank");
        applicable_transaction_metadata.addProperty("value", "bronze");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("from", "12:00");
        items7.addProperty("to", "23:59");
        JsonObject items8 = new JsonObject();
        items8.addProperty("from", "12:00");
        items8.addProperty("to", "23:59");
        JsonObject items9 = new JsonObject();
        items9.addProperty("from", "12:00");
        items9.addProperty("to", "23:59");
        JsonObject items10 = new JsonObject();
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("classification_code", "c123");
        JsonObject items11 = new JsonObject();
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("classification_code", "c123");
        JsonObject items12 = new JsonObject();
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("classification_code", "c123");
        JsonObject items13 = new JsonObject();
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("classification_code", "c123");
        JsonObject items14 = new JsonObject();
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("classification_code", "c123");
        JsonObject items15 = new JsonObject();
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("classification_code", "c123");
        JsonObject items16 = new JsonObject();
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("classification_code", "c123");
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("is_multiply_by_count", true);
        items17.addProperty("required_count", 2);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("product_code", "4912345678904");
        items18.addProperty("is_multiply_by_count", true);
        items18.addProperty("required_count", 2);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("product_code", "4912345678904");
        items19.addProperty("is_multiply_by_count", true);
        items19.addProperty("required_count", 2);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("product_code", "4912345678904");
        items20.addProperty("is_multiply_by_count", true);
        items20.addProperty("required_count", 2);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("product_code", "4912345678904");
        items21.addProperty("is_multiply_by_count", true);
        items21.addProperty("required_count", 2);
        JsonObject items22 = new JsonObject();
        items22.addProperty("point_amount", 5);
        items22.addProperty("point_amount_unit", "percent");
        items22.addProperty("product_code", "4912345678904");
        items22.addProperty("is_multiply_by_count", true);
        items22.addProperty("required_count", 2);
        JsonObject items23 = new JsonObject();
        items23.addProperty("point_amount", 5);
        items23.addProperty("point_amount_unit", "percent");
        items23.addProperty("product_code", "4912345678904");
        items23.addProperty("is_multiply_by_count", true);
        items23.addProperty("required_count", 2);
        JsonObject items24 = new JsonObject();
        items24.addProperty("point_amount", 5);
        items24.addProperty("point_amount_unit", "percent");
        items24.addProperty("product_code", "4912345678904");
        items24.addProperty("is_multiply_by_count", true);
        items24.addProperty("required_count", 2);
        JsonObject items25 = new JsonObject();
        items25.addProperty("point_amount", 5);
        items25.addProperty("point_amount_unit", "percent");
        items25.addProperty("product_code", "4912345678904");
        items25.addProperty("is_multiply_by_count", true);
        items25.addProperty("required_count", 2);
        JsonObject items26 = new JsonObject();
        items26.addProperty("point_amount", 5);
        items26.addProperty("point_amount_unit", "percent");
        items26.addProperty("product_code", "4912345678904");
        items26.addProperty("is_multiply_by_count", true);
        items26.addProperty("required_count", 2);
        JsonObject items27 = new JsonObject();
        items27.addProperty("point_amount", 5);
        items27.addProperty("point_amount_unit", "percent");
        items27.addProperty("subject_more_than_or_equal", 1000);
        items27.addProperty("subject_less_than", 5000);
        JsonObject items28 = new JsonObject();
        items28.addProperty("point_amount", 5);
        items28.addProperty("point_amount_unit", "percent");
        items28.addProperty("subject_more_than_or_equal", 1000);
        items28.addProperty("subject_less_than", 5000);
        JsonObject items29 = new JsonObject();
        items29.addProperty("point_amount", 5);
        items29.addProperty("point_amount_unit", "percent");
        items29.addProperty("subject_more_than_or_equal", 1000);
        items29.addProperty("subject_less_than", 5000);
        JsonObject items30 = new JsonObject();
        items30.addProperty("point_amount", 5);
        items30.addProperty("point_amount_unit", "percent");
        items30.addProperty("subject_more_than_or_equal", 1000);
        items30.addProperty("subject_less_than", 5000);
        JsonObject items31 = new JsonObject();
        items31.addProperty("point_amount", 5);
        items31.addProperty("point_amount_unit", "percent");
        items31.addProperty("subject_more_than_or_equal", 1000);
        items31.addProperty("subject_less_than", 5000);
        JsonObject items32 = new JsonObject();
        items32.addProperty("point_amount", 5);
        items32.addProperty("point_amount_unit", "percent");
        items32.addProperty("subject_more_than_or_equal", 1000);
        items32.addProperty("subject_less_than", 5000);
        JsonObject items33 = new JsonObject();
        items33.addProperty("point_amount", 5);
        items33.addProperty("point_amount_unit", "percent");
        items33.addProperty("subject_more_than_or_equal", 1000);
        items33.addProperty("subject_less_than", 5000);
        JsonObject items34 = new JsonObject();
        items34.addProperty("point_amount", 5);
        items34.addProperty("point_amount_unit", "percent");
        items34.addProperty("subject_more_than_or_equal", 1000);
        items34.addProperty("subject_less_than", 5000);
        JsonObject items35 = new JsonObject();
        items35.addProperty("point_amount", 5);
        items35.addProperty("point_amount_unit", "percent");
        items35.addProperty("subject_more_than_or_equal", 1000);
        items35.addProperty("subject_less_than", 5000);
        JsonObject items36 = new JsonObject();
        items36.addProperty("point_amount", 5);
        items36.addProperty("point_amount_unit", "percent");
        items36.addProperty("subject_more_than_or_equal", 1000);
        items36.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "V1KmKqNhpuD1AS4IxvpFPGaTF6gXtd3nJyyNe74Q2bvFtDoku",
            "1e1a0f25-bf2f-4164-8cfa-6994b790dfd0",
            "2021-02-25T21:26:31.000000Z",
            "2020-09-09T10:07:27.000000Z",
            6174,
            "topup"
        )
                .blacklistedShopIds(new String[]{"bacc3b26-2723-4e4a-8f55-091d3a28e0fe"})
                .applicableTransactionMetadata(applicable_transaction_metadata)
                .applicableAccountMetadata(applicable_account_metadata)
                .destPrivateMoneyId("67872fcb-41ea-4e4b-8ce5-3b47df08b8dc")
                .maxTotalPointAmount(2654)
                .maxPointAmount(4548)
                .existInEachProductGroups(false)
                .minimumNumberForCombinationPurchase(6733)
                .minimumNumberOfAmount(5138)
                .minimumNumberOfProducts(4476)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5,items6,items7,items8,items9})
                .applicableDaysOfWeek(new Integer[]{3,3,0,1,0,5,1,3,1,5})
                .blacklistedProductRules(new Object[]{items10,items11,items12,items13,items14,items15,items16})
                .productBasedPointRules(new Object[]{items17,items18,items19,items20,items21,items22,items23,items24,items25,items26})
                .amountBasedPointRules(new Object[]{items27,items28,items29,items30,items31,items32,items33,items34,items35,items36})
                .subject("all")
                .setExclusive(true)
                .pointExpiresInDays(9410)
                .pointExpiresAt("2022-10-14T12:36:17.000000Z")
                .status("enabled")
                .description("HYYK9z73uxDP2ictixYSW0AnlJyQ4ogjQgbj8PRfNm4vkTJ8joyTSHmI2see5qGgNKlkv5vEcEoMjbT4VP8lZF0AhpuShoXCly79fXYfw5LEwfbe5dxC9nFb6EnR37XI7b090WiB")
                .bearPointShopId("a21959f4-c4d2-4b5f-bb2d-642a030a4668");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test45() throws ConnectionError, ProcessingError {
        JsonObject applicable_transaction_metadata = new JsonObject();
        applicable_transaction_metadata.addProperty("key", "rank");
        applicable_transaction_metadata.addProperty("value", "bronze");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("classification_code", "c123");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("classification_code", "c123");
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("subject_more_than_or_equal", 1000);
        items12.addProperty("subject_less_than", 5000);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("subject_more_than_or_equal", 1000);
        items13.addProperty("subject_less_than", 5000);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("subject_more_than_or_equal", 1000);
        items14.addProperty("subject_less_than", 5000);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("subject_more_than_or_equal", 1000);
        items15.addProperty("subject_less_than", 5000);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("subject_more_than_or_equal", 1000);
        items16.addProperty("subject_less_than", 5000);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("subject_more_than_or_equal", 1000);
        items17.addProperty("subject_less_than", 5000);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("subject_more_than_or_equal", 1000);
        items18.addProperty("subject_less_than", 5000);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("subject_more_than_or_equal", 1000);
        items19.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "V1KmKqNhpuD1AS4IxvpFPGaTF6gXtd3nJyyNe74Q2bvFtDoku",
            "1e1a0f25-bf2f-4164-8cfa-6994b790dfd0",
            "2021-02-25T21:26:31.000000Z",
            "2020-09-09T10:07:27.000000Z",
            6174,
            "topup"
        )
                .blacklistedShopIds(new String[]{"506c48bc-2226-4961-9d76-10d73ed2e5ef"})
                .budgetCapsAmount(1517025453)
                .applicableTransactionMetadata(applicable_transaction_metadata)
                .applicableAccountMetadata(applicable_account_metadata)
                .destPrivateMoneyId("011241ed-9e37-4e03-ae9b-36697259f353")
                .maxTotalPointAmount(4495)
                .maxPointAmount(6749)
                .existInEachProductGroups(true)
                .minimumNumberForCombinationPurchase(4226)
                .minimumNumberOfAmount(5301)
                .minimumNumberOfProducts(5110)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5})
                .applicableDaysOfWeek(new Integer[]{4})
                .blacklistedProductRules(new Object[]{items6,items7,items8,items9,items10})
                .productBasedPointRules(new Object[]{items11})
                .amountBasedPointRules(new Object[]{items12,items13,items14,items15,items16,items17,items18,items19})
                .subject("money")
                .setExclusive(true)
                .pointExpiresInDays(189)
                .pointExpiresAt("2022-01-27T14:38:20.000000Z")
                .status("enabled")
                .description("LBVq7JKL8IsIw17O7EyRwbRgUy7vFea5WeBAkgIciVnQYB9t75iPCouDaOPQZR4UpdKmspN8b2gkMcSPrmt0hjIJ")
                .bearPointShopId("7b804381-8d75-4f20-b49a-b801d39ba53b");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
}
