// DO NOT EDIT: File is generated by code generator.
package jp.pokepay.partnerapi;

import jp.pokepay.partnerapi.request.CreateCampaign;
import jp.pokepay.partnerapi.request.Request;
import com.google.gson.JsonObject;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class CreateCampaignTest {
    @Test
    void test0() throws ConnectionError, ProcessingError {
        Request request = new CreateCampaign(
            "QxRkeqNQeXfWKRjr6QmO01AfgQug0zp9uYT1ZMdJ8n2O7iUOn4U5u1AWGcysVn2YV4SaLwr46b7NtGRvPXwqG1ADL6KaWpMPK1FW5wKrRKfV3Ls9Pn1VHk3xJM5ZX8qgJU5oom4g6zmeoq9BPUqueSgWpMFWcrL5xLs7bhaizXku3DepgHmaf4s2diq5ICc86eddiFb5j3xdqJCarPbY9c5rdWOVCdG4zvcDe5CQzd",
            "cf2f9eb6-8a65-464d-accf-06b1385c3f4a",
            "2022-05-13T19:56:04.000000+09:00",
            "2022-06-20T02:18:04.000000+09:00",
            842,
            "external-transaction"
        )
                .applicableShopIds(new String[]{"131c4a5f-1f0d-4df7-a841-0e1eee8087ac"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test1() throws ConnectionError, ProcessingError {
        Request request = new CreateCampaign(
            "QxRkeqNQeXfWKRjr6QmO01AfgQug0zp9uYT1ZMdJ8n2O7iUOn4U5u1AWGcysVn2YV4SaLwr46b7NtGRvPXwqG1ADL6KaWpMPK1FW5wKrRKfV3Ls9Pn1VHk3xJM5ZX8qgJU5oom4g6zmeoq9BPUqueSgWpMFWcrL5xLs7bhaizXku3DepgHmaf4s2diq5ICc86eddiFb5j3xdqJCarPbY9c5rdWOVCdG4zvcDe5CQzd",
            "cf2f9eb6-8a65-464d-accf-06b1385c3f4a",
            "2022-05-13T19:56:04.000000+09:00",
            "2022-06-20T02:18:04.000000+09:00",
            842,
            "external-transaction"
        )
                .applicableShopIds(new String[]{"b83cad29-c3a4-42a5-a036-68a36b3a3d67","5caa8208-aa21-45c3-8e40-69298048dd71","c4a6057d-ea84-44d4-aeca-1ae95e416c3a","590af2eb-8b10-4e37-b004-381e1f9e03a5","049b4f86-5b5f-459f-915a-8f33a95a326a","c17f426d-e9c1-4481-9428-f0102c98611a"})
                .bearPointShopId("1190d2c6-234a-4913-a856-97cb9ec85850");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test2() throws ConnectionError, ProcessingError {
        Request request = new CreateCampaign(
            "QxRkeqNQeXfWKRjr6QmO01AfgQug0zp9uYT1ZMdJ8n2O7iUOn4U5u1AWGcysVn2YV4SaLwr46b7NtGRvPXwqG1ADL6KaWpMPK1FW5wKrRKfV3Ls9Pn1VHk3xJM5ZX8qgJU5oom4g6zmeoq9BPUqueSgWpMFWcrL5xLs7bhaizXku3DepgHmaf4s2diq5ICc86eddiFb5j3xdqJCarPbY9c5rdWOVCdG4zvcDe5CQzd",
            "cf2f9eb6-8a65-464d-accf-06b1385c3f4a",
            "2022-05-13T19:56:04.000000+09:00",
            "2022-06-20T02:18:04.000000+09:00",
            842,
            "external-transaction"
        )
                .applicableShopIds(new String[]{"12ba5e72-dcf1-479f-85ca-3f1f8760c361","47249c55-1fcb-41fc-857e-08547f9c3084","10150ecb-cec3-4b2b-b2cc-5181f22a731a","fa8dbcd0-e04b-431e-928b-2a4ace33fa6f","d4b69829-68ee-43e8-bb67-94057e0d29f2","c600e555-b06f-44d2-aa18-40abda53b331","f137baba-9518-41de-a0c8-762c3fcacc8d","944acc66-9d54-44d8-bc90-8652571b98e5","dab387de-7763-4276-8107-9df30107de05","3aa7c4f1-cc91-45b2-bd3f-5b7f4c586751"})
                .description("bBn4ECRvkVvjelSfydmVrDT2TkgymPuGYKDDMCVTXvp76nQuUWFekh5dIRXHd")
                .bearPointShopId("5aa71264-8564-4320-b3c0-bb5bda0d642b");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test3() throws ConnectionError, ProcessingError {
        Request request = new CreateCampaign(
            "QxRkeqNQeXfWKRjr6QmO01AfgQug0zp9uYT1ZMdJ8n2O7iUOn4U5u1AWGcysVn2YV4SaLwr46b7NtGRvPXwqG1ADL6KaWpMPK1FW5wKrRKfV3Ls9Pn1VHk3xJM5ZX8qgJU5oom4g6zmeoq9BPUqueSgWpMFWcrL5xLs7bhaizXku3DepgHmaf4s2diq5ICc86eddiFb5j3xdqJCarPbY9c5rdWOVCdG4zvcDe5CQzd",
            "cf2f9eb6-8a65-464d-accf-06b1385c3f4a",
            "2022-05-13T19:56:04.000000+09:00",
            "2022-06-20T02:18:04.000000+09:00",
            842,
            "external-transaction"
        )
                .applicableShopIds(new String[]{"de2591db-17f4-4bea-ad7d-e3ae6643e6ec","6bbc8b29-3269-4e77-8525-60b136d68452","8fdf3ac0-6752-4040-be6f-07a22fde21a6","ec8a07ee-b60d-4a0b-9cd2-1fa6daee1ed9","4c60ec3b-1191-4abc-859f-a625cc2b3223","caa72f7f-937b-42b1-93f5-2ae8cdf347d4"})
                .status("enabled")
                .description("FYCqLHsar8vgSGw9OqMX4Gve5uDlgj8oIMYvZ8MhyhheB13pUsmTwGw13B7K83gs90lq2wM04w2SVxn4qqhZuQv17bkjEKO3IMjPilzfAUsYEBo9xG32mkDPxHkel9TZ4uBbK6lGd8GBhKIabQQzGkbZT1cfRn22IOs5aTAvhKeyt")
                .bearPointShopId("30cf6824-b782-498d-a9c8-129275dd0ef6");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test4() throws ConnectionError, ProcessingError {
        Request request = new CreateCampaign(
            "QxRkeqNQeXfWKRjr6QmO01AfgQug0zp9uYT1ZMdJ8n2O7iUOn4U5u1AWGcysVn2YV4SaLwr46b7NtGRvPXwqG1ADL6KaWpMPK1FW5wKrRKfV3Ls9Pn1VHk3xJM5ZX8qgJU5oom4g6zmeoq9BPUqueSgWpMFWcrL5xLs7bhaizXku3DepgHmaf4s2diq5ICc86eddiFb5j3xdqJCarPbY9c5rdWOVCdG4zvcDe5CQzd",
            "cf2f9eb6-8a65-464d-accf-06b1385c3f4a",
            "2022-05-13T19:56:04.000000+09:00",
            "2022-06-20T02:18:04.000000+09:00",
            842,
            "external-transaction"
        )
                .applicableShopIds(new String[]{"af5106c3-3e34-4f47-9ad5-a3e71dbd9fbb","664837fc-7112-46fa-9e7a-9252da9c9908","4593a862-1e73-4854-abcc-f6208041395e","29c285b5-986c-4c4a-b28e-2f9a7efd20ec"})
                .pointExpiresAt("2021-07-19T13:33:42.000000+09:00")
                .status("disabled")
                .description("YaEMjEfkd0pJmKh1M1PJ4h5o70IGqcay8xfP6Iuru1VNS9BSYirJi0eEmroQjGg1Wr2ildNeuGfl67zeprnl2kcPXgSJ43DZWwRxufPqlgPerDLyEuxX151zWZnTuaABWekUmbDuS3vg1ta76kXUTQNnfhhwyUPCusWUoyiJMGlMZNqluHRdu9")
                .bearPointShopId("3ec6a46a-80ac-47b9-a78c-5ff1a56ccef2");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test5() throws ConnectionError, ProcessingError {
        Request request = new CreateCampaign(
            "QxRkeqNQeXfWKRjr6QmO01AfgQug0zp9uYT1ZMdJ8n2O7iUOn4U5u1AWGcysVn2YV4SaLwr46b7NtGRvPXwqG1ADL6KaWpMPK1FW5wKrRKfV3Ls9Pn1VHk3xJM5ZX8qgJU5oom4g6zmeoq9BPUqueSgWpMFWcrL5xLs7bhaizXku3DepgHmaf4s2diq5ICc86eddiFb5j3xdqJCarPbY9c5rdWOVCdG4zvcDe5CQzd",
            "cf2f9eb6-8a65-464d-accf-06b1385c3f4a",
            "2022-05-13T19:56:04.000000+09:00",
            "2022-06-20T02:18:04.000000+09:00",
            842,
            "external-transaction"
        )
                .applicableShopIds(new String[]{"f877eafe-8e76-44ce-a10c-36c1e8e682f6","ef29fb0f-b558-4b15-831e-164fd98fa523","b27af9c1-f86a-489f-b7b9-f2a81de2fb79"})
                .pointExpiresInDays(9897)
                .pointExpiresAt("2022-03-01T13:05:41.000000+09:00")
                .status("enabled")
                .description("SK2bg9BMogj5g7mPozaDrc0TruBYv3kFwWRJg0rNiQ9jvKxvqioYOYnQvGV5kEEvE5cd4vPFDtrqZ3eivXoYkS0z87LTTwk84dEnkZojpYJ5yMw7MvDdG8JD9FnEqrjHwcIDF12XNUCkSzMumxVFxJqI")
                .bearPointShopId("1ccda3cb-74d0-470e-94f4-4efd982a00cb");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test6() throws ConnectionError, ProcessingError {
        Request request = new CreateCampaign(
            "QxRkeqNQeXfWKRjr6QmO01AfgQug0zp9uYT1ZMdJ8n2O7iUOn4U5u1AWGcysVn2YV4SaLwr46b7NtGRvPXwqG1ADL6KaWpMPK1FW5wKrRKfV3Ls9Pn1VHk3xJM5ZX8qgJU5oom4g6zmeoq9BPUqueSgWpMFWcrL5xLs7bhaizXku3DepgHmaf4s2diq5ICc86eddiFb5j3xdqJCarPbY9c5rdWOVCdG4zvcDe5CQzd",
            "cf2f9eb6-8a65-464d-accf-06b1385c3f4a",
            "2022-05-13T19:56:04.000000+09:00",
            "2022-06-20T02:18:04.000000+09:00",
            842,
            "external-transaction"
        )
                .applicableShopIds(new String[]{"17807797-a534-4a10-95a2-f311a825627d","6b65b108-87ff-4a4e-9b4e-c4c89609b812","5ff2dda4-a77e-4e2a-9d29-19bbed1f1f3b","7c9d2a63-bbd4-4178-9cab-4a648ebe33b1","d0229131-7402-486c-a6e1-60c0964324e8","07be0407-fd83-4032-818a-43c96b49312a","31633574-60f2-484c-beb3-8c12032f80d4","24e613ab-d157-4d2c-a299-07d2e4a4f2c3","ad271e50-50ad-4474-833b-c3a0a318fc4c","c1859f47-6308-4e2e-877d-df34c1b28581"})
                .setExclusive(false)
                .pointExpiresInDays(6466)
                .pointExpiresAt("2021-11-06T17:08:00.000000+09:00")
                .status("disabled")
                .description("CWJXKeZAtzCE0KCCOH0CMhPL3jSUteGchGhpczwaKXYEdyJVEerSLdKgXnuV8A3CJS4JRKMvc9SK12I38pdFJapOYqchYHit3XE2zCtUxUgGqD6zMQAoUUXU7AKsTrsYNzE")
                .bearPointShopId("d355a847-865f-44bc-adbb-a5f01bf7fc17");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test7() throws ConnectionError, ProcessingError {
        Request request = new CreateCampaign(
            "QxRkeqNQeXfWKRjr6QmO01AfgQug0zp9uYT1ZMdJ8n2O7iUOn4U5u1AWGcysVn2YV4SaLwr46b7NtGRvPXwqG1ADL6KaWpMPK1FW5wKrRKfV3Ls9Pn1VHk3xJM5ZX8qgJU5oom4g6zmeoq9BPUqueSgWpMFWcrL5xLs7bhaizXku3DepgHmaf4s2diq5ICc86eddiFb5j3xdqJCarPbY9c5rdWOVCdG4zvcDe5CQzd",
            "cf2f9eb6-8a65-464d-accf-06b1385c3f4a",
            "2022-05-13T19:56:04.000000+09:00",
            "2022-06-20T02:18:04.000000+09:00",
            842,
            "external-transaction"
        )
                .applicableShopIds(new String[]{"690989a0-865d-462d-bfd9-f344e9a183b9","761cf79e-f01e-4fc5-ad30-133b7fe3c6cd"})
                .subject("money")
                .setExclusive(true)
                .pointExpiresInDays(3933)
                .pointExpiresAt("2022-01-12T15:15:35.000000+09:00")
                .status("enabled")
                .description("dgYRNcCuuy5QNQxeWHbz3QmO4pw48Vy6tgNEDpyuR6QjDvxJ4pLWMioLG8UKlPpUpdSygO")
                .bearPointShopId("258c884a-904b-44c5-9ae9-59dd2bac918d");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test8() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("subject_more_than_or_equal", 1000);
        items.addProperty("subject_less_than", 5000);
        JsonObject items2 = new JsonObject();
        items2.addProperty("point_amount", 5);
        items2.addProperty("point_amount_unit", "percent");
        items2.addProperty("subject_more_than_or_equal", 1000);
        items2.addProperty("subject_less_than", 5000);
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("subject_more_than_or_equal", 1000);
        items3.addProperty("subject_less_than", 5000);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("subject_more_than_or_equal", 1000);
        items4.addProperty("subject_less_than", 5000);
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("subject_more_than_or_equal", 1000);
        items5.addProperty("subject_less_than", 5000);
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("subject_more_than_or_equal", 1000);
        items6.addProperty("subject_less_than", 5000);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("subject_more_than_or_equal", 1000);
        items7.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "QxRkeqNQeXfWKRjr6QmO01AfgQug0zp9uYT1ZMdJ8n2O7iUOn4U5u1AWGcysVn2YV4SaLwr46b7NtGRvPXwqG1ADL6KaWpMPK1FW5wKrRKfV3Ls9Pn1VHk3xJM5ZX8qgJU5oom4g6zmeoq9BPUqueSgWpMFWcrL5xLs7bhaizXku3DepgHmaf4s2diq5ICc86eddiFb5j3xdqJCarPbY9c5rdWOVCdG4zvcDe5CQzd",
            "cf2f9eb6-8a65-464d-accf-06b1385c3f4a",
            "2022-05-13T19:56:04.000000+09:00",
            "2022-06-20T02:18:04.000000+09:00",
            842,
            "external-transaction"
        )
                .applicableShopIds(new String[]{"47be637e-4cb4-4285-a057-4f86777a7af4","15464574-44c1-4ea0-bf9d-f40158e8288e","6b79f5f1-4cb9-4e08-a60e-2d9f5652432f"})
                .amountBasedPointRules(new Object[]{items,items2,items3,items4,items5,items6,items7})
                .subject("all")
                .setExclusive(true)
                .pointExpiresInDays(3624)
                .pointExpiresAt("2022-07-22T10:10:29.000000+09:00")
                .status("disabled")
                .description("CtXovY3VnO3x4FM8EX1vqdjORQdJfB")
                .bearPointShopId("d5fa145f-3798-41a6-8658-72bbbeafa5af");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test9() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("product_code", "4912345678904");
        items.addProperty("is_multiply_by_count", true);
        items.addProperty("required_count", 2);
        JsonObject items2 = new JsonObject();
        items2.addProperty("point_amount", 5);
        items2.addProperty("point_amount_unit", "percent");
        items2.addProperty("product_code", "4912345678904");
        items2.addProperty("is_multiply_by_count", true);
        items2.addProperty("required_count", 2);
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("is_multiply_by_count", true);
        items3.addProperty("required_count", 2);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("is_multiply_by_count", true);
        items4.addProperty("required_count", 2);
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("subject_more_than_or_equal", 1000);
        items5.addProperty("subject_less_than", 5000);
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("subject_more_than_or_equal", 1000);
        items6.addProperty("subject_less_than", 5000);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("subject_more_than_or_equal", 1000);
        items7.addProperty("subject_less_than", 5000);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("subject_more_than_or_equal", 1000);
        items8.addProperty("subject_less_than", 5000);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("subject_more_than_or_equal", 1000);
        items9.addProperty("subject_less_than", 5000);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("subject_more_than_or_equal", 1000);
        items10.addProperty("subject_less_than", 5000);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("subject_more_than_or_equal", 1000);
        items11.addProperty("subject_less_than", 5000);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("subject_more_than_or_equal", 1000);
        items12.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "QxRkeqNQeXfWKRjr6QmO01AfgQug0zp9uYT1ZMdJ8n2O7iUOn4U5u1AWGcysVn2YV4SaLwr46b7NtGRvPXwqG1ADL6KaWpMPK1FW5wKrRKfV3Ls9Pn1VHk3xJM5ZX8qgJU5oom4g6zmeoq9BPUqueSgWpMFWcrL5xLs7bhaizXku3DepgHmaf4s2diq5ICc86eddiFb5j3xdqJCarPbY9c5rdWOVCdG4zvcDe5CQzd",
            "cf2f9eb6-8a65-464d-accf-06b1385c3f4a",
            "2022-05-13T19:56:04.000000+09:00",
            "2022-06-20T02:18:04.000000+09:00",
            842,
            "external-transaction"
        )
                .applicableShopIds(new String[]{"6e378036-0d33-407b-8e64-d69c94d373cc","59e0c928-f573-4430-be74-10d50b4d5ab2","161be565-4ceb-4da1-8cf9-5684eb889bdb","8ff5d1df-c79f-451a-91e6-b72a33d8636d","3a5394e9-7fbc-458e-a344-14050b667f6c","3c2e6ae7-3414-44a0-a325-df522396b1e3","93d0a4d8-c0d8-4a5a-be40-cf1506243997","63879bb8-5ba9-4eb6-907f-b0809160a731","91e86c2d-49ee-412d-a91c-ee53c30271c2"})
                .productBasedPointRules(new Object[]{items,items2,items3,items4})
                .amountBasedPointRules(new Object[]{items5,items6,items7,items8,items9,items10,items11,items12})
                .subject("all")
                .setExclusive(true)
                .pointExpiresInDays(9521)
                .pointExpiresAt("2023-06-08T07:08:28.000000+09:00")
                .status("enabled")
                .description("tGoZmLmyYX3fH5yPE3HbVQW")
                .bearPointShopId("e63671bd-c752-4635-8f8e-e1db2804fbfe");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test10() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("product_code", "4912345678904");
        items.addProperty("classification_code", "c123");
        JsonObject items2 = new JsonObject();
        items2.addProperty("product_code", "4912345678904");
        items2.addProperty("classification_code", "c123");
        JsonObject items3 = new JsonObject();
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("classification_code", "c123");
        JsonObject items4 = new JsonObject();
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("classification_code", "c123");
        JsonObject items5 = new JsonObject();
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("classification_code", "c123");
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("is_multiply_by_count", true);
        items6.addProperty("required_count", 2);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("is_multiply_by_count", true);
        items7.addProperty("required_count", 2);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("is_multiply_by_count", true);
        items8.addProperty("required_count", 2);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("is_multiply_by_count", true);
        items9.addProperty("required_count", 2);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("subject_more_than_or_equal", 1000);
        items14.addProperty("subject_less_than", 5000);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("subject_more_than_or_equal", 1000);
        items15.addProperty("subject_less_than", 5000);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("subject_more_than_or_equal", 1000);
        items16.addProperty("subject_less_than", 5000);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("subject_more_than_or_equal", 1000);
        items17.addProperty("subject_less_than", 5000);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("subject_more_than_or_equal", 1000);
        items18.addProperty("subject_less_than", 5000);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("subject_more_than_or_equal", 1000);
        items19.addProperty("subject_less_than", 5000);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("subject_more_than_or_equal", 1000);
        items20.addProperty("subject_less_than", 5000);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("subject_more_than_or_equal", 1000);
        items21.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "QxRkeqNQeXfWKRjr6QmO01AfgQug0zp9uYT1ZMdJ8n2O7iUOn4U5u1AWGcysVn2YV4SaLwr46b7NtGRvPXwqG1ADL6KaWpMPK1FW5wKrRKfV3Ls9Pn1VHk3xJM5ZX8qgJU5oom4g6zmeoq9BPUqueSgWpMFWcrL5xLs7bhaizXku3DepgHmaf4s2diq5ICc86eddiFb5j3xdqJCarPbY9c5rdWOVCdG4zvcDe5CQzd",
            "cf2f9eb6-8a65-464d-accf-06b1385c3f4a",
            "2022-05-13T19:56:04.000000+09:00",
            "2022-06-20T02:18:04.000000+09:00",
            842,
            "external-transaction"
        )
                .applicableShopIds(new String[]{"547be5c2-dbe0-41ab-a06b-08cee2fc3b67","d310a1d3-7ea3-435e-8c52-d74b80fa4d49","cdcccc1f-5a3a-4a9c-803a-0a3894dcd8ed","f86bb144-fbac-4547-8a8d-5dc55d625606","52a7b1d5-bcdc-49a9-a2bd-8959b3170d76","a5d23183-a5ac-4ff1-8825-a0e80ba163ed","5bb2a0ea-b1be-4a7e-a767-ee3241a7098c","5539ce88-b65c-4c1b-8238-149d054eb209"})
                .blacklistedProductRules(new Object[]{items,items2,items3,items4,items5})
                .productBasedPointRules(new Object[]{items6,items7,items8,items9,items10,items11,items12,items13})
                .amountBasedPointRules(new Object[]{items14,items15,items16,items17,items18,items19,items20,items21})
                .subject("money")
                .setExclusive(true)
                .pointExpiresInDays(1573)
                .pointExpiresAt("2023-05-03T20:53:15.000000+09:00")
                .status("disabled")
                .description("v9I2uMQpQ4dmFrnuFbw0gGla6j1KOcU57wXDLVOSwfi621kKR2QM76rTi5rvh80Dw6TO5Re0iWpIXuq0sQcc")
                .bearPointShopId("b4b1838f-9c0d-4b20-b712-23b909204bdf");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test11() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("product_code", "4912345678904");
        items.addProperty("classification_code", "c123");
        JsonObject items2 = new JsonObject();
        items2.addProperty("product_code", "4912345678904");
        items2.addProperty("classification_code", "c123");
        JsonObject items3 = new JsonObject();
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("classification_code", "c123");
        JsonObject items4 = new JsonObject();
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("classification_code", "c123");
        JsonObject items5 = new JsonObject();
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("classification_code", "c123");
        JsonObject items6 = new JsonObject();
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("classification_code", "c123");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("classification_code", "c123");
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("is_multiply_by_count", true);
        items16.addProperty("required_count", 2);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("is_multiply_by_count", true);
        items17.addProperty("required_count", 2);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("product_code", "4912345678904");
        items18.addProperty("is_multiply_by_count", true);
        items18.addProperty("required_count", 2);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("product_code", "4912345678904");
        items19.addProperty("is_multiply_by_count", true);
        items19.addProperty("required_count", 2);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("subject_more_than_or_equal", 1000);
        items20.addProperty("subject_less_than", 5000);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("subject_more_than_or_equal", 1000);
        items21.addProperty("subject_less_than", 5000);
        JsonObject items22 = new JsonObject();
        items22.addProperty("point_amount", 5);
        items22.addProperty("point_amount_unit", "percent");
        items22.addProperty("subject_more_than_or_equal", 1000);
        items22.addProperty("subject_less_than", 5000);
        JsonObject items23 = new JsonObject();
        items23.addProperty("point_amount", 5);
        items23.addProperty("point_amount_unit", "percent");
        items23.addProperty("subject_more_than_or_equal", 1000);
        items23.addProperty("subject_less_than", 5000);
        JsonObject items24 = new JsonObject();
        items24.addProperty("point_amount", 5);
        items24.addProperty("point_amount_unit", "percent");
        items24.addProperty("subject_more_than_or_equal", 1000);
        items24.addProperty("subject_less_than", 5000);
        JsonObject items25 = new JsonObject();
        items25.addProperty("point_amount", 5);
        items25.addProperty("point_amount_unit", "percent");
        items25.addProperty("subject_more_than_or_equal", 1000);
        items25.addProperty("subject_less_than", 5000);
        JsonObject items26 = new JsonObject();
        items26.addProperty("point_amount", 5);
        items26.addProperty("point_amount_unit", "percent");
        items26.addProperty("subject_more_than_or_equal", 1000);
        items26.addProperty("subject_less_than", 5000);
        JsonObject items27 = new JsonObject();
        items27.addProperty("point_amount", 5);
        items27.addProperty("point_amount_unit", "percent");
        items27.addProperty("subject_more_than_or_equal", 1000);
        items27.addProperty("subject_less_than", 5000);
        JsonObject items28 = new JsonObject();
        items28.addProperty("point_amount", 5);
        items28.addProperty("point_amount_unit", "percent");
        items28.addProperty("subject_more_than_or_equal", 1000);
        items28.addProperty("subject_less_than", 5000);
        JsonObject items29 = new JsonObject();
        items29.addProperty("point_amount", 5);
        items29.addProperty("point_amount_unit", "percent");
        items29.addProperty("subject_more_than_or_equal", 1000);
        items29.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "QxRkeqNQeXfWKRjr6QmO01AfgQug0zp9uYT1ZMdJ8n2O7iUOn4U5u1AWGcysVn2YV4SaLwr46b7NtGRvPXwqG1ADL6KaWpMPK1FW5wKrRKfV3Ls9Pn1VHk3xJM5ZX8qgJU5oom4g6zmeoq9BPUqueSgWpMFWcrL5xLs7bhaizXku3DepgHmaf4s2diq5ICc86eddiFb5j3xdqJCarPbY9c5rdWOVCdG4zvcDe5CQzd",
            "cf2f9eb6-8a65-464d-accf-06b1385c3f4a",
            "2022-05-13T19:56:04.000000+09:00",
            "2022-06-20T02:18:04.000000+09:00",
            842,
            "external-transaction"
        )
                .applicableShopIds(new String[]{"448acc73-e300-4e75-9b9b-9b459ac2fa72","379b812c-3742-4661-a67d-c5c4ac8fca0e","bea87d45-695c-4b4d-bb7b-7e0836e18fb0","c67d49a0-93df-419e-bfb7-c9254e36d670","5d167bb5-b99d-4be0-89db-67c19f83038f","bdbb5cba-09ff-4667-8380-0b09ae821dc7","fa6a0066-05f8-4396-877f-bcf1156bac3e"})
                .applicableDaysOfWeek(new Integer[]{2,5,3,6,6,2,6,0,5})
                .blacklistedProductRules(new Object[]{items,items2,items3,items4,items5,items6,items7,items8,items9,items10})
                .productBasedPointRules(new Object[]{items11,items12,items13,items14,items15,items16,items17,items18,items19})
                .amountBasedPointRules(new Object[]{items20,items21,items22,items23,items24,items25,items26,items27,items28,items29})
                .subject("all")
                .setExclusive(true)
                .pointExpiresInDays(9870)
                .pointExpiresAt("2023-10-03T04:15:11.000000+09:00")
                .status("enabled")
                .description("A51XgHhfP3jkVYoAJT7xuB")
                .bearPointShopId("7d4286d8-034b-4b76-a127-1c6eaf15da96");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test12() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("classification_code", "c123");
        JsonObject items11 = new JsonObject();
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("classification_code", "c123");
        JsonObject items12 = new JsonObject();
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("classification_code", "c123");
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("is_multiply_by_count", true);
        items16.addProperty("required_count", 2);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("is_multiply_by_count", true);
        items17.addProperty("required_count", 2);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("product_code", "4912345678904");
        items18.addProperty("is_multiply_by_count", true);
        items18.addProperty("required_count", 2);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("subject_more_than_or_equal", 1000);
        items19.addProperty("subject_less_than", 5000);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("subject_more_than_or_equal", 1000);
        items20.addProperty("subject_less_than", 5000);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("subject_more_than_or_equal", 1000);
        items21.addProperty("subject_less_than", 5000);
        JsonObject items22 = new JsonObject();
        items22.addProperty("point_amount", 5);
        items22.addProperty("point_amount_unit", "percent");
        items22.addProperty("subject_more_than_or_equal", 1000);
        items22.addProperty("subject_less_than", 5000);
        JsonObject items23 = new JsonObject();
        items23.addProperty("point_amount", 5);
        items23.addProperty("point_amount_unit", "percent");
        items23.addProperty("subject_more_than_or_equal", 1000);
        items23.addProperty("subject_less_than", 5000);
        JsonObject items24 = new JsonObject();
        items24.addProperty("point_amount", 5);
        items24.addProperty("point_amount_unit", "percent");
        items24.addProperty("subject_more_than_or_equal", 1000);
        items24.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "QxRkeqNQeXfWKRjr6QmO01AfgQug0zp9uYT1ZMdJ8n2O7iUOn4U5u1AWGcysVn2YV4SaLwr46b7NtGRvPXwqG1ADL6KaWpMPK1FW5wKrRKfV3Ls9Pn1VHk3xJM5ZX8qgJU5oom4g6zmeoq9BPUqueSgWpMFWcrL5xLs7bhaizXku3DepgHmaf4s2diq5ICc86eddiFb5j3xdqJCarPbY9c5rdWOVCdG4zvcDe5CQzd",
            "cf2f9eb6-8a65-464d-accf-06b1385c3f4a",
            "2022-05-13T19:56:04.000000+09:00",
            "2022-06-20T02:18:04.000000+09:00",
            842,
            "external-transaction"
        )
                .applicableShopIds(new String[]{"5d763d3e-5d31-4441-a6de-4508f430b845","ee168f3b-8f51-4d18-9ebe-56f348eff3eb","dc63aad8-7d7d-4e85-aa28-0f938a347c37","101f7f32-1471-41e7-a73c-571a31a13065"})
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5,items6})
                .applicableDaysOfWeek(new Integer[]{0})
                .blacklistedProductRules(new Object[]{items7,items8,items9,items10,items11,items12})
                .productBasedPointRules(new Object[]{items13,items14,items15,items16,items17,items18})
                .amountBasedPointRules(new Object[]{items19,items20,items21,items22,items23,items24})
                .subject("money")
                .setExclusive(true)
                .pointExpiresInDays(2946)
                .pointExpiresAt("2023-05-21T13:51:04.000000+09:00")
                .status("enabled")
                .description("bYzCTDZgX6SwM1ckwgSEedDzp6vJcXzpUkF0Lg34E9xlj24Bj1Y4frbZ9nKHYHsqPP3NvVNkhMg4FyrdGztccAf5AMYM4JiREMp5OJiCp6MKkt6UAF582cuyB9kbAEeMTgIJNZlpIQ16")
                .bearPointShopId("a343ecbe-bb8a-4bff-85b3-01c81e4a5f77");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test13() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("from", "12:00");
        items7.addProperty("to", "23:59");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("is_multiply_by_count", true);
        items9.addProperty("required_count", 2);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("subject_more_than_or_equal", 1000);
        items10.addProperty("subject_less_than", 5000);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("subject_more_than_or_equal", 1000);
        items11.addProperty("subject_less_than", 5000);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("subject_more_than_or_equal", 1000);
        items12.addProperty("subject_less_than", 5000);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("subject_more_than_or_equal", 1000);
        items13.addProperty("subject_less_than", 5000);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("subject_more_than_or_equal", 1000);
        items14.addProperty("subject_less_than", 5000);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("subject_more_than_or_equal", 1000);
        items15.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "QxRkeqNQeXfWKRjr6QmO01AfgQug0zp9uYT1ZMdJ8n2O7iUOn4U5u1AWGcysVn2YV4SaLwr46b7NtGRvPXwqG1ADL6KaWpMPK1FW5wKrRKfV3Ls9Pn1VHk3xJM5ZX8qgJU5oom4g6zmeoq9BPUqueSgWpMFWcrL5xLs7bhaizXku3DepgHmaf4s2diq5ICc86eddiFb5j3xdqJCarPbY9c5rdWOVCdG4zvcDe5CQzd",
            "cf2f9eb6-8a65-464d-accf-06b1385c3f4a",
            "2022-05-13T19:56:04.000000+09:00",
            "2022-06-20T02:18:04.000000+09:00",
            842,
            "external-transaction"
        )
                .applicableShopIds(new String[]{"80d38dd7-c81b-406e-a518-7621590679e1","dd728a3f-bb62-4de4-b235-0ce52ed72170","e6c7cd62-6944-4a4d-aea4-bbe03daa20f3","501beb7d-4130-4947-b3d5-aa29e9a2bad3","fe2a9c39-80c2-465d-8fb4-81b02330958f","279f18d6-d711-4a27-a1a2-029213078de8","6f49c75f-fc03-433b-8fe6-bd2675c9b2e8","c5183eb2-e688-497e-a59c-a013575973ea","4eb3f1d8-d1ed-4662-b79e-4f1f15ffea38","a4a5fe99-dd31-4371-8619-0b63dffc3632"})
                .minimumNumberOfProducts(994)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5,items6,items7})
                .applicableDaysOfWeek(new Integer[]{4,3,2,3,5,4,1,3})
                .blacklistedProductRules(new Object[]{items8})
                .productBasedPointRules(new Object[]{items9})
                .amountBasedPointRules(new Object[]{items10,items11,items12,items13,items14,items15})
                .subject("money")
                .setExclusive(true)
                .pointExpiresInDays(9890)
                .pointExpiresAt("2023-03-18T11:07:41.000000+09:00")
                .status("disabled")
                .description("ixchceeusZm6p1r7c9LB0EGu69e0Ii0c033N3YvjJ0K03dbdii7gi79I5ulbjMkLnIzRHU0bcf1pPClzafkkpnKaPYFoOifRkbsu0NZUXt2b6Mti4DSRajTzMN3mucLjOitJm0MxCbfRdBMTPKJcdlAFSy8ozI")
                .bearPointShopId("22a9f520-578e-4b12-9637-1ef41d69c2ed");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test14() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("from", "12:00");
        items7.addProperty("to", "23:59");
        JsonObject items8 = new JsonObject();
        items8.addProperty("from", "12:00");
        items8.addProperty("to", "23:59");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("classification_code", "c123");
        JsonObject items11 = new JsonObject();
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("classification_code", "c123");
        JsonObject items12 = new JsonObject();
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("classification_code", "c123");
        JsonObject items13 = new JsonObject();
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("classification_code", "c123");
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("is_multiply_by_count", true);
        items16.addProperty("required_count", 2);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("is_multiply_by_count", true);
        items17.addProperty("required_count", 2);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("subject_more_than_or_equal", 1000);
        items18.addProperty("subject_less_than", 5000);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("subject_more_than_or_equal", 1000);
        items19.addProperty("subject_less_than", 5000);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("subject_more_than_or_equal", 1000);
        items20.addProperty("subject_less_than", 5000);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("subject_more_than_or_equal", 1000);
        items21.addProperty("subject_less_than", 5000);
        JsonObject items22 = new JsonObject();
        items22.addProperty("point_amount", 5);
        items22.addProperty("point_amount_unit", "percent");
        items22.addProperty("subject_more_than_or_equal", 1000);
        items22.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "QxRkeqNQeXfWKRjr6QmO01AfgQug0zp9uYT1ZMdJ8n2O7iUOn4U5u1AWGcysVn2YV4SaLwr46b7NtGRvPXwqG1ADL6KaWpMPK1FW5wKrRKfV3Ls9Pn1VHk3xJM5ZX8qgJU5oom4g6zmeoq9BPUqueSgWpMFWcrL5xLs7bhaizXku3DepgHmaf4s2diq5ICc86eddiFb5j3xdqJCarPbY9c5rdWOVCdG4zvcDe5CQzd",
            "cf2f9eb6-8a65-464d-accf-06b1385c3f4a",
            "2022-05-13T19:56:04.000000+09:00",
            "2022-06-20T02:18:04.000000+09:00",
            842,
            "external-transaction"
        )
                .applicableShopIds(new String[]{"3dd82ef1-3b0e-45ce-8e55-e1e9d014ff2f","67717df0-9b6b-4d5a-8bca-0b3b87b89374","fb198d36-cb73-4b49-9fac-311c5edfb9e1","4bfa75b4-cd05-46d1-b14e-7cf4db49d0a0","263afd07-c218-49e9-a841-cfe09d1b1d6b","3276f78d-84d2-43f6-817c-bc22fcc37676"})
                .minimumNumberOfAmount(8844)
                .minimumNumberOfProducts(9154)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5,items6,items7,items8})
                .applicableDaysOfWeek(new Integer[]{2,5,6,6,5})
                .blacklistedProductRules(new Object[]{items9,items10,items11,items12,items13})
                .productBasedPointRules(new Object[]{items14,items15,items16,items17})
                .amountBasedPointRules(new Object[]{items18,items19,items20,items21,items22})
                .subject("money")
                .setExclusive(true)
                .pointExpiresInDays(5391)
                .pointExpiresAt("2021-12-23T05:44:46.000000+09:00")
                .status("enabled")
                .description("FmafX6nnLIgoG3jv6l9X5bOb9qoOQ4Z")
                .bearPointShopId("d3a58581-cecd-440a-ba32-d4d0c86166d6");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test15() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("classification_code", "c123");
        JsonObject items6 = new JsonObject();
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("classification_code", "c123");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("is_multiply_by_count", true);
        items8.addProperty("required_count", 2);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("is_multiply_by_count", true);
        items9.addProperty("required_count", 2);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("subject_more_than_or_equal", 1000);
        items11.addProperty("subject_less_than", 5000);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("subject_more_than_or_equal", 1000);
        items12.addProperty("subject_less_than", 5000);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("subject_more_than_or_equal", 1000);
        items13.addProperty("subject_less_than", 5000);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("subject_more_than_or_equal", 1000);
        items14.addProperty("subject_less_than", 5000);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("subject_more_than_or_equal", 1000);
        items15.addProperty("subject_less_than", 5000);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("subject_more_than_or_equal", 1000);
        items16.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "QxRkeqNQeXfWKRjr6QmO01AfgQug0zp9uYT1ZMdJ8n2O7iUOn4U5u1AWGcysVn2YV4SaLwr46b7NtGRvPXwqG1ADL6KaWpMPK1FW5wKrRKfV3Ls9Pn1VHk3xJM5ZX8qgJU5oom4g6zmeoq9BPUqueSgWpMFWcrL5xLs7bhaizXku3DepgHmaf4s2diq5ICc86eddiFb5j3xdqJCarPbY9c5rdWOVCdG4zvcDe5CQzd",
            "cf2f9eb6-8a65-464d-accf-06b1385c3f4a",
            "2022-05-13T19:56:04.000000+09:00",
            "2022-06-20T02:18:04.000000+09:00",
            842,
            "external-transaction"
        )
                .applicableShopIds(new String[]{"3eaec4d7-c400-4e91-b29f-8ece9f674388","21a67e4d-5803-47ea-9f0b-ecfb78241301","ac003377-0cea-494a-a365-f890f39b87ae","09326126-baee-433a-809f-88a508aa0065","0502f77b-9018-4fec-a35b-1ee2c73aa2f8"})
                .minimumNumberForCombinationPurchase(7564)
                .minimumNumberOfAmount(4363)
                .minimumNumberOfProducts(5136)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4})
                .applicableDaysOfWeek(new Integer[]{2,6,1,5,1,2,2,4,0})
                .blacklistedProductRules(new Object[]{items5,items6,items7})
                .productBasedPointRules(new Object[]{items8,items9,items10})
                .amountBasedPointRules(new Object[]{items11,items12,items13,items14,items15,items16})
                .subject("money")
                .setExclusive(true)
                .pointExpiresInDays(4175)
                .pointExpiresAt("2020-07-16T21:48:08.000000+09:00")
                .status("disabled")
                .description("EMtuQsnKJ6fI1faMHv5jikiXtiAgf548AW4qjjrKLOjckoiOfica")
                .bearPointShopId("c832586b-da9d-4e7c-8797-a06f7395d915");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test16() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("classification_code", "c123");
        JsonObject items4 = new JsonObject();
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("classification_code", "c123");
        JsonObject items5 = new JsonObject();
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("classification_code", "c123");
        JsonObject items6 = new JsonObject();
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("classification_code", "c123");
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("is_multiply_by_count", true);
        items7.addProperty("required_count", 2);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("is_multiply_by_count", true);
        items8.addProperty("required_count", 2);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("is_multiply_by_count", true);
        items9.addProperty("required_count", 2);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("subject_more_than_or_equal", 1000);
        items12.addProperty("subject_less_than", 5000);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("subject_more_than_or_equal", 1000);
        items13.addProperty("subject_less_than", 5000);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("subject_more_than_or_equal", 1000);
        items14.addProperty("subject_less_than", 5000);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("subject_more_than_or_equal", 1000);
        items15.addProperty("subject_less_than", 5000);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("subject_more_than_or_equal", 1000);
        items16.addProperty("subject_less_than", 5000);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("subject_more_than_or_equal", 1000);
        items17.addProperty("subject_less_than", 5000);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("subject_more_than_or_equal", 1000);
        items18.addProperty("subject_less_than", 5000);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("subject_more_than_or_equal", 1000);
        items19.addProperty("subject_less_than", 5000);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("subject_more_than_or_equal", 1000);
        items20.addProperty("subject_less_than", 5000);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("subject_more_than_or_equal", 1000);
        items21.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "QxRkeqNQeXfWKRjr6QmO01AfgQug0zp9uYT1ZMdJ8n2O7iUOn4U5u1AWGcysVn2YV4SaLwr46b7NtGRvPXwqG1ADL6KaWpMPK1FW5wKrRKfV3Ls9Pn1VHk3xJM5ZX8qgJU5oom4g6zmeoq9BPUqueSgWpMFWcrL5xLs7bhaizXku3DepgHmaf4s2diq5ICc86eddiFb5j3xdqJCarPbY9c5rdWOVCdG4zvcDe5CQzd",
            "cf2f9eb6-8a65-464d-accf-06b1385c3f4a",
            "2022-05-13T19:56:04.000000+09:00",
            "2022-06-20T02:18:04.000000+09:00",
            842,
            "external-transaction"
        )
                .applicableShopIds(new String[]{"7421c55b-0771-4132-82ae-627d36043c99","559ad23a-5f92-4220-a5d2-e4dcdcb64269","5031d649-3249-44b7-9af8-ee19a592daa2","aab907c2-6d55-41d2-afc7-fa941157ceaf","9d119cb5-3f32-42f4-af28-4e342d51a2c3","355a0308-8d33-472b-8877-413fa0ce54db","c626e876-1a2a-40b2-b52e-46245e94ed40"})
                .existInEachProductGroups(false)
                .minimumNumberForCombinationPurchase(9195)
                .minimumNumberOfAmount(3381)
                .minimumNumberOfProducts(3806)
                .applicableTimeRanges(new Object[]{items,items2})
                .applicableDaysOfWeek(new Integer[]{2,5})
                .blacklistedProductRules(new Object[]{items3,items4,items5,items6})
                .productBasedPointRules(new Object[]{items7,items8,items9,items10,items11})
                .amountBasedPointRules(new Object[]{items12,items13,items14,items15,items16,items17,items18,items19,items20,items21})
                .subject("all")
                .setExclusive(true)
                .pointExpiresInDays(7377)
                .pointExpiresAt("2021-07-10T10:32:22.000000+09:00")
                .status("enabled")
                .description("tsjI7K9BwAbJjUaGezUyYovrvl8YusJMV17ZwGsbTFJmfHkiyYgWIXUfp1PYVAiwTvkVvE8HcOY2Jv6h8v3RZn1TAsWzq8JjkxApZialUtx")
                .bearPointShopId("9a74deea-0b72-42f5-bb7b-95e22299191e");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test17() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("from", "12:00");
        items7.addProperty("to", "23:59");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("classification_code", "c123");
        JsonObject items11 = new JsonObject();
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("classification_code", "c123");
        JsonObject items12 = new JsonObject();
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("classification_code", "c123");
        JsonObject items13 = new JsonObject();
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("classification_code", "c123");
        JsonObject items14 = new JsonObject();
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("classification_code", "c123");
        JsonObject items15 = new JsonObject();
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("classification_code", "c123");
        JsonObject items16 = new JsonObject();
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("classification_code", "c123");
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("is_multiply_by_count", true);
        items17.addProperty("required_count", 2);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("product_code", "4912345678904");
        items18.addProperty("is_multiply_by_count", true);
        items18.addProperty("required_count", 2);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("product_code", "4912345678904");
        items19.addProperty("is_multiply_by_count", true);
        items19.addProperty("required_count", 2);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("product_code", "4912345678904");
        items20.addProperty("is_multiply_by_count", true);
        items20.addProperty("required_count", 2);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("product_code", "4912345678904");
        items21.addProperty("is_multiply_by_count", true);
        items21.addProperty("required_count", 2);
        JsonObject items22 = new JsonObject();
        items22.addProperty("point_amount", 5);
        items22.addProperty("point_amount_unit", "percent");
        items22.addProperty("product_code", "4912345678904");
        items22.addProperty("is_multiply_by_count", true);
        items22.addProperty("required_count", 2);
        JsonObject items23 = new JsonObject();
        items23.addProperty("point_amount", 5);
        items23.addProperty("point_amount_unit", "percent");
        items23.addProperty("product_code", "4912345678904");
        items23.addProperty("is_multiply_by_count", true);
        items23.addProperty("required_count", 2);
        JsonObject items24 = new JsonObject();
        items24.addProperty("point_amount", 5);
        items24.addProperty("point_amount_unit", "percent");
        items24.addProperty("product_code", "4912345678904");
        items24.addProperty("is_multiply_by_count", true);
        items24.addProperty("required_count", 2);
        JsonObject items25 = new JsonObject();
        items25.addProperty("point_amount", 5);
        items25.addProperty("point_amount_unit", "percent");
        items25.addProperty("product_code", "4912345678904");
        items25.addProperty("is_multiply_by_count", true);
        items25.addProperty("required_count", 2);
        JsonObject items26 = new JsonObject();
        items26.addProperty("point_amount", 5);
        items26.addProperty("point_amount_unit", "percent");
        items26.addProperty("subject_more_than_or_equal", 1000);
        items26.addProperty("subject_less_than", 5000);
        JsonObject items27 = new JsonObject();
        items27.addProperty("point_amount", 5);
        items27.addProperty("point_amount_unit", "percent");
        items27.addProperty("subject_more_than_or_equal", 1000);
        items27.addProperty("subject_less_than", 5000);
        JsonObject items28 = new JsonObject();
        items28.addProperty("point_amount", 5);
        items28.addProperty("point_amount_unit", "percent");
        items28.addProperty("subject_more_than_or_equal", 1000);
        items28.addProperty("subject_less_than", 5000);
        JsonObject items29 = new JsonObject();
        items29.addProperty("point_amount", 5);
        items29.addProperty("point_amount_unit", "percent");
        items29.addProperty("subject_more_than_or_equal", 1000);
        items29.addProperty("subject_less_than", 5000);
        JsonObject items30 = new JsonObject();
        items30.addProperty("point_amount", 5);
        items30.addProperty("point_amount_unit", "percent");
        items30.addProperty("subject_more_than_or_equal", 1000);
        items30.addProperty("subject_less_than", 5000);
        JsonObject items31 = new JsonObject();
        items31.addProperty("point_amount", 5);
        items31.addProperty("point_amount_unit", "percent");
        items31.addProperty("subject_more_than_or_equal", 1000);
        items31.addProperty("subject_less_than", 5000);
        JsonObject items32 = new JsonObject();
        items32.addProperty("point_amount", 5);
        items32.addProperty("point_amount_unit", "percent");
        items32.addProperty("subject_more_than_or_equal", 1000);
        items32.addProperty("subject_less_than", 5000);
        JsonObject items33 = new JsonObject();
        items33.addProperty("point_amount", 5);
        items33.addProperty("point_amount_unit", "percent");
        items33.addProperty("subject_more_than_or_equal", 1000);
        items33.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "QxRkeqNQeXfWKRjr6QmO01AfgQug0zp9uYT1ZMdJ8n2O7iUOn4U5u1AWGcysVn2YV4SaLwr46b7NtGRvPXwqG1ADL6KaWpMPK1FW5wKrRKfV3Ls9Pn1VHk3xJM5ZX8qgJU5oom4g6zmeoq9BPUqueSgWpMFWcrL5xLs7bhaizXku3DepgHmaf4s2diq5ICc86eddiFb5j3xdqJCarPbY9c5rdWOVCdG4zvcDe5CQzd",
            "cf2f9eb6-8a65-464d-accf-06b1385c3f4a",
            "2022-05-13T19:56:04.000000+09:00",
            "2022-06-20T02:18:04.000000+09:00",
            842,
            "external-transaction"
        )
                .applicableShopIds(new String[]{"4f6d4864-b943-4775-93ea-c7257434715b","331da5e9-5ba7-4c5b-bc4d-43435fa97ab6","23204733-57bf-4a75-a18e-7a1ab223e0d6","39fb1278-7ac8-4949-a439-cdcf58dd08d4","59379651-c91f-4908-943e-55d31e01e58a","4490a28f-5fce-4b00-ac39-194b395bbd64","498147cf-b07f-4d1f-b65d-0261a5b1faa9","b4005968-a34d-47d4-942b-a98a75e3b2f2","81ca5521-881b-4372-ae17-3cac71d76676"})
                .maxPointAmount(3606)
                .existInEachProductGroups(true)
                .minimumNumberForCombinationPurchase(7175)
                .minimumNumberOfAmount(7518)
                .minimumNumberOfProducts(1956)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5,items6,items7})
                .applicableDaysOfWeek(new Integer[]{0,5,3,0,4,1,0})
                .blacklistedProductRules(new Object[]{items8,items9,items10,items11,items12,items13,items14,items15,items16})
                .productBasedPointRules(new Object[]{items17,items18,items19,items20,items21,items22,items23,items24,items25})
                .amountBasedPointRules(new Object[]{items26,items27,items28,items29,items30,items31,items32,items33})
                .subject("all")
                .setExclusive(false)
                .pointExpiresInDays(5427)
                .pointExpiresAt("2021-10-07T05:05:50.000000+09:00")
                .status("enabled")
                .description("fY7EjdMqmIFpPTa3wyp9Ecz0awf0Ln5R1eQzvpSQgJS0Q7voWg8FrYbp2RxSQ6nBkTdERjtuwEoUAmCGXApjY9jdHluuhnttXGQ4wFRUGcRhkWCI0EkX7t")
                .bearPointShopId("ca1c3770-953a-4ba0-9ce3-445b0f3d4e53");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test18() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("classification_code", "c123");
        JsonObject items4 = new JsonObject();
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("classification_code", "c123");
        JsonObject items5 = new JsonObject();
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("classification_code", "c123");
        JsonObject items6 = new JsonObject();
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("classification_code", "c123");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("classification_code", "c123");
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("subject_more_than_or_equal", 1000);
        items12.addProperty("subject_less_than", 5000);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("subject_more_than_or_equal", 1000);
        items13.addProperty("subject_less_than", 5000);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("subject_more_than_or_equal", 1000);
        items14.addProperty("subject_less_than", 5000);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("subject_more_than_or_equal", 1000);
        items15.addProperty("subject_less_than", 5000);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("subject_more_than_or_equal", 1000);
        items16.addProperty("subject_less_than", 5000);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("subject_more_than_or_equal", 1000);
        items17.addProperty("subject_less_than", 5000);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("subject_more_than_or_equal", 1000);
        items18.addProperty("subject_less_than", 5000);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("subject_more_than_or_equal", 1000);
        items19.addProperty("subject_less_than", 5000);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("subject_more_than_or_equal", 1000);
        items20.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "QxRkeqNQeXfWKRjr6QmO01AfgQug0zp9uYT1ZMdJ8n2O7iUOn4U5u1AWGcysVn2YV4SaLwr46b7NtGRvPXwqG1ADL6KaWpMPK1FW5wKrRKfV3Ls9Pn1VHk3xJM5ZX8qgJU5oom4g6zmeoq9BPUqueSgWpMFWcrL5xLs7bhaizXku3DepgHmaf4s2diq5ICc86eddiFb5j3xdqJCarPbY9c5rdWOVCdG4zvcDe5CQzd",
            "cf2f9eb6-8a65-464d-accf-06b1385c3f4a",
            "2022-05-13T19:56:04.000000+09:00",
            "2022-06-20T02:18:04.000000+09:00",
            842,
            "external-transaction"
        )
                .applicableShopIds(new String[]{"512e1da7-d4b0-4e17-8c83-36bb42cf3563","1088806b-facb-4893-b9e0-98c28b90f37f","604d8b2e-c698-4edb-91aa-de3434f33739","139e707f-f592-4c53-b38c-f9c72f13aae0","900c4c06-50bb-4b42-aebc-c59d952dfe0b","ebfb4609-594f-4577-9a7e-072a1714e8bd","a70fb20a-f75c-493c-998b-4666a0f60912"})
                .maxTotalPointAmount(4482)
                .maxPointAmount(7565)
                .existInEachProductGroups(true)
                .minimumNumberForCombinationPurchase(20)
                .minimumNumberOfAmount(9728)
                .minimumNumberOfProducts(4885)
                .applicableTimeRanges(new Object[]{items,items2})
                .applicableDaysOfWeek(new Integer[]{4})
                .blacklistedProductRules(new Object[]{items3,items4,items5,items6,items7,items8,items9,items10})
                .productBasedPointRules(new Object[]{items11})
                .amountBasedPointRules(new Object[]{items12,items13,items14,items15,items16,items17,items18,items19,items20})
                .subject("all")
                .setExclusive(false)
                .pointExpiresInDays(7635)
                .pointExpiresAt("2021-10-18T00:07:02.000000+09:00")
                .status("enabled")
                .description("VZ8OtgMgIHaTUNwoa3xAD2OyrlvlpI2ssy0ef0J3SF1CQIhRcTeKC0KvuUOrtbunwXCkhwA3Cmj4u8Ze6uPf77c1ZsvFnp5b4DGkpUyyylQr8e9NMBBpK2fW8G6mX7hXc9rl3iDN7Bo2cXQBn5DsEO9OjAGJ7")
                .bearPointShopId("b3f547aa-a4cd-4716-bb28-4ac73dea7e66");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test19() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("classification_code", "c123");
        JsonObject items5 = new JsonObject();
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("classification_code", "c123");
        JsonObject items6 = new JsonObject();
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("classification_code", "c123");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("classification_code", "c123");
        JsonObject items11 = new JsonObject();
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("classification_code", "c123");
        JsonObject items12 = new JsonObject();
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("classification_code", "c123");
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("is_multiply_by_count", true);
        items16.addProperty("required_count", 2);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("is_multiply_by_count", true);
        items17.addProperty("required_count", 2);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("product_code", "4912345678904");
        items18.addProperty("is_multiply_by_count", true);
        items18.addProperty("required_count", 2);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("product_code", "4912345678904");
        items19.addProperty("is_multiply_by_count", true);
        items19.addProperty("required_count", 2);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("product_code", "4912345678904");
        items20.addProperty("is_multiply_by_count", true);
        items20.addProperty("required_count", 2);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("product_code", "4912345678904");
        items21.addProperty("is_multiply_by_count", true);
        items21.addProperty("required_count", 2);
        JsonObject items22 = new JsonObject();
        items22.addProperty("point_amount", 5);
        items22.addProperty("point_amount_unit", "percent");
        items22.addProperty("product_code", "4912345678904");
        items22.addProperty("is_multiply_by_count", true);
        items22.addProperty("required_count", 2);
        JsonObject items23 = new JsonObject();
        items23.addProperty("point_amount", 5);
        items23.addProperty("point_amount_unit", "percent");
        items23.addProperty("subject_more_than_or_equal", 1000);
        items23.addProperty("subject_less_than", 5000);
        JsonObject items24 = new JsonObject();
        items24.addProperty("point_amount", 5);
        items24.addProperty("point_amount_unit", "percent");
        items24.addProperty("subject_more_than_or_equal", 1000);
        items24.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "QxRkeqNQeXfWKRjr6QmO01AfgQug0zp9uYT1ZMdJ8n2O7iUOn4U5u1AWGcysVn2YV4SaLwr46b7NtGRvPXwqG1ADL6KaWpMPK1FW5wKrRKfV3Ls9Pn1VHk3xJM5ZX8qgJU5oom4g6zmeoq9BPUqueSgWpMFWcrL5xLs7bhaizXku3DepgHmaf4s2diq5ICc86eddiFb5j3xdqJCarPbY9c5rdWOVCdG4zvcDe5CQzd",
            "cf2f9eb6-8a65-464d-accf-06b1385c3f4a",
            "2022-05-13T19:56:04.000000+09:00",
            "2022-06-20T02:18:04.000000+09:00",
            842,
            "external-transaction"
        )
                .applicableShopIds(new String[]{"505be5f5-8d3b-4bec-b3cd-aa3b6dfbfca0","4e4ef7a2-15ef-4c81-a7dc-848cdfd7dadb","3b7bfc02-2ddd-4f9f-9e37-18be273911b5","7a26e708-3bb9-4034-803f-fd157f904d9a","557088a6-ae5f-4661-9a10-f7f3d5e542d9","d6b02089-b4e7-4b61-a528-ef9b139a2bf1","9d137203-92db-4c86-acd7-759a75841058","7abc2b5d-d93f-4513-8e9d-90c7a254141b","dd25975f-0916-4142-a670-b8481cf59e4a","241ed62f-8cf3-45fc-a3d5-308b007766f2"})
                .destPrivateMoneyId("2558febc-c79c-4c79-a74b-449747d5dd97")
                .maxTotalPointAmount(1124)
                .maxPointAmount(910)
                .existInEachProductGroups(false)
                .minimumNumberForCombinationPurchase(6595)
                .minimumNumberOfAmount(9502)
                .minimumNumberOfProducts(4633)
                .applicableTimeRanges(new Object[]{items,items2,items3})
                .applicableDaysOfWeek(new Integer[]{3})
                .blacklistedProductRules(new Object[]{items4,items5,items6,items7,items8,items9,items10,items11,items12})
                .productBasedPointRules(new Object[]{items13,items14,items15,items16,items17,items18,items19,items20,items21,items22})
                .amountBasedPointRules(new Object[]{items23,items24})
                .subject("all")
                .setExclusive(true)
                .pointExpiresInDays(2134)
                .pointExpiresAt("2020-03-11T02:19:00.000000+09:00")
                .status("enabled")
                .description("2C")
                .bearPointShopId("d07085a4-021a-49c7-bbb5-c2979e82714e");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test20() throws ConnectionError, ProcessingError {
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("classification_code", "c123");
        JsonObject items6 = new JsonObject();
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("classification_code", "c123");
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("is_multiply_by_count", true);
        items7.addProperty("required_count", 2);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("is_multiply_by_count", true);
        items8.addProperty("required_count", 2);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("is_multiply_by_count", true);
        items9.addProperty("required_count", 2);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("subject_more_than_or_equal", 1000);
        items13.addProperty("subject_less_than", 5000);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("subject_more_than_or_equal", 1000);
        items14.addProperty("subject_less_than", 5000);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("subject_more_than_or_equal", 1000);
        items15.addProperty("subject_less_than", 5000);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("subject_more_than_or_equal", 1000);
        items16.addProperty("subject_less_than", 5000);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("subject_more_than_or_equal", 1000);
        items17.addProperty("subject_less_than", 5000);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("subject_more_than_or_equal", 1000);
        items18.addProperty("subject_less_than", 5000);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("subject_more_than_or_equal", 1000);
        items19.addProperty("subject_less_than", 5000);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("subject_more_than_or_equal", 1000);
        items20.addProperty("subject_less_than", 5000);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("subject_more_than_or_equal", 1000);
        items21.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "QxRkeqNQeXfWKRjr6QmO01AfgQug0zp9uYT1ZMdJ8n2O7iUOn4U5u1AWGcysVn2YV4SaLwr46b7NtGRvPXwqG1ADL6KaWpMPK1FW5wKrRKfV3Ls9Pn1VHk3xJM5ZX8qgJU5oom4g6zmeoq9BPUqueSgWpMFWcrL5xLs7bhaizXku3DepgHmaf4s2diq5ICc86eddiFb5j3xdqJCarPbY9c5rdWOVCdG4zvcDe5CQzd",
            "cf2f9eb6-8a65-464d-accf-06b1385c3f4a",
            "2022-05-13T19:56:04.000000+09:00",
            "2022-06-20T02:18:04.000000+09:00",
            842,
            "external-transaction"
        )
                .applicableShopIds(new String[]{"6e4f0f1f-f3cf-4ede-8eda-afe7d772dc25","7667d162-a095-460b-9a3c-60a83ed2c756"})
                .applicableAccountMetadata(applicable_account_metadata)
                .destPrivateMoneyId("60f2b81f-4955-49fb-b316-5acea5f405e7")
                .maxTotalPointAmount(8824)
                .maxPointAmount(9061)
                .existInEachProductGroups(false)
                .minimumNumberForCombinationPurchase(3758)
                .minimumNumberOfAmount(6010)
                .minimumNumberOfProducts(5707)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4})
                .applicableDaysOfWeek(new Integer[]{0,1,2})
                .blacklistedProductRules(new Object[]{items5,items6})
                .productBasedPointRules(new Object[]{items7,items8,items9,items10,items11,items12})
                .amountBasedPointRules(new Object[]{items13,items14,items15,items16,items17,items18,items19,items20,items21})
                .subject("all")
                .setExclusive(false)
                .pointExpiresInDays(8861)
                .pointExpiresAt("2020-08-10T05:23:41.000000+09:00")
                .status("disabled")
                .description("31kBwwi8sjZcMW5Zq0qRh")
                .bearPointShopId("208d2e04-77c5-432a-86a5-2a037015e7d1");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test21() throws ConnectionError, ProcessingError {
        JsonObject applicable_transaction_metadata = new JsonObject();
        applicable_transaction_metadata.addProperty("key", "rank");
        applicable_transaction_metadata.addProperty("value", "bronze");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("from", "12:00");
        items7.addProperty("to", "23:59");
        JsonObject items8 = new JsonObject();
        items8.addProperty("from", "12:00");
        items8.addProperty("to", "23:59");
        JsonObject items9 = new JsonObject();
        items9.addProperty("from", "12:00");
        items9.addProperty("to", "23:59");
        JsonObject items10 = new JsonObject();
        items10.addProperty("from", "12:00");
        items10.addProperty("to", "23:59");
        JsonObject items11 = new JsonObject();
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("classification_code", "c123");
        JsonObject items12 = new JsonObject();
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("classification_code", "c123");
        JsonObject items13 = new JsonObject();
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("classification_code", "c123");
        JsonObject items14 = new JsonObject();
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("classification_code", "c123");
        JsonObject items15 = new JsonObject();
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("classification_code", "c123");
        JsonObject items16 = new JsonObject();
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("classification_code", "c123");
        JsonObject items17 = new JsonObject();
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("classification_code", "c123");
        JsonObject items18 = new JsonObject();
        items18.addProperty("product_code", "4912345678904");
        items18.addProperty("classification_code", "c123");
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("product_code", "4912345678904");
        items19.addProperty("is_multiply_by_count", true);
        items19.addProperty("required_count", 2);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("product_code", "4912345678904");
        items20.addProperty("is_multiply_by_count", true);
        items20.addProperty("required_count", 2);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("product_code", "4912345678904");
        items21.addProperty("is_multiply_by_count", true);
        items21.addProperty("required_count", 2);
        JsonObject items22 = new JsonObject();
        items22.addProperty("point_amount", 5);
        items22.addProperty("point_amount_unit", "percent");
        items22.addProperty("subject_more_than_or_equal", 1000);
        items22.addProperty("subject_less_than", 5000);
        JsonObject items23 = new JsonObject();
        items23.addProperty("point_amount", 5);
        items23.addProperty("point_amount_unit", "percent");
        items23.addProperty("subject_more_than_or_equal", 1000);
        items23.addProperty("subject_less_than", 5000);
        JsonObject items24 = new JsonObject();
        items24.addProperty("point_amount", 5);
        items24.addProperty("point_amount_unit", "percent");
        items24.addProperty("subject_more_than_or_equal", 1000);
        items24.addProperty("subject_less_than", 5000);
        JsonObject items25 = new JsonObject();
        items25.addProperty("point_amount", 5);
        items25.addProperty("point_amount_unit", "percent");
        items25.addProperty("subject_more_than_or_equal", 1000);
        items25.addProperty("subject_less_than", 5000);
        JsonObject items26 = new JsonObject();
        items26.addProperty("point_amount", 5);
        items26.addProperty("point_amount_unit", "percent");
        items26.addProperty("subject_more_than_or_equal", 1000);
        items26.addProperty("subject_less_than", 5000);
        JsonObject items27 = new JsonObject();
        items27.addProperty("point_amount", 5);
        items27.addProperty("point_amount_unit", "percent");
        items27.addProperty("subject_more_than_or_equal", 1000);
        items27.addProperty("subject_less_than", 5000);
        JsonObject items28 = new JsonObject();
        items28.addProperty("point_amount", 5);
        items28.addProperty("point_amount_unit", "percent");
        items28.addProperty("subject_more_than_or_equal", 1000);
        items28.addProperty("subject_less_than", 5000);
        JsonObject items29 = new JsonObject();
        items29.addProperty("point_amount", 5);
        items29.addProperty("point_amount_unit", "percent");
        items29.addProperty("subject_more_than_or_equal", 1000);
        items29.addProperty("subject_less_than", 5000);
        JsonObject items30 = new JsonObject();
        items30.addProperty("point_amount", 5);
        items30.addProperty("point_amount_unit", "percent");
        items30.addProperty("subject_more_than_or_equal", 1000);
        items30.addProperty("subject_less_than", 5000);
        JsonObject items31 = new JsonObject();
        items31.addProperty("point_amount", 5);
        items31.addProperty("point_amount_unit", "percent");
        items31.addProperty("subject_more_than_or_equal", 1000);
        items31.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "QxRkeqNQeXfWKRjr6QmO01AfgQug0zp9uYT1ZMdJ8n2O7iUOn4U5u1AWGcysVn2YV4SaLwr46b7NtGRvPXwqG1ADL6KaWpMPK1FW5wKrRKfV3Ls9Pn1VHk3xJM5ZX8qgJU5oom4g6zmeoq9BPUqueSgWpMFWcrL5xLs7bhaizXku3DepgHmaf4s2diq5ICc86eddiFb5j3xdqJCarPbY9c5rdWOVCdG4zvcDe5CQzd",
            "cf2f9eb6-8a65-464d-accf-06b1385c3f4a",
            "2022-05-13T19:56:04.000000+09:00",
            "2022-06-20T02:18:04.000000+09:00",
            842,
            "external-transaction"
        )
                .applicableShopIds(new String[]{"2fb23907-cf3a-4d6b-99b0-074c5885e19d","4b120dcb-8753-4446-aacb-d8743424a0a9","ff4df0b8-1ea3-4e03-b75b-c62cd6d2490e","508c0080-30bb-475d-a293-3219518a0e13","c6894268-7334-41d6-ac53-9895051c90db","b50250cc-673a-4d8c-87f3-d392c986be19"})
                .applicableTransactionMetadata(applicable_transaction_metadata)
                .applicableAccountMetadata(applicable_account_metadata)
                .destPrivateMoneyId("28072ff5-c38f-475d-9f08-7b7ee1547f8d")
                .maxTotalPointAmount(4014)
                .maxPointAmount(5594)
                .existInEachProductGroups(true)
                .minimumNumberForCombinationPurchase(587)
                .minimumNumberOfAmount(3473)
                .minimumNumberOfProducts(9095)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5,items6,items7,items8,items9,items10})
                .applicableDaysOfWeek(new Integer[]{3,1,2,3,2,4})
                .blacklistedProductRules(new Object[]{items11,items12,items13,items14,items15,items16,items17,items18})
                .productBasedPointRules(new Object[]{items19,items20,items21})
                .amountBasedPointRules(new Object[]{items22,items23,items24,items25,items26,items27,items28,items29,items30,items31})
                .subject("all")
                .setExclusive(false)
                .pointExpiresInDays(1204)
                .pointExpiresAt("2023-04-21T03:30:50.000000+09:00")
                .status("disabled")
                .description("wrwOfVgp9sbUidlnGEh14OTt7zKX4oUtgWFl83yX69")
                .bearPointShopId("aeb12020-c6fd-46b7-84ee-eeb344691b58");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test22() throws ConnectionError, ProcessingError {
        JsonObject applicable_transaction_metadata = new JsonObject();
        applicable_transaction_metadata.addProperty("key", "rank");
        applicable_transaction_metadata.addProperty("value", "bronze");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("from", "12:00");
        items7.addProperty("to", "23:59");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("classification_code", "c123");
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("subject_more_than_or_equal", 1000);
        items14.addProperty("subject_less_than", 5000);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("subject_more_than_or_equal", 1000);
        items15.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "QxRkeqNQeXfWKRjr6QmO01AfgQug0zp9uYT1ZMdJ8n2O7iUOn4U5u1AWGcysVn2YV4SaLwr46b7NtGRvPXwqG1ADL6KaWpMPK1FW5wKrRKfV3Ls9Pn1VHk3xJM5ZX8qgJU5oom4g6zmeoq9BPUqueSgWpMFWcrL5xLs7bhaizXku3DepgHmaf4s2diq5ICc86eddiFb5j3xdqJCarPbY9c5rdWOVCdG4zvcDe5CQzd",
            "cf2f9eb6-8a65-464d-accf-06b1385c3f4a",
            "2022-05-13T19:56:04.000000+09:00",
            "2022-06-20T02:18:04.000000+09:00",
            842,
            "external-transaction"
        )
                .applicableShopIds(new String[]{"8876f8a0-e29c-4b0a-ad6e-112da8039552","c54c4696-a5d3-42e4-884a-007d7d13b172","9b6bb231-e545-4d6f-8728-4cbe2966f131","226d4b9a-8c6e-4b4e-bc0d-c431767f1c2e","e29dec31-2ddc-46f9-a488-12e3143b2cba","220584b6-68e5-4031-9f78-1e5724ed103f","24f6f43f-420f-4c36-96ae-1a180225e970","de84c9c1-9d8e-4ff3-9a00-ff17dc5ddd08","6fee673c-d022-468c-b33e-2b7b4c58bdf8"})
                .budgetCapsAmount(974126884)
                .applicableTransactionMetadata(applicable_transaction_metadata)
                .applicableAccountMetadata(applicable_account_metadata)
                .destPrivateMoneyId("c89985fc-fca1-4f61-8af5-74f3229686f2")
                .maxTotalPointAmount(7615)
                .maxPointAmount(8115)
                .existInEachProductGroups(true)
                .minimumNumberForCombinationPurchase(5335)
                .minimumNumberOfAmount(7305)
                .minimumNumberOfProducts(2448)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5,items6,items7})
                .applicableDaysOfWeek(new Integer[]{2,1,4,5})
                .blacklistedProductRules(new Object[]{items8,items9,items10})
                .productBasedPointRules(new Object[]{items11,items12,items13})
                .amountBasedPointRules(new Object[]{items14,items15})
                .subject("all")
                .setExclusive(true)
                .pointExpiresInDays(2247)
                .pointExpiresAt("2023-10-06T04:47:27.000000+09:00")
                .status("disabled")
                .description("hKOcmZRod6BJ0qzYzNvCj1bSnbBMX1ncKOMIo49oge2TLNWPMCj1qqzNGOLV861wuOWsDjYfR2tlBaZV17HcFZcMfkDl8wyfPOkzTg7uiU")
                .bearPointShopId("29ca93cb-75a1-4d7f-b17e-e26ddf288ab6");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test23() throws ConnectionError, ProcessingError {
        Request request = new CreateCampaign(
            "QxRkeqNQeXfWKRjr6QmO01AfgQug0zp9uYT1ZMdJ8n2O7iUOn4U5u1AWGcysVn2YV4SaLwr46b7NtGRvPXwqG1ADL6KaWpMPK1FW5wKrRKfV3Ls9Pn1VHk3xJM5ZX8qgJU5oom4g6zmeoq9BPUqueSgWpMFWcrL5xLs7bhaizXku3DepgHmaf4s2diq5ICc86eddiFb5j3xdqJCarPbY9c5rdWOVCdG4zvcDe5CQzd",
            "cf2f9eb6-8a65-464d-accf-06b1385c3f4a",
            "2022-05-13T19:56:04.000000+09:00",
            "2022-06-20T02:18:04.000000+09:00",
            842,
            "external-transaction"
        )
                .blacklistedShopIds(new String[]{"bdc00457-f347-4806-a648-5bb8486ab300","750d3608-3430-4dda-ac9c-676ca427f2cc","1f8070bd-61cb-4120-a672-17ad2f4a2e7a","e18f46f1-7193-4c16-a465-b21e4a410928","3f72ac5b-75aa-4ce1-b0be-3d0617b29ffd","895bdd42-0e91-4427-b523-1a709f2d719b","9f637717-a3b2-425c-bc3b-d0654693e915","db84ce91-e0c1-4bfb-a051-be102e1367bb","c9c37260-382a-4b3a-946e-f1488e2fed57"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test24() throws ConnectionError, ProcessingError {
        Request request = new CreateCampaign(
            "QxRkeqNQeXfWKRjr6QmO01AfgQug0zp9uYT1ZMdJ8n2O7iUOn4U5u1AWGcysVn2YV4SaLwr46b7NtGRvPXwqG1ADL6KaWpMPK1FW5wKrRKfV3Ls9Pn1VHk3xJM5ZX8qgJU5oom4g6zmeoq9BPUqueSgWpMFWcrL5xLs7bhaizXku3DepgHmaf4s2diq5ICc86eddiFb5j3xdqJCarPbY9c5rdWOVCdG4zvcDe5CQzd",
            "cf2f9eb6-8a65-464d-accf-06b1385c3f4a",
            "2022-05-13T19:56:04.000000+09:00",
            "2022-06-20T02:18:04.000000+09:00",
            842,
            "external-transaction"
        )
                .blacklistedShopIds(new String[]{"8088ce97-152a-47b6-8e68-499b24f68cec","3d190656-9a8d-4eb2-ac1b-13455b03fb1f","5c49d634-cdd9-4710-83bd-9ee8ca586f47","458862a2-3c9c-4bc8-bde0-7178dd159bb1","3aae9614-e383-40c0-b6fa-972b9f6d3769","40e1ddec-28ae-4c70-b8c8-63b9b8f0d592","f90b2bd1-8cac-4880-a498-3a8951e8aed9","cf3428ac-eb67-4cfb-b45d-8144447fba3a","4b342783-0626-4ade-85d4-64ee2b2984bc"})
                .bearPointShopId("c4498b78-a095-4172-9dbb-02e0a0a0a304");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test25() throws ConnectionError, ProcessingError {
        Request request = new CreateCampaign(
            "QxRkeqNQeXfWKRjr6QmO01AfgQug0zp9uYT1ZMdJ8n2O7iUOn4U5u1AWGcysVn2YV4SaLwr46b7NtGRvPXwqG1ADL6KaWpMPK1FW5wKrRKfV3Ls9Pn1VHk3xJM5ZX8qgJU5oom4g6zmeoq9BPUqueSgWpMFWcrL5xLs7bhaizXku3DepgHmaf4s2diq5ICc86eddiFb5j3xdqJCarPbY9c5rdWOVCdG4zvcDe5CQzd",
            "cf2f9eb6-8a65-464d-accf-06b1385c3f4a",
            "2022-05-13T19:56:04.000000+09:00",
            "2022-06-20T02:18:04.000000+09:00",
            842,
            "external-transaction"
        )
                .blacklistedShopIds(new String[]{"efb579f0-688f-4c32-84d5-f136a3098639","8e229bbc-65fe-4cc2-b6b3-7ab72f3dfebf","73e7c66f-1579-48b0-be22-2d595504f39f","1e2eb346-3e49-4118-93f7-f522f1608b80","83366e7f-6efc-4bc0-b96d-d20f46872348","36232a20-a401-404c-8beb-c61dc3d780df","d1d5e594-601c-4d0e-bda0-13ecd9e1f6ed","31806c5e-2f5a-46ed-9eb6-7089ed11c9a4"})
                .description("D410pufmqB2svaWXXE26OPELXpoBqzMwkhHvetC18LTiZpnLjhlGilW7x2Se0mf8DZTeCccS4tmKiZR8csozbhXa933mGk")
                .bearPointShopId("e8bb6b46-4f4c-40f7-b028-c442bdc5637a");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test26() throws ConnectionError, ProcessingError {
        Request request = new CreateCampaign(
            "QxRkeqNQeXfWKRjr6QmO01AfgQug0zp9uYT1ZMdJ8n2O7iUOn4U5u1AWGcysVn2YV4SaLwr46b7NtGRvPXwqG1ADL6KaWpMPK1FW5wKrRKfV3Ls9Pn1VHk3xJM5ZX8qgJU5oom4g6zmeoq9BPUqueSgWpMFWcrL5xLs7bhaizXku3DepgHmaf4s2diq5ICc86eddiFb5j3xdqJCarPbY9c5rdWOVCdG4zvcDe5CQzd",
            "cf2f9eb6-8a65-464d-accf-06b1385c3f4a",
            "2022-05-13T19:56:04.000000+09:00",
            "2022-06-20T02:18:04.000000+09:00",
            842,
            "external-transaction"
        )
                .blacklistedShopIds(new String[]{"7564fcf6-7ffd-41f6-8a59-3192d109bcbc","b73c0ff6-99bc-4e2f-83b9-a2e135b2afd4","52c432ae-069a-46cf-ab9a-d803fdb50b43","784067f6-5d96-4430-958f-adf43a5bdbc0","8cbc3d30-03f1-4bf7-8054-1ebfe80f95de","ca171999-1628-429a-92d6-c796a353f11c","90ad9e01-eb43-4501-b31e-e92cc0525685","6a53a66d-470e-4126-85fa-e6da11ec0abb"})
                .status("disabled")
                .description("oRNwCjehbQn1C40cZFn7oJlX5PBnka3mF8UBm6BoyYvUJrTABRqeL3467u3NoOmUP3XQhc2inJ264ApmEIfo4yDgw7T5InKbOQWHunsxWcMNQTZ9Xkc4mTpuBWC3Xola3FtK1WqfO0pGaNn9bhmuR1FCZhKsXoCVTXuZKq2S1dwvmQaV8r6hynzLwP9")
                .bearPointShopId("eea35462-8b28-4af4-bb1e-66379387e847");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test27() throws ConnectionError, ProcessingError {
        Request request = new CreateCampaign(
            "QxRkeqNQeXfWKRjr6QmO01AfgQug0zp9uYT1ZMdJ8n2O7iUOn4U5u1AWGcysVn2YV4SaLwr46b7NtGRvPXwqG1ADL6KaWpMPK1FW5wKrRKfV3Ls9Pn1VHk3xJM5ZX8qgJU5oom4g6zmeoq9BPUqueSgWpMFWcrL5xLs7bhaizXku3DepgHmaf4s2diq5ICc86eddiFb5j3xdqJCarPbY9c5rdWOVCdG4zvcDe5CQzd",
            "cf2f9eb6-8a65-464d-accf-06b1385c3f4a",
            "2022-05-13T19:56:04.000000+09:00",
            "2022-06-20T02:18:04.000000+09:00",
            842,
            "external-transaction"
        )
                .blacklistedShopIds(new String[]{"1b256d41-de80-451d-b724-1e8216c6335b","a38677f0-7b3c-44c4-879a-e54ce73cb489","b5a3bfd0-dca4-4b6e-8e03-5d0224a88acb","41db7210-9b64-4bac-a573-e4751ff1d9d3","137a8585-a412-4881-8411-32d8b92632c7","185c9c74-4093-49cf-a811-b0e41d4330d2"})
                .pointExpiresAt("2023-01-25T11:28:43.000000+09:00")
                .status("disabled")
                .description("yF8FtmTM8t5K4iS7vEk73qYz5Kuij2XfhctTCgCHa5qqm5UOn5ABtPH8oZbC1x")
                .bearPointShopId("e8b272b6-a74c-4040-bbda-9f14f6f6e77a");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test28() throws ConnectionError, ProcessingError {
        Request request = new CreateCampaign(
            "QxRkeqNQeXfWKRjr6QmO01AfgQug0zp9uYT1ZMdJ8n2O7iUOn4U5u1AWGcysVn2YV4SaLwr46b7NtGRvPXwqG1ADL6KaWpMPK1FW5wKrRKfV3Ls9Pn1VHk3xJM5ZX8qgJU5oom4g6zmeoq9BPUqueSgWpMFWcrL5xLs7bhaizXku3DepgHmaf4s2diq5ICc86eddiFb5j3xdqJCarPbY9c5rdWOVCdG4zvcDe5CQzd",
            "cf2f9eb6-8a65-464d-accf-06b1385c3f4a",
            "2022-05-13T19:56:04.000000+09:00",
            "2022-06-20T02:18:04.000000+09:00",
            842,
            "external-transaction"
        )
                .blacklistedShopIds(new String[]{"6b77956b-cebe-4931-b389-54e042f284c8","fbe2b6a1-2210-4881-8a49-a83eea3af435"})
                .pointExpiresInDays(8967)
                .pointExpiresAt("2020-09-23T08:14:57.000000+09:00")
                .status("disabled")
                .description("zdYimOKPdJfSnXJJjuwec6bkQQzFw12YgPsFXq7GqvXTk6XHi3S15NXynlxw9gU1YoVc9RI4GJ7J7dp7nvf8wWBTn56X8oT")
                .bearPointShopId("f23cfd3c-fff4-44b0-971c-00b4583d01aa");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test29() throws ConnectionError, ProcessingError {
        Request request = new CreateCampaign(
            "QxRkeqNQeXfWKRjr6QmO01AfgQug0zp9uYT1ZMdJ8n2O7iUOn4U5u1AWGcysVn2YV4SaLwr46b7NtGRvPXwqG1ADL6KaWpMPK1FW5wKrRKfV3Ls9Pn1VHk3xJM5ZX8qgJU5oom4g6zmeoq9BPUqueSgWpMFWcrL5xLs7bhaizXku3DepgHmaf4s2diq5ICc86eddiFb5j3xdqJCarPbY9c5rdWOVCdG4zvcDe5CQzd",
            "cf2f9eb6-8a65-464d-accf-06b1385c3f4a",
            "2022-05-13T19:56:04.000000+09:00",
            "2022-06-20T02:18:04.000000+09:00",
            842,
            "external-transaction"
        )
                .blacklistedShopIds(new String[]{"bb54a83b-499a-461a-94e2-40fabc04b2f6","272fab7d-e337-48a5-80f3-5915c686d22b","25c6a5e5-77d3-4c23-9423-0b72aece6142","a534a16f-17ac-4bce-98ae-1ef8f42ff31a","928f858d-449a-492c-b154-a637e3a3ee29","253af8ec-5a35-4af7-bc4e-99dc0f9f1440","e0405c0a-121c-4fde-8faf-4a69061d503e","03865818-902a-4f1a-8418-efbde87a16a6","0b399834-015d-4ed3-9b92-b8511a906ed6","92e65c60-831c-4eb6-91a3-0d811aa79fd3"})
                .setExclusive(true)
                .pointExpiresInDays(9087)
                .pointExpiresAt("2023-11-16T04:25:20.000000+09:00")
                .status("disabled")
                .description("5qiC9Nhapaalvet4Jh1J2m9WO78KxwhQyDrcDQyIZMzEnvLbstIe2fA543xdCMD2DF7Ash966AGHw6mhZN4QWFXTxZRHpHyrGdAsqDdKP9dwwd43")
                .bearPointShopId("d0202201-193c-4cb5-8823-ece75a4f7bf4");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test30() throws ConnectionError, ProcessingError {
        Request request = new CreateCampaign(
            "QxRkeqNQeXfWKRjr6QmO01AfgQug0zp9uYT1ZMdJ8n2O7iUOn4U5u1AWGcysVn2YV4SaLwr46b7NtGRvPXwqG1ADL6KaWpMPK1FW5wKrRKfV3Ls9Pn1VHk3xJM5ZX8qgJU5oom4g6zmeoq9BPUqueSgWpMFWcrL5xLs7bhaizXku3DepgHmaf4s2diq5ICc86eddiFb5j3xdqJCarPbY9c5rdWOVCdG4zvcDe5CQzd",
            "cf2f9eb6-8a65-464d-accf-06b1385c3f4a",
            "2022-05-13T19:56:04.000000+09:00",
            "2022-06-20T02:18:04.000000+09:00",
            842,
            "external-transaction"
        )
                .blacklistedShopIds(new String[]{"4fd524b9-1441-4c11-ae5a-26b182d26b70","7dac5fa4-9e78-4899-a6da-3f4d9cfa7090","3f71f2f7-b6a5-4e91-9786-87edcb805e9d","8ba3953b-c06f-482e-a0ee-ca00ef61427a","98661958-0943-458b-b07a-347001ad6bea","e5a6a0fe-3626-4ae5-b693-141c99aca1a3"})
                .subject("money")
                .setExclusive(false)
                .pointExpiresInDays(370)
                .pointExpiresAt("2021-01-30T00:05:39.000000+09:00")
                .status("enabled")
                .description("xg5HI9SUPfjRcuAukXDRWQKfcKceHD8g3Iv9StN1cfxdgIzhbhMfyhOWncXXSQMVjJjEzj")
                .bearPointShopId("82406ec8-66f3-44f7-9566-0da2a4540b5f");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test31() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("subject_more_than_or_equal", 1000);
        items.addProperty("subject_less_than", 5000);
        JsonObject items2 = new JsonObject();
        items2.addProperty("point_amount", 5);
        items2.addProperty("point_amount_unit", "percent");
        items2.addProperty("subject_more_than_or_equal", 1000);
        items2.addProperty("subject_less_than", 5000);
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("subject_more_than_or_equal", 1000);
        items3.addProperty("subject_less_than", 5000);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("subject_more_than_or_equal", 1000);
        items4.addProperty("subject_less_than", 5000);
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("subject_more_than_or_equal", 1000);
        items5.addProperty("subject_less_than", 5000);
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("subject_more_than_or_equal", 1000);
        items6.addProperty("subject_less_than", 5000);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("subject_more_than_or_equal", 1000);
        items7.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "QxRkeqNQeXfWKRjr6QmO01AfgQug0zp9uYT1ZMdJ8n2O7iUOn4U5u1AWGcysVn2YV4SaLwr46b7NtGRvPXwqG1ADL6KaWpMPK1FW5wKrRKfV3Ls9Pn1VHk3xJM5ZX8qgJU5oom4g6zmeoq9BPUqueSgWpMFWcrL5xLs7bhaizXku3DepgHmaf4s2diq5ICc86eddiFb5j3xdqJCarPbY9c5rdWOVCdG4zvcDe5CQzd",
            "cf2f9eb6-8a65-464d-accf-06b1385c3f4a",
            "2022-05-13T19:56:04.000000+09:00",
            "2022-06-20T02:18:04.000000+09:00",
            842,
            "external-transaction"
        )
                .blacklistedShopIds(new String[]{"1907d5ab-8c50-4d3d-a545-d6dded88eaa3","b7cc5e3f-e55f-446c-8e1d-3d5148d07ef1","e6ee300e-067b-40b5-a5f9-062d69d8a313","166d1ced-4e34-4cdf-9c40-05e8ad5be345"})
                .amountBasedPointRules(new Object[]{items,items2,items3,items4,items5,items6,items7})
                .subject("all")
                .setExclusive(true)
                .pointExpiresInDays(3686)
                .pointExpiresAt("2021-09-02T21:08:43.000000+09:00")
                .status("enabled")
                .description("Y")
                .bearPointShopId("f836c287-57b4-4c1a-94c9-eb5e947b97f2");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test32() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("product_code", "4912345678904");
        items.addProperty("is_multiply_by_count", true);
        items.addProperty("required_count", 2);
        JsonObject items2 = new JsonObject();
        items2.addProperty("point_amount", 5);
        items2.addProperty("point_amount_unit", "percent");
        items2.addProperty("product_code", "4912345678904");
        items2.addProperty("is_multiply_by_count", true);
        items2.addProperty("required_count", 2);
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("is_multiply_by_count", true);
        items3.addProperty("required_count", 2);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("is_multiply_by_count", true);
        items4.addProperty("required_count", 2);
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("is_multiply_by_count", true);
        items5.addProperty("required_count", 2);
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("is_multiply_by_count", true);
        items6.addProperty("required_count", 2);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("is_multiply_by_count", true);
        items7.addProperty("required_count", 2);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("is_multiply_by_count", true);
        items8.addProperty("required_count", 2);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("subject_more_than_or_equal", 1000);
        items9.addProperty("subject_less_than", 5000);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("subject_more_than_or_equal", 1000);
        items10.addProperty("subject_less_than", 5000);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("subject_more_than_or_equal", 1000);
        items11.addProperty("subject_less_than", 5000);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("subject_more_than_or_equal", 1000);
        items12.addProperty("subject_less_than", 5000);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("subject_more_than_or_equal", 1000);
        items13.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "QxRkeqNQeXfWKRjr6QmO01AfgQug0zp9uYT1ZMdJ8n2O7iUOn4U5u1AWGcysVn2YV4SaLwr46b7NtGRvPXwqG1ADL6KaWpMPK1FW5wKrRKfV3Ls9Pn1VHk3xJM5ZX8qgJU5oom4g6zmeoq9BPUqueSgWpMFWcrL5xLs7bhaizXku3DepgHmaf4s2diq5ICc86eddiFb5j3xdqJCarPbY9c5rdWOVCdG4zvcDe5CQzd",
            "cf2f9eb6-8a65-464d-accf-06b1385c3f4a",
            "2022-05-13T19:56:04.000000+09:00",
            "2022-06-20T02:18:04.000000+09:00",
            842,
            "external-transaction"
        )
                .blacklistedShopIds(new String[]{"21d5111a-7d46-45fc-864b-7372d8baee53","cb3cd3fb-477a-4207-8458-5cc269086f44","19c3c578-d04d-4432-b064-55652084c665"})
                .productBasedPointRules(new Object[]{items,items2,items3,items4,items5,items6,items7,items8})
                .amountBasedPointRules(new Object[]{items9,items10,items11,items12,items13})
                .subject("money")
                .setExclusive(true)
                .pointExpiresInDays(8091)
                .pointExpiresAt("2023-01-26T02:30:43.000000+09:00")
                .status("enabled")
                .description("9CtGO8ezlpl7S4BLT5ZcQp3pfXyZ0IX3KDPxLKTF5QcAxzYyKZ3P1wdtXzBqZxol5jwwwFY7LYUmmK4g7DBG7yTfem26jhduG1078CGPzWKl4qyeuYSXDfeCNKddTdaxM8ApKjscDoVfqfrxhGSvj1jVRKRCIiMtSLwt")
                .bearPointShopId("51218fc2-e49a-4cfc-8bf9-f5a7ec3e7605");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test33() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("product_code", "4912345678904");
        items.addProperty("classification_code", "c123");
        JsonObject items2 = new JsonObject();
        items2.addProperty("product_code", "4912345678904");
        items2.addProperty("classification_code", "c123");
        JsonObject items3 = new JsonObject();
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("classification_code", "c123");
        JsonObject items4 = new JsonObject();
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("classification_code", "c123");
        JsonObject items5 = new JsonObject();
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("classification_code", "c123");
        JsonObject items6 = new JsonObject();
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("classification_code", "c123");
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("is_multiply_by_count", true);
        items7.addProperty("required_count", 2);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("is_multiply_by_count", true);
        items8.addProperty("required_count", 2);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("is_multiply_by_count", true);
        items9.addProperty("required_count", 2);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("subject_more_than_or_equal", 1000);
        items13.addProperty("subject_less_than", 5000);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("subject_more_than_or_equal", 1000);
        items14.addProperty("subject_less_than", 5000);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("subject_more_than_or_equal", 1000);
        items15.addProperty("subject_less_than", 5000);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("subject_more_than_or_equal", 1000);
        items16.addProperty("subject_less_than", 5000);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("subject_more_than_or_equal", 1000);
        items17.addProperty("subject_less_than", 5000);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("subject_more_than_or_equal", 1000);
        items18.addProperty("subject_less_than", 5000);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("subject_more_than_or_equal", 1000);
        items19.addProperty("subject_less_than", 5000);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("subject_more_than_or_equal", 1000);
        items20.addProperty("subject_less_than", 5000);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("subject_more_than_or_equal", 1000);
        items21.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "QxRkeqNQeXfWKRjr6QmO01AfgQug0zp9uYT1ZMdJ8n2O7iUOn4U5u1AWGcysVn2YV4SaLwr46b7NtGRvPXwqG1ADL6KaWpMPK1FW5wKrRKfV3Ls9Pn1VHk3xJM5ZX8qgJU5oom4g6zmeoq9BPUqueSgWpMFWcrL5xLs7bhaizXku3DepgHmaf4s2diq5ICc86eddiFb5j3xdqJCarPbY9c5rdWOVCdG4zvcDe5CQzd",
            "cf2f9eb6-8a65-464d-accf-06b1385c3f4a",
            "2022-05-13T19:56:04.000000+09:00",
            "2022-06-20T02:18:04.000000+09:00",
            842,
            "external-transaction"
        )
                .blacklistedShopIds(new String[]{"90a697d7-6792-4994-9720-18bcfece7fbf","e5db7594-e328-4340-b3c4-d67c8af12dfe","935281ff-0a2c-4059-bd49-e3b67be9ec32","4d65c8c2-e492-490b-868d-eed7c31fdff8","c9bc2fc7-f03f-4bf3-9690-df0722c3ef50","a6812878-3a5d-4df4-a89a-cea784667a6e"})
                .blacklistedProductRules(new Object[]{items,items2,items3,items4,items5,items6})
                .productBasedPointRules(new Object[]{items7,items8,items9,items10,items11,items12})
                .amountBasedPointRules(new Object[]{items13,items14,items15,items16,items17,items18,items19,items20,items21})
                .subject("money")
                .setExclusive(false)
                .pointExpiresInDays(681)
                .pointExpiresAt("2022-02-10T14:33:08.000000+09:00")
                .status("enabled")
                .description("Xk")
                .bearPointShopId("63ae5986-0073-41ac-a808-73e56eb846cb");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test34() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("product_code", "4912345678904");
        items.addProperty("classification_code", "c123");
        JsonObject items2 = new JsonObject();
        items2.addProperty("product_code", "4912345678904");
        items2.addProperty("classification_code", "c123");
        JsonObject items3 = new JsonObject();
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("classification_code", "c123");
        JsonObject items4 = new JsonObject();
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("classification_code", "c123");
        JsonObject items5 = new JsonObject();
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("classification_code", "c123");
        JsonObject items6 = new JsonObject();
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("classification_code", "c123");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("is_multiply_by_count", true);
        items16.addProperty("required_count", 2);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("is_multiply_by_count", true);
        items17.addProperty("required_count", 2);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("subject_more_than_or_equal", 1000);
        items18.addProperty("subject_less_than", 5000);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("subject_more_than_or_equal", 1000);
        items19.addProperty("subject_less_than", 5000);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("subject_more_than_or_equal", 1000);
        items20.addProperty("subject_less_than", 5000);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("subject_more_than_or_equal", 1000);
        items21.addProperty("subject_less_than", 5000);
        JsonObject items22 = new JsonObject();
        items22.addProperty("point_amount", 5);
        items22.addProperty("point_amount_unit", "percent");
        items22.addProperty("subject_more_than_or_equal", 1000);
        items22.addProperty("subject_less_than", 5000);
        JsonObject items23 = new JsonObject();
        items23.addProperty("point_amount", 5);
        items23.addProperty("point_amount_unit", "percent");
        items23.addProperty("subject_more_than_or_equal", 1000);
        items23.addProperty("subject_less_than", 5000);
        JsonObject items24 = new JsonObject();
        items24.addProperty("point_amount", 5);
        items24.addProperty("point_amount_unit", "percent");
        items24.addProperty("subject_more_than_or_equal", 1000);
        items24.addProperty("subject_less_than", 5000);
        JsonObject items25 = new JsonObject();
        items25.addProperty("point_amount", 5);
        items25.addProperty("point_amount_unit", "percent");
        items25.addProperty("subject_more_than_or_equal", 1000);
        items25.addProperty("subject_less_than", 5000);
        JsonObject items26 = new JsonObject();
        items26.addProperty("point_amount", 5);
        items26.addProperty("point_amount_unit", "percent");
        items26.addProperty("subject_more_than_or_equal", 1000);
        items26.addProperty("subject_less_than", 5000);
        JsonObject items27 = new JsonObject();
        items27.addProperty("point_amount", 5);
        items27.addProperty("point_amount_unit", "percent");
        items27.addProperty("subject_more_than_or_equal", 1000);
        items27.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "QxRkeqNQeXfWKRjr6QmO01AfgQug0zp9uYT1ZMdJ8n2O7iUOn4U5u1AWGcysVn2YV4SaLwr46b7NtGRvPXwqG1ADL6KaWpMPK1FW5wKrRKfV3Ls9Pn1VHk3xJM5ZX8qgJU5oom4g6zmeoq9BPUqueSgWpMFWcrL5xLs7bhaizXku3DepgHmaf4s2diq5ICc86eddiFb5j3xdqJCarPbY9c5rdWOVCdG4zvcDe5CQzd",
            "cf2f9eb6-8a65-464d-accf-06b1385c3f4a",
            "2022-05-13T19:56:04.000000+09:00",
            "2022-06-20T02:18:04.000000+09:00",
            842,
            "external-transaction"
        )
                .blacklistedShopIds(new String[]{"9ce1fa22-5080-444c-b968-196dda8351e4","1b999411-867f-4ff1-8f23-5a5dba2db62a","1aa3cba5-39c4-4f8c-80d9-c5ea6c690f73","a5a2a840-1431-4d4c-b7fe-aa17e57e4eeb","a3352eb8-7eba-4fa1-b5f0-846854a561af","5bd884cb-9b6c-40c3-af3e-9676026a14c2","2b2b159b-01ee-4ec0-ac62-a480f7d7ef9b","f1db0537-0639-4959-aa50-786bcd4998cc","4d4537fb-aa96-4b84-9f80-c980086c1584"})
                .applicableDaysOfWeek(new Integer[]{0,6,5,1,1,3,2,6,0,3})
                .blacklistedProductRules(new Object[]{items,items2,items3,items4,items5,items6,items7,items8,items9})
                .productBasedPointRules(new Object[]{items10,items11,items12,items13,items14,items15,items16,items17})
                .amountBasedPointRules(new Object[]{items18,items19,items20,items21,items22,items23,items24,items25,items26,items27})
                .subject("money")
                .setExclusive(false)
                .pointExpiresInDays(9420)
                .pointExpiresAt("2021-01-10T08:30:51.000000+09:00")
                .status("disabled")
                .description("2HTrfE5AU2FGRqPvcaularkrAzsUdIvvRbIaz7ey85a2XPrplpNC6CtyctqblDK")
                .bearPointShopId("682eea03-099b-4153-98e7-18a003263cf0");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test35() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("from", "12:00");
        items7.addProperty("to", "23:59");
        JsonObject items8 = new JsonObject();
        items8.addProperty("from", "12:00");
        items8.addProperty("to", "23:59");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("subject_more_than_or_equal", 1000);
        items14.addProperty("subject_less_than", 5000);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("subject_more_than_or_equal", 1000);
        items15.addProperty("subject_less_than", 5000);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("subject_more_than_or_equal", 1000);
        items16.addProperty("subject_less_than", 5000);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("subject_more_than_or_equal", 1000);
        items17.addProperty("subject_less_than", 5000);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("subject_more_than_or_equal", 1000);
        items18.addProperty("subject_less_than", 5000);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("subject_more_than_or_equal", 1000);
        items19.addProperty("subject_less_than", 5000);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("subject_more_than_or_equal", 1000);
        items20.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "QxRkeqNQeXfWKRjr6QmO01AfgQug0zp9uYT1ZMdJ8n2O7iUOn4U5u1AWGcysVn2YV4SaLwr46b7NtGRvPXwqG1ADL6KaWpMPK1FW5wKrRKfV3Ls9Pn1VHk3xJM5ZX8qgJU5oom4g6zmeoq9BPUqueSgWpMFWcrL5xLs7bhaizXku3DepgHmaf4s2diq5ICc86eddiFb5j3xdqJCarPbY9c5rdWOVCdG4zvcDe5CQzd",
            "cf2f9eb6-8a65-464d-accf-06b1385c3f4a",
            "2022-05-13T19:56:04.000000+09:00",
            "2022-06-20T02:18:04.000000+09:00",
            842,
            "external-transaction"
        )
                .blacklistedShopIds(new String[]{"4fc56685-4fef-478b-a6f6-6c3e092eb84b","0900964e-f72e-4a29-8cc9-e59242c6df80","58644e72-7934-4d9a-abbb-d703a33af67c","63e715fb-e707-4ee1-8672-e2a70ff7d9ab","833c0bdf-842f-4eea-9152-f48f59cd9075","b03f94ae-ab2d-46b3-a28b-3825b7887671","c7c756dd-3ec5-48f5-8f58-ced7d79ada2f","c6b504d8-9a03-4615-8065-fd882f5b8eac"})
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5,items6,items7,items8})
                .applicableDaysOfWeek(new Integer[]{2,6})
                .blacklistedProductRules(new Object[]{items9})
                .productBasedPointRules(new Object[]{items10,items11,items12,items13})
                .amountBasedPointRules(new Object[]{items14,items15,items16,items17,items18,items19,items20})
                .subject("money")
                .setExclusive(true)
                .pointExpiresInDays(6068)
                .pointExpiresAt("2020-03-02T11:09:52.000000+09:00")
                .status("disabled")
                .description("SUUq7mkLoBrlHuwgFFs8jVODoXqqDfIHHxLLpZ53GJHMU6A6w7Gkf4OWi4n8Fpt2hfQYBUGlA2WrAUcm9HkeArqDpvqmOUxZYp2luqyCTEtRHc")
                .bearPointShopId("738b8649-f57b-4d57-bbce-696d6fe124ec");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test36() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("from", "12:00");
        items7.addProperty("to", "23:59");
        JsonObject items8 = new JsonObject();
        items8.addProperty("from", "12:00");
        items8.addProperty("to", "23:59");
        JsonObject items9 = new JsonObject();
        items9.addProperty("from", "12:00");
        items9.addProperty("to", "23:59");
        JsonObject items10 = new JsonObject();
        items10.addProperty("from", "12:00");
        items10.addProperty("to", "23:59");
        JsonObject items11 = new JsonObject();
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("classification_code", "c123");
        JsonObject items12 = new JsonObject();
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("classification_code", "c123");
        JsonObject items13 = new JsonObject();
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("classification_code", "c123");
        JsonObject items14 = new JsonObject();
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("classification_code", "c123");
        JsonObject items15 = new JsonObject();
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("classification_code", "c123");
        JsonObject items16 = new JsonObject();
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("classification_code", "c123");
        JsonObject items17 = new JsonObject();
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("classification_code", "c123");
        JsonObject items18 = new JsonObject();
        items18.addProperty("product_code", "4912345678904");
        items18.addProperty("classification_code", "c123");
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("product_code", "4912345678904");
        items19.addProperty("is_multiply_by_count", true);
        items19.addProperty("required_count", 2);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("product_code", "4912345678904");
        items20.addProperty("is_multiply_by_count", true);
        items20.addProperty("required_count", 2);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("product_code", "4912345678904");
        items21.addProperty("is_multiply_by_count", true);
        items21.addProperty("required_count", 2);
        JsonObject items22 = new JsonObject();
        items22.addProperty("point_amount", 5);
        items22.addProperty("point_amount_unit", "percent");
        items22.addProperty("product_code", "4912345678904");
        items22.addProperty("is_multiply_by_count", true);
        items22.addProperty("required_count", 2);
        JsonObject items23 = new JsonObject();
        items23.addProperty("point_amount", 5);
        items23.addProperty("point_amount_unit", "percent");
        items23.addProperty("product_code", "4912345678904");
        items23.addProperty("is_multiply_by_count", true);
        items23.addProperty("required_count", 2);
        JsonObject items24 = new JsonObject();
        items24.addProperty("point_amount", 5);
        items24.addProperty("point_amount_unit", "percent");
        items24.addProperty("product_code", "4912345678904");
        items24.addProperty("is_multiply_by_count", true);
        items24.addProperty("required_count", 2);
        JsonObject items25 = new JsonObject();
        items25.addProperty("point_amount", 5);
        items25.addProperty("point_amount_unit", "percent");
        items25.addProperty("product_code", "4912345678904");
        items25.addProperty("is_multiply_by_count", true);
        items25.addProperty("required_count", 2);
        JsonObject items26 = new JsonObject();
        items26.addProperty("point_amount", 5);
        items26.addProperty("point_amount_unit", "percent");
        items26.addProperty("product_code", "4912345678904");
        items26.addProperty("is_multiply_by_count", true);
        items26.addProperty("required_count", 2);
        JsonObject items27 = new JsonObject();
        items27.addProperty("point_amount", 5);
        items27.addProperty("point_amount_unit", "percent");
        items27.addProperty("product_code", "4912345678904");
        items27.addProperty("is_multiply_by_count", true);
        items27.addProperty("required_count", 2);
        JsonObject items28 = new JsonObject();
        items28.addProperty("point_amount", 5);
        items28.addProperty("point_amount_unit", "percent");
        items28.addProperty("product_code", "4912345678904");
        items28.addProperty("is_multiply_by_count", true);
        items28.addProperty("required_count", 2);
        JsonObject items29 = new JsonObject();
        items29.addProperty("point_amount", 5);
        items29.addProperty("point_amount_unit", "percent");
        items29.addProperty("subject_more_than_or_equal", 1000);
        items29.addProperty("subject_less_than", 5000);
        JsonObject items30 = new JsonObject();
        items30.addProperty("point_amount", 5);
        items30.addProperty("point_amount_unit", "percent");
        items30.addProperty("subject_more_than_or_equal", 1000);
        items30.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "QxRkeqNQeXfWKRjr6QmO01AfgQug0zp9uYT1ZMdJ8n2O7iUOn4U5u1AWGcysVn2YV4SaLwr46b7NtGRvPXwqG1ADL6KaWpMPK1FW5wKrRKfV3Ls9Pn1VHk3xJM5ZX8qgJU5oom4g6zmeoq9BPUqueSgWpMFWcrL5xLs7bhaizXku3DepgHmaf4s2diq5ICc86eddiFb5j3xdqJCarPbY9c5rdWOVCdG4zvcDe5CQzd",
            "cf2f9eb6-8a65-464d-accf-06b1385c3f4a",
            "2022-05-13T19:56:04.000000+09:00",
            "2022-06-20T02:18:04.000000+09:00",
            842,
            "external-transaction"
        )
                .blacklistedShopIds(new String[]{"84b9ce1d-eace-4533-9088-687b60589f49","a2ac6091-3540-4133-8115-44ac5f1618e2","35df3a4e-49aa-4549-9d27-70d669be759a","33278d59-b863-4f97-85c0-1a82805bfe09","24df518c-2648-4b7b-94cf-cdcfffa3915b","868ed84f-1a7d-495d-9902-a2c24dbaab93","a2d7b746-f16d-4764-8442-831379cbc246"})
                .minimumNumberOfProducts(7101)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5,items6,items7,items8,items9,items10})
                .applicableDaysOfWeek(new Integer[]{5,2,4})
                .blacklistedProductRules(new Object[]{items11,items12,items13,items14,items15,items16,items17,items18})
                .productBasedPointRules(new Object[]{items19,items20,items21,items22,items23,items24,items25,items26,items27,items28})
                .amountBasedPointRules(new Object[]{items29,items30})
                .subject("all")
                .setExclusive(false)
                .pointExpiresInDays(461)
                .pointExpiresAt("2024-03-13T07:38:54.000000+09:00")
                .status("enabled")
                .description("kJi8vPxolkTf97NjU30QZ")
                .bearPointShopId("677a8479-30b0-4d0e-a945-a84d687b9f60");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test37() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("classification_code", "c123");
        JsonObject items4 = new JsonObject();
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("classification_code", "c123");
        JsonObject items5 = new JsonObject();
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("classification_code", "c123");
        JsonObject items6 = new JsonObject();
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("classification_code", "c123");
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("is_multiply_by_count", true);
        items7.addProperty("required_count", 2);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("subject_more_than_or_equal", 1000);
        items8.addProperty("subject_less_than", 5000);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("subject_more_than_or_equal", 1000);
        items9.addProperty("subject_less_than", 5000);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("subject_more_than_or_equal", 1000);
        items10.addProperty("subject_less_than", 5000);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("subject_more_than_or_equal", 1000);
        items11.addProperty("subject_less_than", 5000);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("subject_more_than_or_equal", 1000);
        items12.addProperty("subject_less_than", 5000);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("subject_more_than_or_equal", 1000);
        items13.addProperty("subject_less_than", 5000);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("subject_more_than_or_equal", 1000);
        items14.addProperty("subject_less_than", 5000);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("subject_more_than_or_equal", 1000);
        items15.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "QxRkeqNQeXfWKRjr6QmO01AfgQug0zp9uYT1ZMdJ8n2O7iUOn4U5u1AWGcysVn2YV4SaLwr46b7NtGRvPXwqG1ADL6KaWpMPK1FW5wKrRKfV3Ls9Pn1VHk3xJM5ZX8qgJU5oom4g6zmeoq9BPUqueSgWpMFWcrL5xLs7bhaizXku3DepgHmaf4s2diq5ICc86eddiFb5j3xdqJCarPbY9c5rdWOVCdG4zvcDe5CQzd",
            "cf2f9eb6-8a65-464d-accf-06b1385c3f4a",
            "2022-05-13T19:56:04.000000+09:00",
            "2022-06-20T02:18:04.000000+09:00",
            842,
            "external-transaction"
        )
                .blacklistedShopIds(new String[]{"de6fe406-7c49-4fd0-807f-1a57c9ce51a0","391a3d4d-5fb9-490d-827e-e0b9118c484a","bbcf4293-8af0-42a9-a694-a4c5b4ed3a77","13c48666-32f8-4dae-a28d-207a1a433f06","2e08e538-b9e9-4975-b2d1-50e4a15ca62b"})
                .minimumNumberOfAmount(306)
                .minimumNumberOfProducts(3672)
                .applicableTimeRanges(new Object[]{items,items2})
                .applicableDaysOfWeek(new Integer[]{0,1,4,2,0,0,1,3})
                .blacklistedProductRules(new Object[]{items3,items4,items5,items6})
                .productBasedPointRules(new Object[]{items7})
                .amountBasedPointRules(new Object[]{items8,items9,items10,items11,items12,items13,items14,items15})
                .subject("all")
                .setExclusive(true)
                .pointExpiresInDays(8487)
                .pointExpiresAt("2020-03-18T05:00:12.000000+09:00")
                .status("disabled")
                .description("e6hcPneGmly2C5zNyNTLyW3E0ra6TyfoTpCejQXAM5P1CgQBRjhM5DxZfli73LvJ4hT8oPxi4usiTYDeZqvbRcTw5FIt69N7a968k9NKU5L6xYud5GCUS1ZVYEpOMYCBIov1P37JugnzwxZYs4r0IKm9IGIg73piKVk286OTdtu36JwS8XQGBXsSktH")
                .bearPointShopId("2549f514-41a0-4c65-8690-74a86e42ca11");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test38() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("classification_code", "c123");
        JsonObject items5 = new JsonObject();
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("classification_code", "c123");
        JsonObject items6 = new JsonObject();
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("classification_code", "c123");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("classification_code", "c123");
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("subject_more_than_or_equal", 1000);
        items12.addProperty("subject_less_than", 5000);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("subject_more_than_or_equal", 1000);
        items13.addProperty("subject_less_than", 5000);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("subject_more_than_or_equal", 1000);
        items14.addProperty("subject_less_than", 5000);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("subject_more_than_or_equal", 1000);
        items15.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "QxRkeqNQeXfWKRjr6QmO01AfgQug0zp9uYT1ZMdJ8n2O7iUOn4U5u1AWGcysVn2YV4SaLwr46b7NtGRvPXwqG1ADL6KaWpMPK1FW5wKrRKfV3Ls9Pn1VHk3xJM5ZX8qgJU5oom4g6zmeoq9BPUqueSgWpMFWcrL5xLs7bhaizXku3DepgHmaf4s2diq5ICc86eddiFb5j3xdqJCarPbY9c5rdWOVCdG4zvcDe5CQzd",
            "cf2f9eb6-8a65-464d-accf-06b1385c3f4a",
            "2022-05-13T19:56:04.000000+09:00",
            "2022-06-20T02:18:04.000000+09:00",
            842,
            "external-transaction"
        )
                .blacklistedShopIds(new String[]{"69749900-9bc7-4dc0-a942-3a35c61849cc","c473a946-3b1d-4f1e-b82e-e8fb3964bf03"})
                .minimumNumberForCombinationPurchase(3336)
                .minimumNumberOfAmount(9782)
                .minimumNumberOfProducts(5406)
                .applicableTimeRanges(new Object[]{items,items2,items3})
                .applicableDaysOfWeek(new Integer[]{4,1,1,1,3,5,1})
                .blacklistedProductRules(new Object[]{items4,items5,items6,items7,items8,items9,items10})
                .productBasedPointRules(new Object[]{items11})
                .amountBasedPointRules(new Object[]{items12,items13,items14,items15})
                .subject("money")
                .setExclusive(false)
                .pointExpiresInDays(3749)
                .pointExpiresAt("2022-08-21T23:12:04.000000+09:00")
                .status("disabled")
                .description("CNaFHo1hWVjURyir2RTDg30OTq3mfapDL56GYVEpCDHyBOEU")
                .bearPointShopId("38de951f-d1c7-45da-a62b-ec6c999d22f2");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test39() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("from", "12:00");
        items7.addProperty("to", "23:59");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("is_multiply_by_count", true);
        items9.addProperty("required_count", 2);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("is_multiply_by_count", true);
        items16.addProperty("required_count", 2);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("is_multiply_by_count", true);
        items17.addProperty("required_count", 2);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("product_code", "4912345678904");
        items18.addProperty("is_multiply_by_count", true);
        items18.addProperty("required_count", 2);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("subject_more_than_or_equal", 1000);
        items19.addProperty("subject_less_than", 5000);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("subject_more_than_or_equal", 1000);
        items20.addProperty("subject_less_than", 5000);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("subject_more_than_or_equal", 1000);
        items21.addProperty("subject_less_than", 5000);
        JsonObject items22 = new JsonObject();
        items22.addProperty("point_amount", 5);
        items22.addProperty("point_amount_unit", "percent");
        items22.addProperty("subject_more_than_or_equal", 1000);
        items22.addProperty("subject_less_than", 5000);
        JsonObject items23 = new JsonObject();
        items23.addProperty("point_amount", 5);
        items23.addProperty("point_amount_unit", "percent");
        items23.addProperty("subject_more_than_or_equal", 1000);
        items23.addProperty("subject_less_than", 5000);
        JsonObject items24 = new JsonObject();
        items24.addProperty("point_amount", 5);
        items24.addProperty("point_amount_unit", "percent");
        items24.addProperty("subject_more_than_or_equal", 1000);
        items24.addProperty("subject_less_than", 5000);
        JsonObject items25 = new JsonObject();
        items25.addProperty("point_amount", 5);
        items25.addProperty("point_amount_unit", "percent");
        items25.addProperty("subject_more_than_or_equal", 1000);
        items25.addProperty("subject_less_than", 5000);
        JsonObject items26 = new JsonObject();
        items26.addProperty("point_amount", 5);
        items26.addProperty("point_amount_unit", "percent");
        items26.addProperty("subject_more_than_or_equal", 1000);
        items26.addProperty("subject_less_than", 5000);
        JsonObject items27 = new JsonObject();
        items27.addProperty("point_amount", 5);
        items27.addProperty("point_amount_unit", "percent");
        items27.addProperty("subject_more_than_or_equal", 1000);
        items27.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "QxRkeqNQeXfWKRjr6QmO01AfgQug0zp9uYT1ZMdJ8n2O7iUOn4U5u1AWGcysVn2YV4SaLwr46b7NtGRvPXwqG1ADL6KaWpMPK1FW5wKrRKfV3Ls9Pn1VHk3xJM5ZX8qgJU5oom4g6zmeoq9BPUqueSgWpMFWcrL5xLs7bhaizXku3DepgHmaf4s2diq5ICc86eddiFb5j3xdqJCarPbY9c5rdWOVCdG4zvcDe5CQzd",
            "cf2f9eb6-8a65-464d-accf-06b1385c3f4a",
            "2022-05-13T19:56:04.000000+09:00",
            "2022-06-20T02:18:04.000000+09:00",
            842,
            "external-transaction"
        )
                .blacklistedShopIds(new String[]{"deda8a18-4430-419c-9ec6-2eebf64a7042","18d7d4b1-ce5e-4daa-a4ce-38902cb990a5","b7ebfd1b-3d7b-4b5f-84c4-e6d5fd97bd39","db5f8181-09ce-4b0b-82f3-b2ff6022b79b"})
                .existInEachProductGroups(false)
                .minimumNumberForCombinationPurchase(7447)
                .minimumNumberOfAmount(4307)
                .minimumNumberOfProducts(4773)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5,items6,items7})
                .applicableDaysOfWeek(new Integer[]{3})
                .blacklistedProductRules(new Object[]{items8})
                .productBasedPointRules(new Object[]{items9,items10,items11,items12,items13,items14,items15,items16,items17,items18})
                .amountBasedPointRules(new Object[]{items19,items20,items21,items22,items23,items24,items25,items26,items27})
                .subject("money")
                .setExclusive(true)
                .pointExpiresInDays(1476)
                .pointExpiresAt("2022-12-21T17:26:33.000000+09:00")
                .status("disabled")
                .description("L")
                .bearPointShopId("acd89ed9-e8e3-4e42-a7b2-7f195523258a");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test40() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("classification_code", "c123");
        JsonObject items11 = new JsonObject();
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("classification_code", "c123");
        JsonObject items12 = new JsonObject();
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("classification_code", "c123");
        JsonObject items13 = new JsonObject();
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("classification_code", "c123");
        JsonObject items14 = new JsonObject();
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("classification_code", "c123");
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("is_multiply_by_count", true);
        items16.addProperty("required_count", 2);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("is_multiply_by_count", true);
        items17.addProperty("required_count", 2);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("product_code", "4912345678904");
        items18.addProperty("is_multiply_by_count", true);
        items18.addProperty("required_count", 2);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("subject_more_than_or_equal", 1000);
        items19.addProperty("subject_less_than", 5000);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("subject_more_than_or_equal", 1000);
        items20.addProperty("subject_less_than", 5000);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("subject_more_than_or_equal", 1000);
        items21.addProperty("subject_less_than", 5000);
        JsonObject items22 = new JsonObject();
        items22.addProperty("point_amount", 5);
        items22.addProperty("point_amount_unit", "percent");
        items22.addProperty("subject_more_than_or_equal", 1000);
        items22.addProperty("subject_less_than", 5000);
        JsonObject items23 = new JsonObject();
        items23.addProperty("point_amount", 5);
        items23.addProperty("point_amount_unit", "percent");
        items23.addProperty("subject_more_than_or_equal", 1000);
        items23.addProperty("subject_less_than", 5000);
        JsonObject items24 = new JsonObject();
        items24.addProperty("point_amount", 5);
        items24.addProperty("point_amount_unit", "percent");
        items24.addProperty("subject_more_than_or_equal", 1000);
        items24.addProperty("subject_less_than", 5000);
        JsonObject items25 = new JsonObject();
        items25.addProperty("point_amount", 5);
        items25.addProperty("point_amount_unit", "percent");
        items25.addProperty("subject_more_than_or_equal", 1000);
        items25.addProperty("subject_less_than", 5000);
        JsonObject items26 = new JsonObject();
        items26.addProperty("point_amount", 5);
        items26.addProperty("point_amount_unit", "percent");
        items26.addProperty("subject_more_than_or_equal", 1000);
        items26.addProperty("subject_less_than", 5000);
        JsonObject items27 = new JsonObject();
        items27.addProperty("point_amount", 5);
        items27.addProperty("point_amount_unit", "percent");
        items27.addProperty("subject_more_than_or_equal", 1000);
        items27.addProperty("subject_less_than", 5000);
        JsonObject items28 = new JsonObject();
        items28.addProperty("point_amount", 5);
        items28.addProperty("point_amount_unit", "percent");
        items28.addProperty("subject_more_than_or_equal", 1000);
        items28.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "QxRkeqNQeXfWKRjr6QmO01AfgQug0zp9uYT1ZMdJ8n2O7iUOn4U5u1AWGcysVn2YV4SaLwr46b7NtGRvPXwqG1ADL6KaWpMPK1FW5wKrRKfV3Ls9Pn1VHk3xJM5ZX8qgJU5oom4g6zmeoq9BPUqueSgWpMFWcrL5xLs7bhaizXku3DepgHmaf4s2diq5ICc86eddiFb5j3xdqJCarPbY9c5rdWOVCdG4zvcDe5CQzd",
            "cf2f9eb6-8a65-464d-accf-06b1385c3f4a",
            "2022-05-13T19:56:04.000000+09:00",
            "2022-06-20T02:18:04.000000+09:00",
            842,
            "external-transaction"
        )
                .blacklistedShopIds(new String[]{"c90d65e3-3b33-43fe-b74a-f569b625ef3c","1a7e4a79-4fd0-4a08-adf9-44ff72843c5c"})
                .maxPointAmount(6068)
                .existInEachProductGroups(true)
                .minimumNumberForCombinationPurchase(1704)
                .minimumNumberOfAmount(2250)
                .minimumNumberOfProducts(3442)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5,items6})
                .applicableDaysOfWeek(new Integer[]{1})
                .blacklistedProductRules(new Object[]{items7,items8,items9,items10,items11,items12,items13,items14})
                .productBasedPointRules(new Object[]{items15,items16,items17,items18})
                .amountBasedPointRules(new Object[]{items19,items20,items21,items22,items23,items24,items25,items26,items27,items28})
                .subject("money")
                .setExclusive(false)
                .pointExpiresInDays(2308)
                .pointExpiresAt("2021-08-13T21:27:49.000000+09:00")
                .status("enabled")
                .description("k0Q8iDT545HzphwkAOTuh3wSv69obSRl76zzMAdt3jxPdWqKF2J5lnHWvDB0oodfP3PftbTuPW3RYJd4Xg0VilrM88Mk3E7cU00ILZur")
                .bearPointShopId("24c15032-8886-4089-a721-ac633287ceff");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test41() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("classification_code", "c123");
        JsonObject items6 = new JsonObject();
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("classification_code", "c123");
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("is_multiply_by_count", true);
        items7.addProperty("required_count", 2);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("subject_more_than_or_equal", 1000);
        items8.addProperty("subject_less_than", 5000);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("subject_more_than_or_equal", 1000);
        items9.addProperty("subject_less_than", 5000);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("subject_more_than_or_equal", 1000);
        items10.addProperty("subject_less_than", 5000);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("subject_more_than_or_equal", 1000);
        items11.addProperty("subject_less_than", 5000);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("subject_more_than_or_equal", 1000);
        items12.addProperty("subject_less_than", 5000);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("subject_more_than_or_equal", 1000);
        items13.addProperty("subject_less_than", 5000);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("subject_more_than_or_equal", 1000);
        items14.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "QxRkeqNQeXfWKRjr6QmO01AfgQug0zp9uYT1ZMdJ8n2O7iUOn4U5u1AWGcysVn2YV4SaLwr46b7NtGRvPXwqG1ADL6KaWpMPK1FW5wKrRKfV3Ls9Pn1VHk3xJM5ZX8qgJU5oom4g6zmeoq9BPUqueSgWpMFWcrL5xLs7bhaizXku3DepgHmaf4s2diq5ICc86eddiFb5j3xdqJCarPbY9c5rdWOVCdG4zvcDe5CQzd",
            "cf2f9eb6-8a65-464d-accf-06b1385c3f4a",
            "2022-05-13T19:56:04.000000+09:00",
            "2022-06-20T02:18:04.000000+09:00",
            842,
            "external-transaction"
        )
                .blacklistedShopIds(new String[]{"89e540e1-fc70-478f-91b2-a87ab4ae8245","d9cc9717-bc44-48da-a6f1-413c7df765f9","f4892d89-66c8-4599-a775-1fcbf83bd04f","622ab899-858b-4dc8-b6d5-04378c12fab4","aeecd541-dc01-4c0e-a411-54e4e202d087"})
                .maxTotalPointAmount(4649)
                .maxPointAmount(7945)
                .existInEachProductGroups(true)
                .minimumNumberForCombinationPurchase(4523)
                .minimumNumberOfAmount(4263)
                .minimumNumberOfProducts(6614)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4})
                .applicableDaysOfWeek(new Integer[]{3,4,3,4,5,3,1})
                .blacklistedProductRules(new Object[]{items5,items6})
                .productBasedPointRules(new Object[]{items7})
                .amountBasedPointRules(new Object[]{items8,items9,items10,items11,items12,items13,items14})
                .subject("all")
                .setExclusive(false)
                .pointExpiresInDays(2145)
                .pointExpiresAt("2024-05-21T15:41:18.000000+09:00")
                .status("disabled")
                .description("F8Rdl9ewJN42R4JXYdEAiH1kudoKUnSiTcWksVlwF053ly4OAtyapTesYCypbEZGNmvRaI2hxnoq2aNh4D3w5HJAWlUX7K6uOiipftBfdKi3dyz6L9kP4sJMINy6QSC5bL2WzZKlBrQDbyDLQah1VIw2CLXH59wF7ECafA9aOgLZ")
                .bearPointShopId("42b9072f-2005-45bd-bb29-6a1fe0f7d4d6");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test42() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("is_multiply_by_count", true);
        items8.addProperty("required_count", 2);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("is_multiply_by_count", true);
        items9.addProperty("required_count", 2);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("subject_more_than_or_equal", 1000);
        items15.addProperty("subject_less_than", 5000);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("subject_more_than_or_equal", 1000);
        items16.addProperty("subject_less_than", 5000);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("subject_more_than_or_equal", 1000);
        items17.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "QxRkeqNQeXfWKRjr6QmO01AfgQug0zp9uYT1ZMdJ8n2O7iUOn4U5u1AWGcysVn2YV4SaLwr46b7NtGRvPXwqG1ADL6KaWpMPK1FW5wKrRKfV3Ls9Pn1VHk3xJM5ZX8qgJU5oom4g6zmeoq9BPUqueSgWpMFWcrL5xLs7bhaizXku3DepgHmaf4s2diq5ICc86eddiFb5j3xdqJCarPbY9c5rdWOVCdG4zvcDe5CQzd",
            "cf2f9eb6-8a65-464d-accf-06b1385c3f4a",
            "2022-05-13T19:56:04.000000+09:00",
            "2022-06-20T02:18:04.000000+09:00",
            842,
            "external-transaction"
        )
                .blacklistedShopIds(new String[]{"9e2620fc-372f-4749-8e1c-78e63960cd26"})
                .destPrivateMoneyId("94d2d6c0-b547-4bfb-84d2-fd1ef13dd135")
                .maxTotalPointAmount(3220)
                .maxPointAmount(248)
                .existInEachProductGroups(true)
                .minimumNumberForCombinationPurchase(2671)
                .minimumNumberOfAmount(4271)
                .minimumNumberOfProducts(6188)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5,items6})
                .applicableDaysOfWeek(new Integer[]{2,4,2,3})
                .blacklistedProductRules(new Object[]{items7})
                .productBasedPointRules(new Object[]{items8,items9,items10,items11,items12,items13,items14})
                .amountBasedPointRules(new Object[]{items15,items16,items17})
                .subject("money")
                .setExclusive(false)
                .pointExpiresInDays(7134)
                .pointExpiresAt("2020-04-22T04:43:05.000000+09:00")
                .status("enabled")
                .description("tr2L40PMLKzhIl9zTy0emwtYGrbuVZn6YX1VKXCKgB3KAmgIzEQzUNgHtsCYSuBjKGxB8C0prbmEgesPbGQAAhbOfn4oXNFEE6iubTZRdqouvV8N0tE9WA0EN9U4Ruoz0f891v9bNm4FUbyH5WeuDkZkXfvhi6b1bWszH9RdOk3lf6ji5yVjrPaeKeyv3PQzCRvvUXF")
                .bearPointShopId("f4b744c9-fd19-4d81-acfe-397cc8782f5d");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test43() throws ConnectionError, ProcessingError {
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("from", "12:00");
        items7.addProperty("to", "23:59");
        JsonObject items8 = new JsonObject();
        items8.addProperty("from", "12:00");
        items8.addProperty("to", "23:59");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("subject_more_than_or_equal", 1000);
        items12.addProperty("subject_less_than", 5000);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("subject_more_than_or_equal", 1000);
        items13.addProperty("subject_less_than", 5000);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("subject_more_than_or_equal", 1000);
        items14.addProperty("subject_less_than", 5000);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("subject_more_than_or_equal", 1000);
        items15.addProperty("subject_less_than", 5000);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("subject_more_than_or_equal", 1000);
        items16.addProperty("subject_less_than", 5000);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("subject_more_than_or_equal", 1000);
        items17.addProperty("subject_less_than", 5000);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("subject_more_than_or_equal", 1000);
        items18.addProperty("subject_less_than", 5000);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("subject_more_than_or_equal", 1000);
        items19.addProperty("subject_less_than", 5000);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("subject_more_than_or_equal", 1000);
        items20.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "QxRkeqNQeXfWKRjr6QmO01AfgQug0zp9uYT1ZMdJ8n2O7iUOn4U5u1AWGcysVn2YV4SaLwr46b7NtGRvPXwqG1ADL6KaWpMPK1FW5wKrRKfV3Ls9Pn1VHk3xJM5ZX8qgJU5oom4g6zmeoq9BPUqueSgWpMFWcrL5xLs7bhaizXku3DepgHmaf4s2diq5ICc86eddiFb5j3xdqJCarPbY9c5rdWOVCdG4zvcDe5CQzd",
            "cf2f9eb6-8a65-464d-accf-06b1385c3f4a",
            "2022-05-13T19:56:04.000000+09:00",
            "2022-06-20T02:18:04.000000+09:00",
            842,
            "external-transaction"
        )
                .blacklistedShopIds(new String[]{"c8b8bbad-83e0-4e92-9b01-6b8a003234b3","81c2c066-a1cb-4557-abc0-98180c1efee4","1d3ecad7-56ab-428c-88c4-1c6ffdfd9f20","3cf216d1-63db-4e5f-b72e-994fc2b18df9","1f1888d4-4221-474a-90aa-3447db0456e8","9b9137ba-2c19-49e8-b06c-656628e8b518","b980c15b-4597-4562-989f-ee787345c74d","57abc2be-805b-4047-8984-26cac3850075"})
                .applicableAccountMetadata(applicable_account_metadata)
                .destPrivateMoneyId("9fbef2aa-6cfe-4c30-acbe-a5adfcd9cbeb")
                .maxTotalPointAmount(9583)
                .maxPointAmount(7934)
                .existInEachProductGroups(false)
                .minimumNumberForCombinationPurchase(1370)
                .minimumNumberOfAmount(3789)
                .minimumNumberOfProducts(448)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5,items6,items7,items8})
                .applicableDaysOfWeek(new Integer[]{3,1,4,1,5,3,0,1})
                .blacklistedProductRules(new Object[]{items9})
                .productBasedPointRules(new Object[]{items10,items11})
                .amountBasedPointRules(new Object[]{items12,items13,items14,items15,items16,items17,items18,items19,items20})
                .subject("money")
                .setExclusive(true)
                .pointExpiresInDays(1872)
                .pointExpiresAt("2023-08-02T02:50:40.000000+09:00")
                .status("enabled")
                .description("1BvaHjSX7ep8S4W6P46m78V0WXFsih1IsOX9Ko7FwV6RSzJnmnY0a8h2dXD84VQA12")
                .bearPointShopId("82d35688-ccd1-4ea1-a8d1-bbfcef1546f6");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test44() throws ConnectionError, ProcessingError {
        JsonObject applicable_transaction_metadata = new JsonObject();
        applicable_transaction_metadata.addProperty("key", "rank");
        applicable_transaction_metadata.addProperty("value", "bronze");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("from", "12:00");
        items7.addProperty("to", "23:59");
        JsonObject items8 = new JsonObject();
        items8.addProperty("from", "12:00");
        items8.addProperty("to", "23:59");
        JsonObject items9 = new JsonObject();
        items9.addProperty("from", "12:00");
        items9.addProperty("to", "23:59");
        JsonObject items10 = new JsonObject();
        items10.addProperty("from", "12:00");
        items10.addProperty("to", "23:59");
        JsonObject items11 = new JsonObject();
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("classification_code", "c123");
        JsonObject items12 = new JsonObject();
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("classification_code", "c123");
        JsonObject items13 = new JsonObject();
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("classification_code", "c123");
        JsonObject items14 = new JsonObject();
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("classification_code", "c123");
        JsonObject items15 = new JsonObject();
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("classification_code", "c123");
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("is_multiply_by_count", true);
        items16.addProperty("required_count", 2);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("is_multiply_by_count", true);
        items17.addProperty("required_count", 2);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("product_code", "4912345678904");
        items18.addProperty("is_multiply_by_count", true);
        items18.addProperty("required_count", 2);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("product_code", "4912345678904");
        items19.addProperty("is_multiply_by_count", true);
        items19.addProperty("required_count", 2);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("product_code", "4912345678904");
        items20.addProperty("is_multiply_by_count", true);
        items20.addProperty("required_count", 2);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("product_code", "4912345678904");
        items21.addProperty("is_multiply_by_count", true);
        items21.addProperty("required_count", 2);
        JsonObject items22 = new JsonObject();
        items22.addProperty("point_amount", 5);
        items22.addProperty("point_amount_unit", "percent");
        items22.addProperty("product_code", "4912345678904");
        items22.addProperty("is_multiply_by_count", true);
        items22.addProperty("required_count", 2);
        JsonObject items23 = new JsonObject();
        items23.addProperty("point_amount", 5);
        items23.addProperty("point_amount_unit", "percent");
        items23.addProperty("subject_more_than_or_equal", 1000);
        items23.addProperty("subject_less_than", 5000);
        JsonObject items24 = new JsonObject();
        items24.addProperty("point_amount", 5);
        items24.addProperty("point_amount_unit", "percent");
        items24.addProperty("subject_more_than_or_equal", 1000);
        items24.addProperty("subject_less_than", 5000);
        JsonObject items25 = new JsonObject();
        items25.addProperty("point_amount", 5);
        items25.addProperty("point_amount_unit", "percent");
        items25.addProperty("subject_more_than_or_equal", 1000);
        items25.addProperty("subject_less_than", 5000);
        JsonObject items26 = new JsonObject();
        items26.addProperty("point_amount", 5);
        items26.addProperty("point_amount_unit", "percent");
        items26.addProperty("subject_more_than_or_equal", 1000);
        items26.addProperty("subject_less_than", 5000);
        JsonObject items27 = new JsonObject();
        items27.addProperty("point_amount", 5);
        items27.addProperty("point_amount_unit", "percent");
        items27.addProperty("subject_more_than_or_equal", 1000);
        items27.addProperty("subject_less_than", 5000);
        JsonObject items28 = new JsonObject();
        items28.addProperty("point_amount", 5);
        items28.addProperty("point_amount_unit", "percent");
        items28.addProperty("subject_more_than_or_equal", 1000);
        items28.addProperty("subject_less_than", 5000);
        JsonObject items29 = new JsonObject();
        items29.addProperty("point_amount", 5);
        items29.addProperty("point_amount_unit", "percent");
        items29.addProperty("subject_more_than_or_equal", 1000);
        items29.addProperty("subject_less_than", 5000);
        JsonObject items30 = new JsonObject();
        items30.addProperty("point_amount", 5);
        items30.addProperty("point_amount_unit", "percent");
        items30.addProperty("subject_more_than_or_equal", 1000);
        items30.addProperty("subject_less_than", 5000);
        JsonObject items31 = new JsonObject();
        items31.addProperty("point_amount", 5);
        items31.addProperty("point_amount_unit", "percent");
        items31.addProperty("subject_more_than_or_equal", 1000);
        items31.addProperty("subject_less_than", 5000);
        JsonObject items32 = new JsonObject();
        items32.addProperty("point_amount", 5);
        items32.addProperty("point_amount_unit", "percent");
        items32.addProperty("subject_more_than_or_equal", 1000);
        items32.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "QxRkeqNQeXfWKRjr6QmO01AfgQug0zp9uYT1ZMdJ8n2O7iUOn4U5u1AWGcysVn2YV4SaLwr46b7NtGRvPXwqG1ADL6KaWpMPK1FW5wKrRKfV3Ls9Pn1VHk3xJM5ZX8qgJU5oom4g6zmeoq9BPUqueSgWpMFWcrL5xLs7bhaizXku3DepgHmaf4s2diq5ICc86eddiFb5j3xdqJCarPbY9c5rdWOVCdG4zvcDe5CQzd",
            "cf2f9eb6-8a65-464d-accf-06b1385c3f4a",
            "2022-05-13T19:56:04.000000+09:00",
            "2022-06-20T02:18:04.000000+09:00",
            842,
            "external-transaction"
        )
                .blacklistedShopIds(new String[]{"f66f6711-ec5c-415d-82c1-6091aeb1f0ad","335327fc-bd58-4cff-9662-94cddd8d6be8","6afde0a0-91e9-4798-a3c0-9dc3dea628c5"})
                .applicableTransactionMetadata(applicable_transaction_metadata)
                .applicableAccountMetadata(applicable_account_metadata)
                .destPrivateMoneyId("3ce3a8cf-4ee3-4f9f-9dab-9de7798351bc")
                .maxTotalPointAmount(832)
                .maxPointAmount(701)
                .existInEachProductGroups(true)
                .minimumNumberForCombinationPurchase(4291)
                .minimumNumberOfAmount(1901)
                .minimumNumberOfProducts(9737)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5,items6,items7,items8,items9,items10})
                .applicableDaysOfWeek(new Integer[]{6,2,1,6,5,4,0})
                .blacklistedProductRules(new Object[]{items11,items12,items13,items14,items15})
                .productBasedPointRules(new Object[]{items16,items17,items18,items19,items20,items21,items22})
                .amountBasedPointRules(new Object[]{items23,items24,items25,items26,items27,items28,items29,items30,items31,items32})
                .subject("all")
                .setExclusive(true)
                .pointExpiresInDays(2524)
                .pointExpiresAt("2021-07-01T23:21:15.000000+09:00")
                .status("enabled")
                .description("Aex9nXm2egEqn4VOtqp4oVncHVNcalf9gOZnC0KyVSCsLvn67423bJNgfWva9ESHZJnv21ABktH7UyyoxYiXBxNNvumEbtk2ZrkrMOuxT8lfgO3K1cbq6l35gJqF2Qlj26qKXMDdTOZeBOT8R7BPbJ")
                .bearPointShopId("cdc00fe1-10db-40dd-bd18-5fe626821a87");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test45() throws ConnectionError, ProcessingError {
        JsonObject applicable_transaction_metadata = new JsonObject();
        applicable_transaction_metadata.addProperty("key", "rank");
        applicable_transaction_metadata.addProperty("value", "bronze");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("classification_code", "c123");
        JsonObject items4 = new JsonObject();
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("classification_code", "c123");
        JsonObject items5 = new JsonObject();
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("classification_code", "c123");
        JsonObject items6 = new JsonObject();
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("classification_code", "c123");
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("is_multiply_by_count", true);
        items7.addProperty("required_count", 2);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("is_multiply_by_count", true);
        items8.addProperty("required_count", 2);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("is_multiply_by_count", true);
        items9.addProperty("required_count", 2);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("subject_more_than_or_equal", 1000);
        items13.addProperty("subject_less_than", 5000);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("subject_more_than_or_equal", 1000);
        items14.addProperty("subject_less_than", 5000);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("subject_more_than_or_equal", 1000);
        items15.addProperty("subject_less_than", 5000);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("subject_more_than_or_equal", 1000);
        items16.addProperty("subject_less_than", 5000);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("subject_more_than_or_equal", 1000);
        items17.addProperty("subject_less_than", 5000);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("subject_more_than_or_equal", 1000);
        items18.addProperty("subject_less_than", 5000);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("subject_more_than_or_equal", 1000);
        items19.addProperty("subject_less_than", 5000);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("subject_more_than_or_equal", 1000);
        items20.addProperty("subject_less_than", 5000);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("subject_more_than_or_equal", 1000);
        items21.addProperty("subject_less_than", 5000);
        Request request = new CreateCampaign(
            "QxRkeqNQeXfWKRjr6QmO01AfgQug0zp9uYT1ZMdJ8n2O7iUOn4U5u1AWGcysVn2YV4SaLwr46b7NtGRvPXwqG1ADL6KaWpMPK1FW5wKrRKfV3Ls9Pn1VHk3xJM5ZX8qgJU5oom4g6zmeoq9BPUqueSgWpMFWcrL5xLs7bhaizXku3DepgHmaf4s2diq5ICc86eddiFb5j3xdqJCarPbY9c5rdWOVCdG4zvcDe5CQzd",
            "cf2f9eb6-8a65-464d-accf-06b1385c3f4a",
            "2022-05-13T19:56:04.000000+09:00",
            "2022-06-20T02:18:04.000000+09:00",
            842,
            "external-transaction"
        )
                .blacklistedShopIds(new String[]{"8c861432-a98f-4030-b9ee-b74f4d7f74b7","ef194adc-9072-4614-8511-172c89512657","c2fb4bcf-5dd2-4e8d-b6d3-11ee6dafec65","3dfa5ac1-c46c-4035-930b-88118f827835","c3a33a4c-6677-452c-ba3a-3241dca6d5a9"})
                .budgetCapsAmount(1078691777)
                .applicableTransactionMetadata(applicable_transaction_metadata)
                .applicableAccountMetadata(applicable_account_metadata)
                .destPrivateMoneyId("e7d8dabd-60b8-4c28-b34b-695fd18411d5")
                .maxTotalPointAmount(9039)
                .maxPointAmount(3087)
                .existInEachProductGroups(true)
                .minimumNumberForCombinationPurchase(3704)
                .minimumNumberOfAmount(8676)
                .minimumNumberOfProducts(2493)
                .applicableTimeRanges(new Object[]{items,items2})
                .applicableDaysOfWeek(new Integer[]{0,5,5,3,3})
                .blacklistedProductRules(new Object[]{items3,items4,items5,items6})
                .productBasedPointRules(new Object[]{items7,items8,items9,items10,items11,items12})
                .amountBasedPointRules(new Object[]{items13,items14,items15,items16,items17,items18,items19,items20,items21})
                .subject("money")
                .setExclusive(false)
                .pointExpiresInDays(6046)
                .pointExpiresAt("2021-08-08T19:33:51.000000+09:00")
                .status("enabled")
                .description("uPaDodWkvQrGavyC4eeFOhvYZMvPuGqLOnqV5vJ0XOggo0Drgzdf10CCJ0jhTofRW38W7JFgo0CXESvvlayymoOkOEpG3Um1p5I7dhCic9LLTYpdJzEQWg9JKlGGZShk3m8tcoRE")
                .bearPointShopId("ed718e10-3926-409c-80c3-781d532f75c1");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
}
