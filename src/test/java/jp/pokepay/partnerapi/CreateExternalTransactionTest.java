// DO NOT EDIT: File is generated by code generator.
package jp.pokepay.partnerapi;

import jp.pokepay.partnerapi.request.CreateExternalTransaction;
import jp.pokepay.partnerapi.request.Request;
import com.google.gson.JsonObject;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class CreateExternalTransactionTest {
    @Test
    void test0() throws ConnectionError, ProcessingError {
        Request request = new CreateExternalTransaction(
            "375b689a-304a-449c-8fb9-77d96ad79f33",
            "a5f14be6-1e00-4e99-b9a6-8e64d00fab1b",
            "7708687b-0aea-484d-a024-e09a605b0ee7",
            6564
        );
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test1() throws ConnectionError, ProcessingError {
        Request request = new CreateExternalTransaction(
            "375b689a-304a-449c-8fb9-77d96ad79f33",
            "a5f14be6-1e00-4e99-b9a6-8e64d00fab1b",
            "7708687b-0aea-484d-a024-e09a605b0ee7",
            6564
        )
                .requestId("2354ff6b-3224-44ae-b851-395f3bd2de53");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test2() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("jan_code", "abc");
        items.addProperty("name", "name1");
        items.addProperty("unit_price", 100);
        items.addProperty("price", 100);
        items.addProperty("is_discounted", false);
        items.addProperty("other", "{}");
        JsonObject items2 = new JsonObject();
        items2.addProperty("jan_code", "abc");
        items2.addProperty("name", "name1");
        items2.addProperty("unit_price", 100);
        items2.addProperty("price", 100);
        items2.addProperty("is_discounted", false);
        items2.addProperty("other", "{}");
        JsonObject items3 = new JsonObject();
        items3.addProperty("jan_code", "abc");
        items3.addProperty("name", "name1");
        items3.addProperty("unit_price", 100);
        items3.addProperty("price", 100);
        items3.addProperty("is_discounted", false);
        items3.addProperty("other", "{}");
        JsonObject items4 = new JsonObject();
        items4.addProperty("jan_code", "abc");
        items4.addProperty("name", "name1");
        items4.addProperty("unit_price", 100);
        items4.addProperty("price", 100);
        items4.addProperty("is_discounted", false);
        items4.addProperty("other", "{}");
        JsonObject items5 = new JsonObject();
        items5.addProperty("jan_code", "abc");
        items5.addProperty("name", "name1");
        items5.addProperty("unit_price", 100);
        items5.addProperty("price", 100);
        items5.addProperty("is_discounted", false);
        items5.addProperty("other", "{}");
        JsonObject items6 = new JsonObject();
        items6.addProperty("jan_code", "abc");
        items6.addProperty("name", "name1");
        items6.addProperty("unit_price", 100);
        items6.addProperty("price", 100);
        items6.addProperty("is_discounted", false);
        items6.addProperty("other", "{}");
        JsonObject items7 = new JsonObject();
        items7.addProperty("jan_code", "abc");
        items7.addProperty("name", "name1");
        items7.addProperty("unit_price", 100);
        items7.addProperty("price", 100);
        items7.addProperty("is_discounted", false);
        items7.addProperty("other", "{}");
        JsonObject items8 = new JsonObject();
        items8.addProperty("jan_code", "abc");
        items8.addProperty("name", "name1");
        items8.addProperty("unit_price", 100);
        items8.addProperty("price", 100);
        items8.addProperty("is_discounted", false);
        items8.addProperty("other", "{}");
        JsonObject items9 = new JsonObject();
        items9.addProperty("jan_code", "abc");
        items9.addProperty("name", "name1");
        items9.addProperty("unit_price", 100);
        items9.addProperty("price", 100);
        items9.addProperty("is_discounted", false);
        items9.addProperty("other", "{}");
        JsonObject items10 = new JsonObject();
        items10.addProperty("jan_code", "abc");
        items10.addProperty("name", "name1");
        items10.addProperty("unit_price", 100);
        items10.addProperty("price", 100);
        items10.addProperty("is_discounted", false);
        items10.addProperty("other", "{}");
        Request request = new CreateExternalTransaction(
            "375b689a-304a-449c-8fb9-77d96ad79f33",
            "a5f14be6-1e00-4e99-b9a6-8e64d00fab1b",
            "7708687b-0aea-484d-a024-e09a605b0ee7",
            6564
        )
                .products(new Object[]{items,items2,items3,items4,items5,items6,items7,items8,items9,items10})
                .requestId("fa91771d-f813-4a77-8a31-877511248ce4");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test3() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("jan_code", "abc");
        items.addProperty("name", "name1");
        items.addProperty("unit_price", 100);
        items.addProperty("price", 100);
        items.addProperty("is_discounted", false);
        items.addProperty("other", "{}");
        JsonObject items2 = new JsonObject();
        items2.addProperty("jan_code", "abc");
        items2.addProperty("name", "name1");
        items2.addProperty("unit_price", 100);
        items2.addProperty("price", 100);
        items2.addProperty("is_discounted", false);
        items2.addProperty("other", "{}");
        JsonObject items3 = new JsonObject();
        items3.addProperty("jan_code", "abc");
        items3.addProperty("name", "name1");
        items3.addProperty("unit_price", 100);
        items3.addProperty("price", 100);
        items3.addProperty("is_discounted", false);
        items3.addProperty("other", "{}");
        JsonObject items4 = new JsonObject();
        items4.addProperty("jan_code", "abc");
        items4.addProperty("name", "name1");
        items4.addProperty("unit_price", 100);
        items4.addProperty("price", 100);
        items4.addProperty("is_discounted", false);
        items4.addProperty("other", "{}");
        JsonObject items5 = new JsonObject();
        items5.addProperty("jan_code", "abc");
        items5.addProperty("name", "name1");
        items5.addProperty("unit_price", 100);
        items5.addProperty("price", 100);
        items5.addProperty("is_discounted", false);
        items5.addProperty("other", "{}");
        JsonObject items6 = new JsonObject();
        items6.addProperty("jan_code", "abc");
        items6.addProperty("name", "name1");
        items6.addProperty("unit_price", 100);
        items6.addProperty("price", 100);
        items6.addProperty("is_discounted", false);
        items6.addProperty("other", "{}");
        JsonObject items7 = new JsonObject();
        items7.addProperty("jan_code", "abc");
        items7.addProperty("name", "name1");
        items7.addProperty("unit_price", 100);
        items7.addProperty("price", 100);
        items7.addProperty("is_discounted", false);
        items7.addProperty("other", "{}");
        JsonObject items8 = new JsonObject();
        items8.addProperty("jan_code", "abc");
        items8.addProperty("name", "name1");
        items8.addProperty("unit_price", 100);
        items8.addProperty("price", 100);
        items8.addProperty("is_discounted", false);
        items8.addProperty("other", "{}");
        JsonObject items9 = new JsonObject();
        items9.addProperty("jan_code", "abc");
        items9.addProperty("name", "name1");
        items9.addProperty("unit_price", 100);
        items9.addProperty("price", 100);
        items9.addProperty("is_discounted", false);
        items9.addProperty("other", "{}");
        Request request = new CreateExternalTransaction(
            "375b689a-304a-449c-8fb9-77d96ad79f33",
            "a5f14be6-1e00-4e99-b9a6-8e64d00fab1b",
            "7708687b-0aea-484d-a024-e09a605b0ee7",
            6564
        )
                .metadata("{\"key\":\"value\"}")
                .products(new Object[]{items,items2,items3,items4,items5,items6,items7,items8,items9})
                .requestId("5566c41c-555b-49af-8597-54c960fd087e");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test4() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("jan_code", "abc");
        items.addProperty("name", "name1");
        items.addProperty("unit_price", 100);
        items.addProperty("price", 100);
        items.addProperty("is_discounted", false);
        items.addProperty("other", "{}");
        JsonObject items2 = new JsonObject();
        items2.addProperty("jan_code", "abc");
        items2.addProperty("name", "name1");
        items2.addProperty("unit_price", 100);
        items2.addProperty("price", 100);
        items2.addProperty("is_discounted", false);
        items2.addProperty("other", "{}");
        JsonObject items3 = new JsonObject();
        items3.addProperty("jan_code", "abc");
        items3.addProperty("name", "name1");
        items3.addProperty("unit_price", 100);
        items3.addProperty("price", 100);
        items3.addProperty("is_discounted", false);
        items3.addProperty("other", "{}");
        Request request = new CreateExternalTransaction(
            "375b689a-304a-449c-8fb9-77d96ad79f33",
            "a5f14be6-1e00-4e99-b9a6-8e64d00fab1b",
            "7708687b-0aea-484d-a024-e09a605b0ee7",
            6564
        )
                .description("b7zDJ6KZT")
                .metadata("{\"key\":\"value\"}")
                .products(new Object[]{items,items2,items3})
                .requestId("0c41c311-7adb-43c5-ab14-0f30eb758d3a");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
}
