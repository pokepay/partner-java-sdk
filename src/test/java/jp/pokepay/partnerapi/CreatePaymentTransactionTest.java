// DO NOT EDIT: File is generated by code generator.
package jp.pokepay.partnerapi;

import jp.pokepay.partnerapi.request.CreatePaymentTransaction;
import jp.pokepay.partnerapi.request.Request;
import com.google.gson.JsonObject;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class CreatePaymentTransactionTest {
    @Test
    void test0() throws ConnectionError, ProcessingError {
        Request request = new CreatePaymentTransaction(
            "db1630a2-0efd-4144-bd08-3a5c5a0d2c5d",
            "a9bb08d0-8b6d-4428-ae16-311caf344d7c",
            "3e6285b8-93fc-430c-ade3-7fe8be2d91c5",
            6541
        );
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test1() throws ConnectionError, ProcessingError {
        Request request = new CreatePaymentTransaction(
            "db1630a2-0efd-4144-bd08-3a5c5a0d2c5d",
            "a9bb08d0-8b6d-4428-ae16-311caf344d7c",
            "3e6285b8-93fc-430c-ade3-7fe8be2d91c5",
            6541
        )
                .strategy("money-only");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test2() throws ConnectionError, ProcessingError {
        Request request = new CreatePaymentTransaction(
            "db1630a2-0efd-4144-bd08-3a5c5a0d2c5d",
            "a9bb08d0-8b6d-4428-ae16-311caf344d7c",
            "3e6285b8-93fc-430c-ade3-7fe8be2d91c5",
            6541
        )
                .requestId("5faabbba-a325-487c-8833-7afcd785dcb0")
                .strategy("point-preferred");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test3() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("jan_code", "abc");
        items.addProperty("name", "name1");
        items.addProperty("unit_price", 100);
        items.addProperty("price", 100);
        items.addProperty("quantity", 1);
        items.addProperty("is_discounted", false);
        items.addProperty("other", "{}");
        JsonObject items2 = new JsonObject();
        items2.addProperty("jan_code", "abc");
        items2.addProperty("name", "name1");
        items2.addProperty("unit_price", 100);
        items2.addProperty("price", 100);
        items2.addProperty("quantity", 1);
        items2.addProperty("is_discounted", false);
        items2.addProperty("other", "{}");
        JsonObject items3 = new JsonObject();
        items3.addProperty("jan_code", "abc");
        items3.addProperty("name", "name1");
        items3.addProperty("unit_price", 100);
        items3.addProperty("price", 100);
        items3.addProperty("quantity", 1);
        items3.addProperty("is_discounted", false);
        items3.addProperty("other", "{}");
        JsonObject items4 = new JsonObject();
        items4.addProperty("jan_code", "abc");
        items4.addProperty("name", "name1");
        items4.addProperty("unit_price", 100);
        items4.addProperty("price", 100);
        items4.addProperty("quantity", 1);
        items4.addProperty("is_discounted", false);
        items4.addProperty("other", "{}");
        JsonObject items5 = new JsonObject();
        items5.addProperty("jan_code", "abc");
        items5.addProperty("name", "name1");
        items5.addProperty("unit_price", 100);
        items5.addProperty("price", 100);
        items5.addProperty("quantity", 1);
        items5.addProperty("is_discounted", false);
        items5.addProperty("other", "{}");
        JsonObject items6 = new JsonObject();
        items6.addProperty("jan_code", "abc");
        items6.addProperty("name", "name1");
        items6.addProperty("unit_price", 100);
        items6.addProperty("price", 100);
        items6.addProperty("quantity", 1);
        items6.addProperty("is_discounted", false);
        items6.addProperty("other", "{}");
        JsonObject items7 = new JsonObject();
        items7.addProperty("jan_code", "abc");
        items7.addProperty("name", "name1");
        items7.addProperty("unit_price", 100);
        items7.addProperty("price", 100);
        items7.addProperty("quantity", 1);
        items7.addProperty("is_discounted", false);
        items7.addProperty("other", "{}");
        JsonObject items8 = new JsonObject();
        items8.addProperty("jan_code", "abc");
        items8.addProperty("name", "name1");
        items8.addProperty("unit_price", 100);
        items8.addProperty("price", 100);
        items8.addProperty("quantity", 1);
        items8.addProperty("is_discounted", false);
        items8.addProperty("other", "{}");
        Request request = new CreatePaymentTransaction(
            "db1630a2-0efd-4144-bd08-3a5c5a0d2c5d",
            "a9bb08d0-8b6d-4428-ae16-311caf344d7c",
            "3e6285b8-93fc-430c-ade3-7fe8be2d91c5",
            6541
        )
                .products(new Object[]{items,items2,items3,items4,items5,items6,items7,items8})
                .requestId("8d5e6af0-7f8e-4179-b2a3-22799a5d087f")
                .strategy("point-preferred");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test4() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("jan_code", "abc");
        items.addProperty("name", "name1");
        items.addProperty("unit_price", 100);
        items.addProperty("price", 100);
        items.addProperty("quantity", 1);
        items.addProperty("is_discounted", false);
        items.addProperty("other", "{}");
        JsonObject items2 = new JsonObject();
        items2.addProperty("jan_code", "abc");
        items2.addProperty("name", "name1");
        items2.addProperty("unit_price", 100);
        items2.addProperty("price", 100);
        items2.addProperty("quantity", 1);
        items2.addProperty("is_discounted", false);
        items2.addProperty("other", "{}");
        JsonObject items3 = new JsonObject();
        items3.addProperty("jan_code", "abc");
        items3.addProperty("name", "name1");
        items3.addProperty("unit_price", 100);
        items3.addProperty("price", 100);
        items3.addProperty("quantity", 1);
        items3.addProperty("is_discounted", false);
        items3.addProperty("other", "{}");
        JsonObject items4 = new JsonObject();
        items4.addProperty("jan_code", "abc");
        items4.addProperty("name", "name1");
        items4.addProperty("unit_price", 100);
        items4.addProperty("price", 100);
        items4.addProperty("quantity", 1);
        items4.addProperty("is_discounted", false);
        items4.addProperty("other", "{}");
        Request request = new CreatePaymentTransaction(
            "db1630a2-0efd-4144-bd08-3a5c5a0d2c5d",
            "a9bb08d0-8b6d-4428-ae16-311caf344d7c",
            "3e6285b8-93fc-430c-ade3-7fe8be2d91c5",
            6541
        )
                .metadata("{\"key\":\"value\"}")
                .products(new Object[]{items,items2,items3,items4})
                .requestId("233b1b52-5516-4efc-9b63-6e0239afe4ef")
                .strategy("money-only");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test5() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("jan_code", "abc");
        items.addProperty("name", "name1");
        items.addProperty("unit_price", 100);
        items.addProperty("price", 100);
        items.addProperty("quantity", 1);
        items.addProperty("is_discounted", false);
        items.addProperty("other", "{}");
        JsonObject items2 = new JsonObject();
        items2.addProperty("jan_code", "abc");
        items2.addProperty("name", "name1");
        items2.addProperty("unit_price", 100);
        items2.addProperty("price", 100);
        items2.addProperty("quantity", 1);
        items2.addProperty("is_discounted", false);
        items2.addProperty("other", "{}");
        JsonObject items3 = new JsonObject();
        items3.addProperty("jan_code", "abc");
        items3.addProperty("name", "name1");
        items3.addProperty("unit_price", 100);
        items3.addProperty("price", 100);
        items3.addProperty("quantity", 1);
        items3.addProperty("is_discounted", false);
        items3.addProperty("other", "{}");
        JsonObject items4 = new JsonObject();
        items4.addProperty("jan_code", "abc");
        items4.addProperty("name", "name1");
        items4.addProperty("unit_price", 100);
        items4.addProperty("price", 100);
        items4.addProperty("quantity", 1);
        items4.addProperty("is_discounted", false);
        items4.addProperty("other", "{}");
        JsonObject items5 = new JsonObject();
        items5.addProperty("jan_code", "abc");
        items5.addProperty("name", "name1");
        items5.addProperty("unit_price", 100);
        items5.addProperty("price", 100);
        items5.addProperty("quantity", 1);
        items5.addProperty("is_discounted", false);
        items5.addProperty("other", "{}");
        JsonObject items6 = new JsonObject();
        items6.addProperty("jan_code", "abc");
        items6.addProperty("name", "name1");
        items6.addProperty("unit_price", 100);
        items6.addProperty("price", 100);
        items6.addProperty("quantity", 1);
        items6.addProperty("is_discounted", false);
        items6.addProperty("other", "{}");
        JsonObject items7 = new JsonObject();
        items7.addProperty("jan_code", "abc");
        items7.addProperty("name", "name1");
        items7.addProperty("unit_price", 100);
        items7.addProperty("price", 100);
        items7.addProperty("quantity", 1);
        items7.addProperty("is_discounted", false);
        items7.addProperty("other", "{}");
        JsonObject items8 = new JsonObject();
        items8.addProperty("jan_code", "abc");
        items8.addProperty("name", "name1");
        items8.addProperty("unit_price", 100);
        items8.addProperty("price", 100);
        items8.addProperty("quantity", 1);
        items8.addProperty("is_discounted", false);
        items8.addProperty("other", "{}");
        Request request = new CreatePaymentTransaction(
            "db1630a2-0efd-4144-bd08-3a5c5a0d2c5d",
            "a9bb08d0-8b6d-4428-ae16-311caf344d7c",
            "3e6285b8-93fc-430c-ade3-7fe8be2d91c5",
            6541
        )
                .description("Fc0OifdpfY0xv6tPm9864QeZ5RNGF85gJvjuUAimWvnZeSSpnN3tAZJg82KGRO6")
                .metadata("{\"key\":\"value\"}")
                .products(new Object[]{items,items2,items3,items4,items5,items6,items7,items8})
                .requestId("cfc07cfb-977c-4828-84ed-f7af72e0809e")
                .strategy("money-only");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
}
