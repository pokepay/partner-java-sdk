// DO NOT EDIT: File is generated by code generator.
package jp.pokepay.partnerapi;

import jp.pokepay.partnerapi.request.GetAccountTransferSummary;
import jp.pokepay.partnerapi.request.Request;
import com.google.gson.JsonObject;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class GetAccountTransferSummaryTest {
    @Test
    void test0() throws ConnectionError, ProcessingError {
        Request request = new GetAccountTransferSummary(
            "5a434e63-82f5-4d3b-9357-6d0bf3dd402a"
        );
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test1() throws ConnectionError, ProcessingError {
        Request request = new GetAccountTransferSummary(
            "5a434e63-82f5-4d3b-9357-6d0bf3dd402a"
        )
                .transferTypes(new String[]{"exchange-inflow","exchange-outflow","payment"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test2() throws ConnectionError, ProcessingError {
        Request request = new GetAccountTransferSummary(
            "5a434e63-82f5-4d3b-9357-6d0bf3dd402a"
        )
                .to("2021-02-01T18:13:24.000000+09:00")
                .transferTypes(new String[]{"refund-topup","refund-coupon","topup","use-coupon","refund-exchange-inflow","exchange-outflow","payment","refund-exchange-outflow","exchange-inflow","refund-payment","campaign-topup"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test3() throws ConnectionError, ProcessingError {
        Request request = new GetAccountTransferSummary(
            "5a434e63-82f5-4d3b-9357-6d0bf3dd402a"
        )
                .from("2017-09-07T02:34:38.000000+09:00")
                .to("2024-10-28T04:46:27.000000+09:00")
                .transferTypes(new String[]{"refund-payment","campaign-topup","refund-topup","use-coupon","refund-campaign","refund-coupon","exchange-inflow","refund-exchange-inflow"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
}
