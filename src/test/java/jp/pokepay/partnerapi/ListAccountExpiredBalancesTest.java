// DO NOT EDIT: File is generated by code generator.
package jp.pokepay.partnerapi;

import jp.pokepay.partnerapi.request.ListAccountExpiredBalances;
import jp.pokepay.partnerapi.request.Request;
import com.google.gson.JsonObject;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class ListAccountExpiredBalancesTest {
    @Test
    void test0() throws ConnectionError, ProcessingError {
        Request request = new ListAccountExpiredBalances(
            "d5520d35-7258-40df-aa02-d6b18efeab19"
        );
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test1() throws ConnectionError, ProcessingError {
        Request request = new ListAccountExpiredBalances(
            "d5520d35-7258-40df-aa02-d6b18efeab19"
        )
                .direction("asc");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test2() throws ConnectionError, ProcessingError {
        Request request = new ListAccountExpiredBalances(
            "d5520d35-7258-40df-aa02-d6b18efeab19"
        )
                .expiresAtTo("2021-06-11T08:16:47.000000+09:00")
                .direction("asc");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test3() throws ConnectionError, ProcessingError {
        Request request = new ListAccountExpiredBalances(
            "d5520d35-7258-40df-aa02-d6b18efeab19"
        )
                .expiresAtFrom("2022-06-10T18:24:41.000000+09:00")
                .expiresAtTo("2022-10-28T09:31:29.000000+09:00")
                .direction("asc");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test4() throws ConnectionError, ProcessingError {
        Request request = new ListAccountExpiredBalances(
            "d5520d35-7258-40df-aa02-d6b18efeab19"
        )
                .perPage(664)
                .expiresAtFrom("2023-12-14T18:30:21.000000+09:00")
                .expiresAtTo("2022-08-20T23:23:01.000000+09:00")
                .direction("asc");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test5() throws ConnectionError, ProcessingError {
        Request request = new ListAccountExpiredBalances(
            "d5520d35-7258-40df-aa02-d6b18efeab19"
        )
                .page(68)
                .perPage(8281)
                .expiresAtFrom("2020-03-06T10:41:05.000000+09:00")
                .expiresAtTo("2024-04-13T08:24:58.000000+09:00")
                .direction("desc");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
}
