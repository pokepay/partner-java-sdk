// DO NOT EDIT: File is generated by code generator.
package jp.pokepay.partnerapi;

import jp.pokepay.partnerapi.request.ListAccountExpiredBalances;
import jp.pokepay.partnerapi.request.Request;
import com.google.gson.JsonObject;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class ListAccountExpiredBalancesTest {
    @Test
    void test0() throws ConnectionError, ProcessingError {
        Request request = new ListAccountExpiredBalances(
            "1395c3b0-3227-4847-b485-d25fcda949fd"
        );
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test1() throws ConnectionError, ProcessingError {
        Request request = new ListAccountExpiredBalances(
            "1395c3b0-3227-4847-b485-d25fcda949fd"
        )
                .direction("asc");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test2() throws ConnectionError, ProcessingError {
        Request request = new ListAccountExpiredBalances(
            "1395c3b0-3227-4847-b485-d25fcda949fd"
        )
                .expiresAtTo("2016-12-05T14:11:55.000000+09:00")
                .direction("asc");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test3() throws ConnectionError, ProcessingError {
        Request request = new ListAccountExpiredBalances(
            "1395c3b0-3227-4847-b485-d25fcda949fd"
        )
                .expiresAtFrom("2024-05-08T18:48:53.000000+09:00")
                .expiresAtTo("2025-01-11T13:02:08.000000+09:00")
                .direction("desc");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test4() throws ConnectionError, ProcessingError {
        Request request = new ListAccountExpiredBalances(
            "1395c3b0-3227-4847-b485-d25fcda949fd"
        )
                .perPage(6193)
                .expiresAtFrom("2019-01-16T17:00:54.000000+09:00")
                .expiresAtTo("2022-10-20T15:33:42.000000+09:00")
                .direction("desc");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test5() throws ConnectionError, ProcessingError {
        Request request = new ListAccountExpiredBalances(
            "1395c3b0-3227-4847-b485-d25fcda949fd"
        )
                .page(3229)
                .perPage(3545)
                .expiresAtFrom("2019-04-01T22:27:42.000000+09:00")
                .expiresAtTo("2018-06-03T18:12:31.000000+09:00")
                .direction("desc");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
}
