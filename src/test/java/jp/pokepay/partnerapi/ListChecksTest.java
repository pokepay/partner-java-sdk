// DO NOT EDIT: File is generated by code generator.
package jp.pokepay.partnerapi;

import jp.pokepay.partnerapi.request.ListChecks;
import jp.pokepay.partnerapi.request.Request;
import com.google.gson.JsonObject;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class ListChecksTest {
    @Test
    void test0() throws ConnectionError, ProcessingError {
        Request request = new ListChecks();
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test1() throws ConnectionError, ProcessingError {
        Request request = new ListChecks()
                .setDisabled(false);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test2() throws ConnectionError, ProcessingError {
        Request request = new ListChecks()
                .setOnetime(true)
                .setDisabled(false);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test3() throws ConnectionError, ProcessingError {
        Request request = new ListChecks()
                .description("MTt")
                .setOnetime(false)
                .setDisabled(true);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test4() throws ConnectionError, ProcessingError {
        Request request = new ListChecks()
                .issuerShopId("ee6badd0-c5b3-4c56-b51f-ef980b507cdd")
                .description("TE9y2XNAE3")
                .setOnetime(false)
                .setDisabled(true);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test5() throws ConnectionError, ProcessingError {
        Request request = new ListChecks()
                .createdTo("2021-08-01T23:44:55.000000+09:00")
                .issuerShopId("f6dd122e-ee0a-464a-8bc7-bc58ae2c3008")
                .description("XPnNiC8BlP")
                .setOnetime(false)
                .setDisabled(false);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test6() throws ConnectionError, ProcessingError {
        Request request = new ListChecks()
                .createdFrom("2020-11-15T19:14:46.000000+09:00")
                .createdTo("2022-08-05T04:25:20.000000+09:00")
                .issuerShopId("9a02ff99-59ff-4abf-b66f-7896014a601a")
                .description("wq")
                .setOnetime(true)
                .setDisabled(false);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test7() throws ConnectionError, ProcessingError {
        Request request = new ListChecks()
                .expiresTo("2020-03-10T15:51:49.000000+09:00")
                .createdFrom("2021-03-13T00:01:30.000000+09:00")
                .createdTo("2023-11-28T23:11:42.000000+09:00")
                .issuerShopId("1716a1d4-2b69-48b3-9741-bdc132c967f9")
                .description("b4yJ")
                .setOnetime(true)
                .setDisabled(true);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test8() throws ConnectionError, ProcessingError {
        Request request = new ListChecks()
                .expiresFrom("2022-09-15T16:30:15.000000+09:00")
                .expiresTo("2020-03-11T01:57:15.000000+09:00")
                .createdFrom("2021-12-27T02:26:27.000000+09:00")
                .createdTo("2021-08-15T04:29:41.000000+09:00")
                .issuerShopId("2186d1bc-acfd-4e79-a6fe-90c68d8ab366")
                .description("Mss3BCM")
                .setOnetime(false)
                .setDisabled(false);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test9() throws ConnectionError, ProcessingError {
        Request request = new ListChecks()
                .organizationCode("UYbJTLCmHziAp4CkdoifZpsEk1MSut")
                .expiresFrom("2022-09-04T13:23:01.000000+09:00")
                .expiresTo("2022-01-13T13:02:25.000000+09:00")
                .createdFrom("2021-07-19T22:40:09.000000+09:00")
                .createdTo("2023-06-23T14:10:53.000000+09:00")
                .issuerShopId("8ba5cfaf-6a5c-4aa8-818e-94da92780bd1")
                .description("JW")
                .setOnetime(true)
                .setDisabled(false);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test10() throws ConnectionError, ProcessingError {
        Request request = new ListChecks()
                .privateMoneyId("75e1347d-5e93-4cd0-ae27-b08271b57319")
                .organizationCode("8jo0FFtkS")
                .expiresFrom("2024-02-12T00:39:20.000000+09:00")
                .expiresTo("2023-06-19T07:50:56.000000+09:00")
                .createdFrom("2021-07-21T07:10:46.000000+09:00")
                .createdTo("2021-07-27T17:59:43.000000+09:00")
                .issuerShopId("ffbd5ac4-ee36-416a-8943-df14c4e6de11")
                .description("h2tTXRk31")
                .setOnetime(false)
                .setDisabled(true);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test11() throws ConnectionError, ProcessingError {
        Request request = new ListChecks()
                .perPage(2669)
                .privateMoneyId("7ccc1643-f69c-4a54-86cc-7e2d5a1f0d5a")
                .organizationCode("ViOwB77qid1b1hWZ4NsgMKCVqbI844")
                .expiresFrom("2022-11-18T10:12:07.000000+09:00")
                .expiresTo("2022-09-16T05:12:13.000000+09:00")
                .createdFrom("2021-08-21T22:48:32.000000+09:00")
                .createdTo("2022-12-12T15:59:53.000000+09:00")
                .issuerShopId("8b7b48d2-1bd9-4b7b-827b-10085efff06f")
                .description("LEi")
                .setOnetime(false)
                .setDisabled(true);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test12() throws ConnectionError, ProcessingError {
        Request request = new ListChecks()
                .page(3857)
                .perPage(4761)
                .privateMoneyId("a4290ecf-9dce-4e11-8660-83bc7c8d4e85")
                .organizationCode("PRtPDCwK3W0nPCCKBWrLsP5tf")
                .expiresFrom("2023-03-29T23:52:20.000000+09:00")
                .expiresTo("2024-06-22T07:58:43.000000+09:00")
                .createdFrom("2023-12-09T22:48:56.000000+09:00")
                .createdTo("2020-08-19T15:13:20.000000+09:00")
                .issuerShopId("4cf643d2-468b-43f9-931d-3a9e28b78a1e")
                .description("1l8k")
                .setOnetime(true)
                .setDisabled(true);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
}
