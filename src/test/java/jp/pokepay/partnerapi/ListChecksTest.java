// DO NOT EDIT: File is generated by code generator.
package jp.pokepay.partnerapi;

import jp.pokepay.partnerapi.request.ListChecks;
import jp.pokepay.partnerapi.request.Request;
import com.google.gson.JsonObject;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class ListChecksTest {
    @Test
    void test0() throws ConnectionError, ProcessingError {
        Request request = new ListChecks();
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test1() throws ConnectionError, ProcessingError {
        Request request = new ListChecks()
                .setDisabled(true);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test2() throws ConnectionError, ProcessingError {
        Request request = new ListChecks()
                .setOnetime(false)
                .setDisabled(false);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test3() throws ConnectionError, ProcessingError {
        Request request = new ListChecks()
                .description("hQ5F53O")
                .setOnetime(true)
                .setDisabled(true);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test4() throws ConnectionError, ProcessingError {
        Request request = new ListChecks()
                .issuerShopId("30853410-ba1f-49b0-b114-eefd46550964")
                .description("4q")
                .setOnetime(false)
                .setDisabled(false);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test5() throws ConnectionError, ProcessingError {
        Request request = new ListChecks()
                .createdTo("2021-05-20T06:14:13.000000+09:00")
                .issuerShopId("c8902082-4bcf-4ef1-95f0-839079ddfc88")
                .description("3FCag")
                .setOnetime(true)
                .setDisabled(false);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test6() throws ConnectionError, ProcessingError {
        Request request = new ListChecks()
                .createdFrom("2023-02-16T00:48:19.000000+09:00")
                .createdTo("2024-06-16T00:39:55.000000+09:00")
                .issuerShopId("ebd028e6-6adf-4072-8b6f-5566fd28affc")
                .description("Pbckq")
                .setOnetime(true)
                .setDisabled(true);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test7() throws ConnectionError, ProcessingError {
        Request request = new ListChecks()
                .expiresTo("2023-05-24T09:15:36.000000+09:00")
                .createdFrom("2020-02-05T16:51:20.000000+09:00")
                .createdTo("2023-11-26T06:17:27.000000+09:00")
                .issuerShopId("0757cef7-ff25-405f-bdd9-b6af167ee158")
                .description("IH4e")
                .setOnetime(true)
                .setDisabled(false);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test8() throws ConnectionError, ProcessingError {
        Request request = new ListChecks()
                .expiresFrom("2022-01-10T05:32:17.000000+09:00")
                .expiresTo("2020-06-12T01:13:26.000000+09:00")
                .createdFrom("2023-02-24T15:46:19.000000+09:00")
                .createdTo("2024-07-26T05:32:16.000000+09:00")
                .issuerShopId("6d44a4d6-6d87-44f6-838f-367d4b15d750")
                .description("xcY2")
                .setOnetime(false)
                .setDisabled(true);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test9() throws ConnectionError, ProcessingError {
        Request request = new ListChecks()
                .organizationCode("6IT5Qfof")
                .expiresFrom("2022-06-29T02:38:54.000000+09:00")
                .expiresTo("2020-02-09T21:05:45.000000+09:00")
                .createdFrom("2023-02-17T17:49:56.000000+09:00")
                .createdTo("2022-10-03T17:29:40.000000+09:00")
                .issuerShopId("66612ebf-2f9d-45a2-a7aa-8425ba28aa57")
                .description("X24Gu")
                .setOnetime(true)
                .setDisabled(false);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test10() throws ConnectionError, ProcessingError {
        Request request = new ListChecks()
                .privateMoneyId("ee1d679c-85d9-40e9-9adc-7976c5f03ce5")
                .organizationCode("EWpsodOkObVsCJ3N")
                .expiresFrom("2022-09-18T15:36:14.000000+09:00")
                .expiresTo("2022-10-25T10:03:19.000000+09:00")
                .createdFrom("2022-08-04T17:54:31.000000+09:00")
                .createdTo("2021-01-09T19:58:58.000000+09:00")
                .issuerShopId("ae9082e9-5215-4321-a646-ee4c20042c4d")
                .description("5N7s")
                .setOnetime(false)
                .setDisabled(true);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test11() throws ConnectionError, ProcessingError {
        Request request = new ListChecks()
                .perPage(7418)
                .privateMoneyId("cca5a7c8-2a87-41c5-bdf0-d2a6a2515247")
                .organizationCode("vFXEgb98pKt2Sl5r494jY1ROY")
                .expiresFrom("2023-09-30T16:03:57.000000+09:00")
                .expiresTo("2022-09-07T09:17:36.000000+09:00")
                .createdFrom("2023-10-23T12:49:57.000000+09:00")
                .createdTo("2020-10-07T06:10:30.000000+09:00")
                .issuerShopId("c3cc84ec-780d-4966-9338-25104b92eaa3")
                .description("vCClAyXpV")
                .setOnetime(false)
                .setDisabled(false);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test12() throws ConnectionError, ProcessingError {
        Request request = new ListChecks()
                .page(7849)
                .perPage(7211)
                .privateMoneyId("2ef97dca-d769-4461-8fcc-dbf510cfc6fd")
                .organizationCode("7o4Z")
                .expiresFrom("2021-07-27T13:59:01.000000+09:00")
                .expiresTo("2023-05-15T22:48:56.000000+09:00")
                .createdFrom("2020-01-22T07:31:46.000000+09:00")
                .createdTo("2021-06-05T04:12:54.000000+09:00")
                .issuerShopId("663f7b71-5d11-4e65-8c6e-a7f68dd350a2")
                .description("l8KApm")
                .setOnetime(true)
                .setDisabled(false);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
}
