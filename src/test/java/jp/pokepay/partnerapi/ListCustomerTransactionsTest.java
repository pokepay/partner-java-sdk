// DO NOT EDIT: File is generated by code generator.
package jp.pokepay.partnerapi;

import jp.pokepay.partnerapi.request.ListCustomerTransactions;
import jp.pokepay.partnerapi.request.Request;
import com.google.gson.JsonObject;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class ListCustomerTransactionsTest {
    @Test
    void test0() throws ConnectionError, ProcessingError {
        Request request = new ListCustomerTransactions(
            "9f866404-a4b9-4c06-86c9-a91d366fbf98"
        );
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test1() throws ConnectionError, ProcessingError {
        Request request = new ListCustomerTransactions(
            "9f866404-a4b9-4c06-86c9-a91d366fbf98"
        )
                .perPage(7204);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test2() throws ConnectionError, ProcessingError {
        Request request = new ListCustomerTransactions(
            "9f866404-a4b9-4c06-86c9-a91d366fbf98"
        )
                .page(6197)
                .perPage(3702);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test3() throws ConnectionError, ProcessingError {
        Request request = new ListCustomerTransactions(
            "9f866404-a4b9-4c06-86c9-a91d366fbf98"
        )
                .to("2021-09-22T04:34:14.000000+09:00")
                .page(4278)
                .perPage(4813);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test4() throws ConnectionError, ProcessingError {
        Request request = new ListCustomerTransactions(
            "9f866404-a4b9-4c06-86c9-a91d366fbf98"
        )
                .from("2022-09-27T13:26:23.000000+09:00")
                .to("2024-07-02T09:39:04.000000+09:00")
                .page(8239)
                .perPage(4851);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test5() throws ConnectionError, ProcessingError {
        Request request = new ListCustomerTransactions(
            "9f866404-a4b9-4c06-86c9-a91d366fbf98"
        )
                .setModified(false)
                .from("2020-09-18T03:07:29.000000+09:00")
                .to("2023-02-11T01:50:10.000000+09:00")
                .page(6027)
                .perPage(3291);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test6() throws ConnectionError, ProcessingError {
        Request request = new ListCustomerTransactions(
            "9f866404-a4b9-4c06-86c9-a91d366fbf98"
        )
                .type("expire")
                .setModified(true)
                .from("2020-03-14T23:56:42.000000+09:00")
                .to("2021-03-16T11:46:47.000000+09:00")
                .page(1592)
                .perPage(8421);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test7() throws ConnectionError, ProcessingError {
        Request request = new ListCustomerTransactions(
            "9f866404-a4b9-4c06-86c9-a91d366fbf98"
        )
                .receiverCustomerId("5f5ef0d3-710f-43d7-8064-4ac9f69208af")
                .type("cashback")
                .setModified(true)
                .from("2020-10-26T02:35:06.000000+09:00")
                .to("2020-02-04T16:39:22.000000+09:00")
                .page(6975)
                .perPage(7089);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test8() throws ConnectionError, ProcessingError {
        Request request = new ListCustomerTransactions(
            "9f866404-a4b9-4c06-86c9-a91d366fbf98"
        )
                .senderCustomerId("900b8cc6-13c2-40c9-a395-7e4f14f13734")
                .receiverCustomerId("b2748590-403b-468c-90e4-56a8b1f48991")
                .type("transfer")
                .setModified(false)
                .from("2020-07-31T18:55:08.000000+09:00")
                .to("2021-12-21T13:50:38.000000+09:00")
                .page(6984)
                .perPage(9376);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
}
