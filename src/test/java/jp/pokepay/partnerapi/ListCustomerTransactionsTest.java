// DO NOT EDIT: File is generated by code generator.
package jp.pokepay.partnerapi;

import jp.pokepay.partnerapi.request.ListCustomerTransactions;
import jp.pokepay.partnerapi.request.Request;
import com.google.gson.JsonObject;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class ListCustomerTransactionsTest {
    @Test
    void test0() throws ConnectionError, ProcessingError {
        Request request = new ListCustomerTransactions(
            "d76e4625-b721-41de-8016-533ba403af37"
        );
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test1() throws ConnectionError, ProcessingError {
        Request request = new ListCustomerTransactions(
            "d76e4625-b721-41de-8016-533ba403af37"
        )
                .perPage(4406);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test2() throws ConnectionError, ProcessingError {
        Request request = new ListCustomerTransactions(
            "d76e4625-b721-41de-8016-533ba403af37"
        )
                .page(3292)
                .perPage(1350);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test3() throws ConnectionError, ProcessingError {
        Request request = new ListCustomerTransactions(
            "d76e4625-b721-41de-8016-533ba403af37"
        )
                .to("2022-08-29T06:24:05.000000+09:00")
                .page(5800)
                .perPage(4742);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test4() throws ConnectionError, ProcessingError {
        Request request = new ListCustomerTransactions(
            "d76e4625-b721-41de-8016-533ba403af37"
        )
                .from("2020-12-26T06:20:26.000000+09:00")
                .to("2022-06-28T12:27:36.000000+09:00")
                .page(8130)
                .perPage(7016);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test5() throws ConnectionError, ProcessingError {
        Request request = new ListCustomerTransactions(
            "d76e4625-b721-41de-8016-533ba403af37"
        )
                .setModified(true)
                .from("2021-11-30T08:32:41.000000+09:00")
                .to("2020-07-08T01:04:24.000000+09:00")
                .page(5155)
                .perPage(7678);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test6() throws ConnectionError, ProcessingError {
        Request request = new ListCustomerTransactions(
            "d76e4625-b721-41de-8016-533ba403af37"
        )
                .type("expire")
                .setModified(true)
                .from("2024-04-03T17:59:31.000000+09:00")
                .to("2021-11-23T14:51:11.000000+09:00")
                .page(3040)
                .perPage(6758);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test7() throws ConnectionError, ProcessingError {
        Request request = new ListCustomerTransactions(
            "d76e4625-b721-41de-8016-533ba403af37"
        )
                .receiverCustomerId("340b81d6-7330-478e-949a-74b5cf02a35a")
                .type("cashback")
                .setModified(true)
                .from("2020-03-02T05:26:30.000000+09:00")
                .to("2022-12-05T19:33:44.000000+09:00")
                .page(2795)
                .perPage(5639);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test8() throws ConnectionError, ProcessingError {
        Request request = new ListCustomerTransactions(
            "d76e4625-b721-41de-8016-533ba403af37"
        )
                .senderCustomerId("a099b350-bf20-4147-8409-631bb5e17a44")
                .receiverCustomerId("0e58204d-3757-4e57-bef9-4c9e72fe06ea")
                .type("cashback")
                .setModified(true)
                .from("2022-03-09T15:54:36.000000+09:00")
                .to("2020-09-03T16:09:45.000000+09:00")
                .page(8)
                .perPage(600);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
}
