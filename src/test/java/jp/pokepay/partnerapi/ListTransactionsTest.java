// DO NOT EDIT: File is generated by code generator.
package jp.pokepay.partnerapi;

import jp.pokepay.partnerapi.request.ListTransactions;
import jp.pokepay.partnerapi.request.Request;
import com.google.gson.JsonObject;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class ListTransactionsTest {
    @Test
    void test0() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions();
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test1() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .description("hp9H0ad0YtQKTj0BkSgYQz24iASn5lyemE5l4AsmvPdxvfIQbbYpjKqADM8LC716USBurGCC3hIYjLUVgRi7uFxeMBpJMUHVIQ4v");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test2() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .types(new String[]{"exchange_inflow"})
                .description("VjWxSChkZDMKW6gAUCsCVQVQaArECOm2gdXE3ZpPsSj3x611qn6LJ9Y36rVxPzJ0zHDmr8xyHlBmOqhKyaQqTIq2qGppv09wKEM2KXC6Ccrv5");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test3() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .setModified(false)
                .types(new String[]{"expire","exchange_outflow"})
                .description("mqiWcO5JhTPS0DB66Nyxn8g5vfqMJYlMVQywdVLcGuBfVx7rqBoHaagkkYPKmkK0i2yHr5bDPgYq6h0mNyo0nigfKEti5mSTQufZvvt401qHA5nWEBuoPwBtfuOeYxpMLTFMY6yPPWW8yeXQDGYe2E8aTtDmLdRQlmjSGmwsdBQDSNQwFhqACnjz00MzRqwSvvocdN");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test4() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .privateMoneyId("477021e1-e0be-47d0-ae44-09fefaef1804")
                .setModified(true)
                .types(new String[]{"expire","exchange_outflow","cashback","payment","exchange_inflow","topup"})
                .description("Fa2g3jnFKnghje4OeAbdQqWa0h1XJhf79LLFQLeMWKYK3fT2XrjoFwpk3dBJi49uRpiLGfZqripmKxsovF9IlhOOePLS7qjlUmm9Mnh5Cl2Ua9egDYbFViTjL5mjkgkRV6ikIRfscd6K7uwIUV8rrKqhC6");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test5() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .organizationCode("z-7s0-O2e-8---jI-1utmf--2-Z")
                .privateMoneyId("9c177425-1f83-4e16-8683-cceaa094ae6a")
                .setModified(false)
                .types(new String[]{"cashback","topup"})
                .description("0qxY5fA6AXcy7xYbVzXv2k4t2t7iayKlNa7cqOov4Km0kXujYzFT16UEXJdUW4Rsu21sgy8NiqxURHD5UDaj1Xn7Zt6SdWuXenY3JwJthGE3oxwl89r3p23NphgrGO1cCmzjMgPWnbc4lVP9LYMVIJamqQyQ8Jww6HKIavM8cuY8STjRsYPAefULo");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test6() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .transactionId("dRbQG")
                .organizationCode("99-")
                .privateMoneyId("043bc574-c5d6-4e40-8e11-6374cfcf0bca")
                .setModified(false)
                .types(new String[]{"exchange_outflow"})
                .description("9vsuXVfRQf960jJ5tYAPxUC7eiQeB00b8fi7pSBKe7wZzplyrBpEGSsvqFBnmi4pczse4ShWo0hNur1LqvxrWUxcr03s7eL2NzcDUIl4HmHUOrZbCz1JwC5hAO9iBzbQZNJOzD5116zxFK2");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test7() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .terminalId("67681f16-44b3-40d5-8023-a3a8ff86b708")
                .transactionId("HqAKxoz")
                .organizationCode("2-3V-RcfPf-dkuV01n-R-")
                .privateMoneyId("32ba5aa9-4f4b-41d2-84ce-ab37e17f4315")
                .setModified(true)
                .types(new String[]{"exchange_inflow","topup"})
                .description("XGZOc8QHZVnTwq1WwSoV58vYf7Hq8VDOT5zlyV9FCGNTqXj4");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test8() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .customerName("vyibmhZMlgeSt2iuDVl8XI7BdvkF5E4M")
                .terminalId("b4c071db-c467-4e8c-887a-4cdfd836b201")
                .transactionId("cyGpM")
                .organizationCode("77-BN8w1-T-P-z-eeUiF")
                .privateMoneyId("3b22333e-ad37-4300-9e43-4e880318101b")
                .setModified(true)
                .types(new String[]{"exchange_inflow","exchange_outflow","topup","payment","expire"})
                .description("FRnbFzQ2wBSw0JITHLhFH7qqEE3msBIHYPJ1eNPhAJfx8yknBZp56BW1JDIWT58jobIBrzh0kHHE5XgxyeXEfuF0s5O9aZQiBG3GVsCzMs3twCL4yMc0mcdm7iEUgcWJ4L67JhVYVzBZjpcTRBVMl6");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test9() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .customerId("37aa6313-31c7-43cb-aeda-f99bd4707364")
                .customerName("9Vhmb1a4OwkuHTD3bVRBuwm7Ronc7yzISlXHwwOJOsGK8t3qJxiXogVD7sI7AvxBhYJB6b3YPYohwDpof6J4wkISTujlQTzAu6rJCqkakRb9HF2J2E9IT2JNixkWyUhpfbi")
                .terminalId("f8ec1ee8-378b-4d1a-9747-84a1a63fa151")
                .transactionId("HmdrUO")
                .organizationCode("Z8j")
                .privateMoneyId("67f9e5db-e43d-4f73-9ab6-c3c07cbea05c")
                .setModified(true)
                .types(new String[]{"exchange_inflow","cashback","exchange_outflow","topup","payment"})
                .description("0Q0x2GNQadt1uZCjXXjrY3W5iSxRef5PjyX4E0V6GF0ucVImOEtxINExqBDUgqu5eAmdQquCipFRDTAYc3czicSYNAHQrfMxKYRXOULKoEJvA");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test10() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .shopId("ed6379a4-2ff8-49c0-a873-76d557a0b68e")
                .customerId("f8a1c126-eff7-4f5a-be3c-0d685e173832")
                .customerName("jnPHoAtkaZy4bHXfVwQ3IKhehlmYAc954ZhkO5etR0MwrAkojtu4zLObs64tfC6IpWczaSiWaCrARH7o9Cjr9coenjwi5PKrKhLaTCpPKaae85wCbyf93qoHF6o1F5W4nKEnIddvz1A3lCuePLtov7b0fyR1aXgjz8w8sOmCGX4mHkYzBNvY3ZfkCkEPuRxQJK")
                .terminalId("96f36bcd-8aeb-4dbd-a8e0-c5378d725740")
                .transactionId("4rGpU")
                .organizationCode("8-4--7rFA17-f3C-i-7H-o2-----")
                .privateMoneyId("ad633cf3-22dd-4491-a8c8-4d98c717bc05")
                .setModified(false)
                .types(new String[]{"exchange_outflow"})
                .description("kYpFaQ04kVacrPJDSM4JAuouz76ij5YKoP9VNpAnkQ6cEIFQgUfLqUwdawraXeS7c2btvgnCEMVcxW79N8IteBmUKqnb2boFYevS5cpJkYcAZwK7VO4J5wwsCYRt");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test11() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .perPage(7932)
                .shopId("a835d176-fdb5-4518-9e07-f7b3ae03e354")
                .customerId("3a30e03a-5bdd-4d9d-a354-a29e64915ab9")
                .customerName("5jGye1Fu")
                .terminalId("7d003081-38a5-42ae-8e12-4803bfdaa1cf")
                .transactionId("h3aqW5d")
                .organizationCode("T67-83-I--ZCj402-4O-TqMfZBym-nd3")
                .privateMoneyId("37f21541-2e5e-4c50-a592-6d4961d9707d")
                .setModified(false)
                .types(new String[]{"exchange_inflow","topup"})
                .description("KVXmVognvMi2R5PEVGPAshYtrGDEOyVb3xx60TpQwXoeNMlFtnfHltNseLcOcxPML2XmqGADACZWrxQfgy561nZkgEkDukVvWfzR4QvByvw7KZGjnUmg3W14AWYeX8Moil2Jw0FDE4cHsZlFKXrTcKc9IDojCJwfaS62KXzlUVCSawMwdQItSw1xYeXJi70MbHM9h3Kp");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test12() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .page(5251)
                .perPage(7820)
                .shopId("56838df5-c1e0-4c82-b0b5-4a67113050b4")
                .customerId("c76eddf7-dbd9-4957-9ca3-60793e4f98b1")
                .customerName("WNOI7voKbM0564Dt3FQVkLxar")
                .terminalId("d2f0b7a8-3ed8-4a91-ae89-74bd76caff02")
                .transactionId("CSYFjG")
                .organizationCode("5wsR2Si0")
                .privateMoneyId("fd8b4dd7-ce39-48d4-8298-a6ca03a496fd")
                .setModified(true)
                .types(new String[]{"cashback","payment","topup","exchange_outflow"})
                .description("ojXMGBWHKU3zpvuUgYPStAnVYQD1xwmeG5n5dQUguHgAzX");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test13() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .to("2020-11-12T20:17:54.000000+09:00")
                .page(5843)
                .perPage(2294)
                .shopId("bcb7abb7-74fe-4e84-879c-fdfb9003b4f4")
                .customerId("76b84ef9-b45e-492d-9264-5a8906b7ab27")
                .customerName("n6sLB2ZhhJLHizoTYdozl0nKsFGrI2CONkodS1sy7usV8zdvwactgCr5KugHFgNWDqNwoLltn4oKgf91fyXsX6kxIXcQGB1RLhqZpULceC1kHUl2U7UQmSSf7J7E1zaL8HLdnpdu62D1yZS4RztoqEH6kIE7alRAFrM3neLmJ7gaYXPrQiNCUJiEHeBeGXQqrM0MhuxdQk1fjLR4NiZgWNzaHuJ2XUsKtVsV1IHM")
                .terminalId("f235ae38-a97f-48d4-8a36-aed7ceae501e")
                .transactionId("pfFfE")
                .organizationCode("xoQ0HjCm-n8-q87-K--S")
                .privateMoneyId("9f637112-127c-4949-8d7f-34c0df727201")
                .setModified(false)
                .types(new String[]{"expire"})
                .description("d1JJGk3oHvTsxWOjaSCBs046zoq9M");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test14() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .from("2022-11-12T13:44:00.000000+09:00")
                .to("2021-06-11T03:12:07.000000+09:00")
                .page(9168)
                .perPage(3343)
                .shopId("2fd5c9d3-720a-4ac3-8cf9-48417054634b")
                .customerId("3b2f4e1f-eeaa-4fd8-8a61-d9f8222f2aa8")
                .customerName("GXpbpbAHOusHIY26rb95Ee0PgowPWUD76pgtU0gG8GuyaoUJ5C14IL0PaMNtBjYVZB5ddAP8YmfVfgrJcEyOPlS3y9E2jnTlSyUC4mgMJe6hIJa7GU3db3lZLW1xscGjvCUnbyiLtfpy5C2Hw2Oxxm2b")
                .terminalId("0a9acc91-3f87-4a55-a8e8-37d1afb80cdc")
                .transactionId("SU")
                .organizationCode("Q5-H--i-b-34--M--x--6tZo")
                .privateMoneyId("45c731c7-8f05-4cd3-a24f-c3873cfb318b")
                .setModified(false)
                .types(new String[]{"topup"})
                .description("9T3oYfqrSBqvawtrhYwkdReELQzJxv1xN2D7i89Cb00jAv1nzawiR13B0WKoBfKblXmjMYvlN2Ack4ndDAr00123WMWczZUQGja632zDgU8sCLWdMs4SquxOO5jc2IYveMzPqT0ij7mvJsEIf8TpEHzEtHod5cEJ1dK3KLIZkCX3ttugdgj4cPLU8B3Z5NobO");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
}
