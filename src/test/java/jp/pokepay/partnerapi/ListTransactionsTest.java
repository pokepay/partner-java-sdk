// DO NOT EDIT: File is generated by code generator.
package jp.pokepay.partnerapi;

import jp.pokepay.partnerapi.request.ListTransactions;
import jp.pokepay.partnerapi.request.Request;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class ListTransactionsTest {
    @Test
    void test0() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions();
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test1() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .types(new String[]{"topup","exchange_inflow","payment"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test2() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .setModified(true)
                .types(new String[]{"topup","exchange_inflow","exchange_outflow"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test3() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .privateMoneyId("6e7ae46a-e8b4-4d89-b206-b6c326327fb3")
                .setModified(true)
                .types(new String[]{"exchange_outflow","exchange_inflow","topup","payment"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test4() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .organizationCode("nGJH-ql-o24N-12oh-9-")
                .privateMoneyId("1c5741bf-e735-45ea-b88c-c641d0a8493a")
                .setModified(true)
                .types(new String[]{"exchange_inflow","payment"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test5() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .transactionId("0575a1d1-2603-4309-8949-6237ab6ce8a3")
                .organizationCode("04--ax-eM--T0-ONgjju-9i-DHZ")
                .privateMoneyId("5e3ef12e-7a5c-4f21-8608-f0c8788c3fb5")
                .setModified(false)
                .types(new String[]{});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test6() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .terminalId("3d364722-73b6-4d25-9999-cb8e6c6ec275")
                .transactionId("31d8fddb-0b57-43c8-baeb-03580767aeab")
                .organizationCode("H-1G3m9VFZ-L68nag-CD")
                .privateMoneyId("5b985ba7-fcf4-4bf4-bdf1-6b3ea4ee00f3")
                .setModified(false)
                .types(new String[]{"exchange_outflow","topup","payment","exchange_inflow"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test7() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .customerName("jSeEuAkeqxEh4reSHu8ZgcM5L0VdsDmyvkQJU1aHFFmVAkj4UvvSWc4dLY0wUKBFfzDG5cjFjbHT0hC8nzS5w7RUAS9e6o8iXsjczZrzek6uYV03aZ87HSRPawNuZRdFmTV8MMLeRCk6RXavj1HRisORCFBBgwOLEJPyREjIqOR1UIR4v8phInPfzVXyMgheOdgQQ1OdU3tgGwhegZcOfw12wMC")
                .terminalId("312f4c4b-38e1-455f-8394-646c60b7ebf3")
                .transactionId("103a7bfb-36cb-4964-9b87-9f6db251fde0")
                .organizationCode("d246Vw--dW6R-m874m-gUz--")
                .privateMoneyId("f357ac03-c4cc-4205-ba99-f377b9241dff")
                .setModified(false)
                .types(new String[]{"exchange_inflow"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test8() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .customerId("a88d3927-ff48-4d25-915b-49b6de576736")
                .customerName("QWWZV4GdcZxiYb7AnuLSPlY5TrY0PXbV0cJBSMw9IFxDxqRQdz7YitqHVNTzeCUeU67wWOBrsE4bCifp4hiVplAhaMHiNUSK9jMvAJJ4mi7NJWOu9CqNokn3S8j8yDsf7IGnAgYtEDE1IabXSmxOZit3LYc")
                .terminalId("8e62b54f-aa39-4051-9490-5bf16699f605")
                .transactionId("f4877d0e-5d89-4fbf-b0f3-8ae6c79d80d5")
                .organizationCode("V-ghYea")
                .privateMoneyId("f08beac8-a857-4db7-982c-fc0764857bdb")
                .setModified(false)
                .types(new String[]{"payment","exchange_inflow"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test9() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .shopId("200649b2-53eb-4b3e-964a-b84e07abb0d3")
                .customerId("7ff7c3fd-67da-40ae-a221-422a8e82de9f")
                .customerName("oJd7b4s6IoPHATAqerXJEGEwClyugZ9FAWaRF00JJ2HaqZRJhlVOtQ2zfQXGo360k9nskkEmDtTC5BzPKqPi4Q5wfZbLvlW71mEhpVir5bR7W5OB6ktHGGMQ0CMKZFET4cgG2DcU4w0ueGaWze6s98NoIO1heP")
                .terminalId("c7f81410-c856-4096-9df1-527140a85a9c")
                .transactionId("a745e354-5129-4d05-a6cd-e0faaae0ed81")
                .organizationCode("--6Q2d6w6--UG6-X3--76")
                .privateMoneyId("358b890a-92a2-4071-b598-3d3a270e99d0")
                .setModified(true)
                .types(new String[]{});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test10() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .perPage(993)
                .shopId("93e4da03-8d24-4725-b83a-b345845d94f1")
                .customerId("25f1510d-77cf-421a-9e1c-028ade51e604")
                .customerName("S7g6Xa1jazhBcFpuiKgjT9cGHzpiBdOfDj6L54BPYX5vDHwz3IysDDnJZ3HYKflBi4M68QQ5fywqgB82h6nfyj26UemjfrtLKaUkeW7L0zaaSIcv1Tp8KiriKScohgU8HOVPspU5msj5vkWsz9ZGEkaoDAo6mhok9mQqmxDvlA825AAiFA7mZOL3y2suR38nQ1OpJI")
                .terminalId("74b977a7-dc3d-494c-b116-f07dfdb718e4")
                .transactionId("e3f2dbcc-5a11-41eb-b056-8456309c6218")
                .organizationCode("TjlzP--0H-rdPKp-i5-1OS9F6z-1")
                .privateMoneyId("7882463e-c2d8-4dc9-b871-050933a24ead")
                .setModified(true)
                .types(new String[]{"payment","exchange_outflow"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test11() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .page(7982)
                .perPage(3173)
                .shopId("914d9452-0f79-43b0-89f7-3b08c2633940")
                .customerId("3f62d0d8-3f2e-47d5-89fd-96a4638c5665")
                .customerName("Fdg3j3j5JBkVChL6SWpF1sFDYt5RgyJnBrrc0cBXzueKyTQRCA4bNqaKSb5A99XZTEnzH2vBVWUByDgX1zm0lljwfzHlmU4wSnPRT8wgc2hYhs56s8RoaPOty9LCRxehWMJkmpJkHCyWPpipALLWL2hKaDdrAJI5Q7WQoCwZLkZcfK9njBfC6jqcg9OOjUNLkeBk1VWXbiJdtszd8tXHU03QyHjzT6quG")
                .terminalId("5ee2f800-1b08-490d-a90e-1359d53f0930")
                .transactionId("53be5c00-dffc-4b5f-aa77-73de049e36a3")
                .organizationCode("C582u--u-tkX")
                .privateMoneyId("b1aaa743-be25-416c-b4c6-6ba2af3921ab")
                .setModified(true)
                .types(new String[]{"topup","exchange_inflow","exchange_outflow","payment"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test12() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .to("2016-01-30T23:50:36.000000+09:00")
                .page(6864)
                .perPage(80)
                .shopId("46428564-3469-4f04-9cd2-1584c3220131")
                .customerId("51155816-38b4-49c7-8103-b54bfe025853")
                .customerName("COCyXrGHS01v0fc4sniRuypXMZakaEdo71vyYCk8qFMiOO9dCS9wtbTJzhhasUxQbU4VLHFrJRPcOBLjxk5A0EDPXWIyqfDA5gyb6KOmcc4trA")
                .terminalId("a7165e76-4f08-4a56-88f7-c8ddca7b894f")
                .transactionId("a446b49b-ab95-4ae3-9356-91e30cffca74")
                .organizationCode("wc-7UKp6W-smmy-0gZx---zI0-")
                .privateMoneyId("0ba1ff98-549e-4792-b5b9-d6005110cf3a")
                .setModified(false)
                .types(new String[]{"topup","exchange_inflow","payment","exchange_outflow"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test13() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .from("2021-02-02T08:58:51.000000+09:00")
                .to("2024-12-08T01:16:36.000000+09:00")
                .page(3475)
                .perPage(7845)
                .shopId("e9dd9fe1-e5ee-4166-9213-02036f1cc238")
                .customerId("331c6658-d491-4cc5-8aa2-a181809f451e")
                .customerName("NBn9AyN8AkFBpZu2wstUXeyzqlfQxoLCWROhKGmyqDmTcK5FxiChAPryduVHdEK5U2xMcT64KvjZ6HrRllB23TmouAYHEApSB1OapwbTdzDsQmGBlX0AGF6OiL7qJtANwYxWXX8H9mzumQlsenJREFVPTZ2l3RrpvVD86lx766zdGW5hNzuaL2c8p3wrIitSKaxVhib0gAmZ2yYijJiF7XjQynKWb01sjytQtuYkYKnjRQwCUp")
                .terminalId("6b18a83a-84f9-46e3-9dc5-96544242cd87")
                .transactionId("8971d837-cde7-4007-9b7c-b0ed2284551e")
                .organizationCode("7Ip0A--7--")
                .privateMoneyId("8c68e327-14ef-4c36-972d-1c91394b98a5")
                .setModified(false)
                .types(new String[]{});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
}
