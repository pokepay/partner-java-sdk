// DO NOT EDIT: File is generated by code generator.
package jp.pokepay.partnerapi;

import jp.pokepay.partnerapi.request.ListTransactions;
import jp.pokepay.partnerapi.request.Request;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class ListTransactionsTest {
    @Test
    void test0() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions();
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test1() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .types(new String[]{});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test2() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .setModified(true)
                .types(new String[]{"exchange_outflow","exchange_inflow"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test3() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .privateMoneyId("b3749756-8106-4174-9c3a-2ba298e8ca11")
                .setModified(true)
                .types(new String[]{"exchange_inflow","topup","payment"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test4() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .organizationCode("I2-2-G9--1")
                .privateMoneyId("615f8196-f5f3-4ff6-b715-547504f77f22")
                .setModified(true)
                .types(new String[]{"topup","exchange_inflow"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test5() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .transactionId("1b5c03a7-3b86-4aa3-a278-768e9bdfec3f")
                .organizationCode("-7d-g-b6iS32WX-gqLu-M-4A-JG--")
                .privateMoneyId("b6dcb618-b35a-48b9-8ffa-214edef7544c")
                .setModified(true)
                .types(new String[]{"exchange_inflow","topup"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test6() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .terminalId("85fc10ef-c6c1-42a0-9c8c-d48f10a8d575")
                .transactionId("c452fd84-b760-46d0-932c-136b1bc38fab")
                .organizationCode("F6rD68Aq")
                .privateMoneyId("c2ebb542-b325-4685-b332-deff24cc0e4c")
                .setModified(false)
                .types(new String[]{});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test7() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .customerName("YYNQ77hNnDgeQkP6BrHNLW2TjgwJkClYsxYjLV6mNckmXWb6cDTOBEvT1fZYocBrt")
                .terminalId("ef6d2f8e-61e7-47bf-9777-3a52a35dd4cc")
                .transactionId("6df9733d-2e0f-4769-8a78-ba65098fedac")
                .organizationCode("0S9s-b-zSFjOgue-Z")
                .privateMoneyId("77f6420b-37e6-4631-8f98-d6a364679511")
                .setModified(true)
                .types(new String[]{"exchange_inflow","topup","payment"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test8() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .customerId("97241719-7d86-4463-b3ef-c4477a3a86a8")
                .customerName("3F55uy5")
                .terminalId("131ba2dd-bf36-4e66-96cd-83ffed3701ec")
                .transactionId("fbbd6597-ee5c-4d26-92b4-94ef052f8776")
                .organizationCode("6K2LE-uqNcy")
                .privateMoneyId("e56727b6-f9a2-4dd9-9097-34a697d8e187")
                .setModified(false)
                .types(new String[]{"topup","payment"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test9() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .shopId("f1dc9af6-286d-48c4-a022-9add0ad0fc3e")
                .customerId("22aa7df1-0e50-47c1-8762-edfd409bf19d")
                .customerName("tHJHRtQBqCHsxk71kIOiSHcZ37iojnk7j2j33qMA4N2evwLBNS7QyCEhtgNDuAnxydB9u3o7ZMeTosoRh4S0mExQI1uCwHXvSS9xqXNJMeqv2rRxx8SeYgA5RTAZIE0d3whSKLF4xWXCgQOdSsQVPrApoltrzZbMjGbqCaDUv1CsWTy6z2FdXbfXavW2HwaVVWGcOvRgfjTir1eeHpnGAvFN")
                .terminalId("664d6dbc-f235-4f75-95d6-7b484ba0a6fe")
                .transactionId("0f45fd4b-0a49-4e16-b79f-5d04dd825aed")
                .organizationCode("t16640PHYa--3")
                .privateMoneyId("337159e9-673d-4cea-98b4-717f44b4f160")
                .setModified(false)
                .types(new String[]{"exchange_inflow"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test10() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .perPage(6619)
                .shopId("a60a02ea-20c8-473d-8df7-9c6818b08862")
                .customerId("857192ad-1239-4a6c-9ad6-ab8a1aa9e839")
                .customerName("sTjb")
                .terminalId("6abace12-a20e-44df-9271-9ba6f099d98e")
                .transactionId("b3954460-8538-4284-976f-197fc1b8e2dd")
                .organizationCode("DE---XMxvFoMK8-V6ok2U8mU-vl-")
                .privateMoneyId("1944eeef-a05d-4999-bc09-a9bc6ab38f59")
                .setModified(false)
                .types(new String[]{"payment","topup","exchange_outflow"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test11() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .page(7183)
                .perPage(1101)
                .shopId("92828a74-28bb-44ca-bf79-6a3d730d9f1a")
                .customerId("0b558669-a50d-48d7-9862-604411210ad6")
                .customerName("6Ss7attO0KDvZ2PuoFKU33PYYZTEIyRndmm72c26Cd6B3OB7swghUIdkqUOY2HAI87h7tC8vMnTzjNmFWDzLZEPN7HQXwymFrbXYvN3cal4RO9jT63dRDxKNVo")
                .terminalId("d3085e22-2090-4a65-b7cc-d7ef61ad46e1")
                .transactionId("76ba0a1e-5a4a-4184-a767-6dc9536c8ccd")
                .organizationCode("5--66---0")
                .privateMoneyId("286b2aff-1133-49bc-b8e7-3fd658419da3")
                .setModified(true)
                .types(new String[]{});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test12() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .to("2024-02-07T00:18:51.000000+09:00")
                .page(1836)
                .perPage(8878)
                .shopId("0fd3be87-5a46-41cc-850b-5ced1949a5f5")
                .customerId("fc9860b9-1785-4e2d-927c-ff565354c9b4")
                .customerName("TQ1eFfFoOmA6KgKFTgUMIqeaKPydQtxKkPEiJ9F7s09s2D07ZJtROtnJyz65lsPnpU0js5rsIZ4cWpER3UtPkG2eq1I6SZr9Xo8DUROCVDxPSk72x92MmliF")
                .terminalId("c125b0ac-8437-4935-8d5e-ac409e6006a4")
                .transactionId("8d65d325-aa46-4b1e-9b68-605ca0b25be2")
                .organizationCode("KvUQCe9g1-pc3n9--z---qEPH-")
                .privateMoneyId("19c2ba7f-219f-4a06-b5e3-66342fae0485")
                .setModified(false)
                .types(new String[]{"exchange_outflow","exchange_inflow"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test13() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .from("2019-11-19T13:18:57.000000+09:00")
                .to("2023-08-17T15:58:28.000000+09:00")
                .page(7192)
                .perPage(3376)
                .shopId("e40db014-b033-483d-8441-9fee5e06359b")
                .customerId("38b979eb-23dc-407e-b6c2-9fd4b9a70ad4")
                .customerName("gxHzzgdLIxgPMdYrCUsTg7mFBD5JyTl3OSbQF6o9LFFmkiVCdqahnfY1HR9DfMzD3LCASqee9bY3sHOGNF3Mai4m7no77RN8AasCH56gnyuHFpFsNPJmzuH")
                .terminalId("a80df4b1-7b47-471e-9fc8-b659302db327")
                .transactionId("e4d8e6a0-634f-4487-80a6-e4234e8c8b8f")
                .organizationCode("v4-u-fJf-2CG7-0")
                .privateMoneyId("257b84cc-1ba7-4b5b-a101-6fd8033c3a63")
                .setModified(true)
                .types(new String[]{});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
}
