// DO NOT EDIT: File is generated by code generator.
package jp.pokepay.partnerapi;

import jp.pokepay.partnerapi.request.ListTransactions;
import jp.pokepay.partnerapi.request.Request;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class ListTransactionsTest {
    @Test
    void test0() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions();
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test1() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .description("F4fJVtnG3Avmta20vIgud6F1UgGMHbk2IRflsvwuZxk0nQmXMvg0FcWUrBHOSV7LC2s46hfsRF0YKxTClCMK7WZ9");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test2() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .types(new String[]{"exchange_inflow","topup","exchange_outflow","payment"})
                .description("kjfoAuPSksHUuefNAm0yTlB8Y7jnhE6v0ICVfZpB32LWZFMYYNQ77hNnDgeQkP6BrHNLW2TjgwJkClY");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test3() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .setModified(false)
                .types(new String[]{"topup"})
                .description("jLV6mNckmXW");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test4() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .privateMoneyId("a40cfb3f-af62-467d-b6e3-c1af51828844")
                .setModified(false)
                .types(new String[]{"exchange_outflow","payment","exchange_inflow","topup"})
                .description("EvT1fZYocBrtgwRLixenA1GWqf2JPqamqpbbuSj1PURjYRasH9ARntTDK9f1O2csoG3");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test5() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .organizationCode("ig--4-fcSL")
                .privateMoneyId("aa92f50d-93f6-40a2-9803-fed3e036e42f")
                .setModified(false)
                .types(new String[]{"payment"})
                .description("KMzKtPMLBX6YLvmDqPAbWtHJHRtQBqCHsxk71kIOiSH");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test6() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .transactionId("0fb67407-43e3-4511-8399-d1974a85b8da")
                .organizationCode("F--Z-5I-1mh8EC-B8-ZcAV-")
                .privateMoneyId("efd2a76f-9ab7-4890-9a8c-efcd17be6265")
                .setModified(false)
                .types(new String[]{"topup","exchange_outflow","payment"})
                .description("Rh4S0mExQI1uCwHXvSS9xqXNJMeqv2rRxx8SeYgA5RTAZIE0d3whSKLF4xWXCgQOdSsQVPrApoltrzZbMjGbqCaDUv1CsWTy6z2FdXbfXavW2Hwa");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test7() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .terminalId("8e458efe-91de-4e56-8fd6-ded7b78bb2c7")
                .transactionId("2f6339e3-904f-4df6-92e7-a2fe07d2701f")
                .organizationCode("qh2M--2-9BgDQ-L41a5t16640PHY")
                .privateMoneyId("e4fae6f0-0800-49c7-8372-bc4f3be9d20a")
                .setModified(false)
                .types(new String[]{})
                .description("VQZjHwhb9lV9sTjbq8Wo22UU1er3T1gBtfr20CiDsCwyLdW5AzEeQbE5VhNxjrtNh84WLuHKWoYQpDLtJyiWbDVy6Ss7attO0KDvZ2PuoFKU33PYYZTEIyRndmm72c26Cd6B3OB7swghUIdkqUOY2HAI87h7tC8vMnTzjNmFWDzLZEPN7HQXw");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test8() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .customerName("mFrbXYvN3cal4RO9jT63dRDxKNVoewLoaJggIMA5wXB3CTdPu3I6Gb57N6Bfk723xgVJhWc2FLmu9RV4wTQ1eFfFoOmA6KgKFTgUMIqeaKPydQtxKkPEiJ9F7s")
                .terminalId("afc82730-867d-4fb9-b384-fcb2f9f13d44")
                .transactionId("50349298-229b-4cb0-b75a-2dca7e16a0fd")
                .organizationCode("H64O--QS--G-q--P-6")
                .privateMoneyId("a259373f-52a9-4586-ac65-5cab84228a3c")
                .setModified(false)
                .types(new String[]{})
                .description("Zr9Xo8DUROCVDxPSk72x92MmliF75MFhbZKuKGU7dTPisUgKnCVzFujd5tp1lylHobnm6HycWppeOG5c4bSq");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test9() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .customerId("6d04b015-9c56-403e-82c7-808b9a0345fd")
                .customerName("p3Ank6BTTvgxHzzgdLIxgPMdYrCUs")
                .terminalId("90023026-69bc-407c-948d-9e11135456aa")
                .transactionId("3c5fe1e7-910a-46e0-b704-41ed5d3c1c46")
                .organizationCode("67")
                .privateMoneyId("694d2edc-4dab-4d19-803b-cc69c379a756")
                .setModified(false)
                .types(new String[]{"payment","exchange_outflow","topup","exchange_inflow"})
                .description("qahnfY1HR9DfMzD3LCASqee9bY3sHOGNF3Mai4m7no77RN8AasCH56gnyuHFpFsNPJmzuH1GHYOOmiUvKwyiQYSSoPK3N5ZGrmU0unMptspEioBBqGcJLaXcepDTPRHElLNQ");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test10() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .shopId("5dae2af2-ebf6-445b-bad7-fa3b475d913f")
                .customerId("6e68a055-afa0-4f82-886e-1001fd307d6b")
                .customerName("7KWAioiFIGH7shpxz5S2r82nr4Char2DsC6IOlQ3ZCa8lZmMT5")
                .terminalId("fcb66ced-3d2c-49c1-9b8f-2546816ea216")
                .transactionId("dd584a5e-f8dc-4441-bd3d-39c963bad19c")
                .organizationCode("3So-gBis-Dk--zO-olBuG-7XhI92-qH1")
                .privateMoneyId("6033af2a-2850-4426-a6d7-1d4450a2086e")
                .setModified(false)
                .types(new String[]{"exchange_inflow","topup","exchange_outflow"})
                .description("peMsqUtDBV");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test11() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .perPage(2023)
                .shopId("97f940b5-bbca-4005-8ed7-c1d0858659c2")
                .customerId("3a0776c0-7bfb-4a70-bad3-1800628e550a")
                .customerName("tetKx5V0IU1H2quyHwM52367FRSK6ZN3dPGJYhssMJ1c81K9V4uwaN6FqKGuMQEbIhSKLSxcJDAAH0jwIP")
                .terminalId("51efd7e2-6f9d-4bac-a9cd-bf5d5db4905e")
                .transactionId("29a3eaa3-231c-451f-a8d9-faec39ca81ad")
                .organizationCode("nI-s85b-BLd-6dCV-0Brcq")
                .privateMoneyId("64ce4fd5-e801-44cf-9412-9d80b97a29bf")
                .setModified(false)
                .types(new String[]{"payment","exchange_inflow","exchange_outflow"})
                .description("7KrzTtAdseC51TTzGU05VTqLiAQDTT40IDYkIvu0sCcHMaDTHEOIiZjdOoQ");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test12() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .page(5497)
                .perPage(9594)
                .shopId("d03d8be0-1757-4c89-a30f-613e284a8ce7")
                .customerId("1316862f-53a1-469d-8092-487bd5226a40")
                .customerName("vBQUAudiHvhALf0xr0YedjAtAhk4Q5ZEYWHc6DIDKem3xaXPio5o0q9x0iUyrfJOMPlYYA9d24g2qlkQeuW1v6Ot04J")
                .terminalId("6dff4f01-af6a-47d2-be74-c8e0d4ef07dd")
                .transactionId("3d08c424-18a1-42a9-9ecb-b85d1e6e884a")
                .organizationCode("-mdp-X7--l-6Y0rQy1")
                .privateMoneyId("dcc480ac-5d41-4298-b474-fb4dd4432d13")
                .setModified(true)
                .types(new String[]{"exchange_inflow","exchange_outflow","topup","payment"})
                .description("CEIs7P52Qn8Ps6rGg4gxhQEPHlDMgzo7RyqyjDQCvIVLohtP7YX7LIJvkHIDHAM5JdvPW8u4K9jehE0FIX2d1fsIJRaq4cseT3Jr8x9EZ1qV4Ufa8eDKBhpNX1jWPk8Z43B0y0B9mfs2NjGqIbT9OwqnkaPpwID0eLyZpFNZ79bus52pNLLPoSL84S");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test13() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .to("2015-12-16T20:32:38.000000Z")
                .page(7262)
                .perPage(5704)
                .shopId("e82469f7-3983-4b97-8190-f22ad3a9db2e")
                .customerId("96c233c3-1fc5-4268-96db-2f9cd23b3e6f")
                .customerName("VmB4cFvbTIGcXWAqG4BSfipEZMFGhk16I7iXigWOnUAkBWGfv1h3SdKWf7Mk6qxlTgasH11ZahWwt0KCw4FDQO05qLTqGDbzQDuaFv4VsaDUMga8HPHLfj8VAxLQCn6DppPY7uZKs5wMf3MBYDCuFCMBOgtd28MFakoJp4sttlPyu0hLTf3LV1FvqM27O2bqybT3XFSWXNEvBDebROkI568yn3vAdg2WzE6cQfJbdKVhYmdI")
                .terminalId("dd96efe5-4be1-4cac-9dfb-e509011991c0")
                .transactionId("d1842a47-085c-4c74-a49d-097989f0e19d")
                .organizationCode("l-UB-y5Wn--5I--9u393gS--s3")
                .privateMoneyId("fe6213e7-e07d-4a7e-adfe-2cf43ac6f070")
                .setModified(true)
                .types(new String[]{"payment","topup"})
                .description("uBR2bpCJbWCsF1XOMwOMfbCbRi8MeoObjQBbD5vivOmPF0WWyAe43BTjYiVtdGDmgs4Vk2VUx2tI5N4bIOpNtWwRJ7taFGOOZNR9womkOYYXss1h0ac");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test14() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .from("2017-06-10T18:38:01.000000Z")
                .to("2015-11-22T06:59:25.000000Z")
                .page(1622)
                .perPage(1059)
                .shopId("dd17bced-76aa-4cc1-82a8-c1450ce3e6b9")
                .customerId("59b79ec4-2f57-4974-814e-a4206a752548")
                .customerName("5sfx8Sg9q1O62IQSAJ63xgskw6yfFQPcXHRn98CcSXK5Zlq5PBZ9vRV0xbdBDEvdzHS5KI84n4B4JwtxMbsrynFzleqVzZvPQrwaZ5xfzumz05DAlrcpNez8TuusjLCXuqGq9aXt2RyxOmHZB8Yd9TYL0bkCAVqSRIdac4BtBwC2bbOKrqEvt")
                .terminalId("c0716dc8-7e53-4bed-a5df-c42ab08daccc")
                .transactionId("9bac8fe6-e33d-40db-b67e-67e70c3ab2ad")
                .organizationCode("10-7--Wn--w1A-43n-n7u38w9q")
                .privateMoneyId("ace6436e-314c-4242-b6c3-8ce6c180cdf5")
                .setModified(false)
                .types(new String[]{"exchange_inflow"})
                .description("WsdUnRrH9KHVuXFGKt4lw9lRVMCAhIxweHf4mhVFw56RKDemCYdfHKy6kNARZB0e7gSo7Ck5GjWL9QXL9sfwRokQiO2gJLOs7NWiVmOaSDg31Umvi1k0xZepHVlU5UCBk1mC260SZIPf7lUxpBEwOCUnBV1wl8i3");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
}
