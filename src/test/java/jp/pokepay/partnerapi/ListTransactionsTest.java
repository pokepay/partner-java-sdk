// DO NOT EDIT: File is generated by code generator.
package jp.pokepay.partnerapi;

import jp.pokepay.partnerapi.request.ListTransactions;
import jp.pokepay.partnerapi.request.Request;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class ListTransactionsTest {
    @Test
    void test0() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions();
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test1() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .types(new String[]{"exchange_inflow","payment","topup","exchange_outflow"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test2() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .setModified(false)
                .types(new String[]{"exchange_outflow","exchange_inflow"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test3() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .privateMoneyId("b0e20dcc-6cd6-43b6-8ced-193d7dbe6626")
                .setModified(true)
                .types(new String[]{"exchange_outflow","topup","exchange_inflow"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test4() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .organizationCode("U7---98MN-1J0H7B2mkqKBRc")
                .privateMoneyId("6f46f5e2-58f5-4ad3-aa82-3131b8ed3486")
                .setModified(true)
                .types(new String[]{"payment"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test5() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .transactionId("4be0e808-acfd-48d2-bba0-6ee16fb668f3")
                .organizationCode("-94VQVW6")
                .privateMoneyId("722d27cd-83ff-41ec-975c-dd26601b7212")
                .setModified(true)
                .types(new String[]{"exchange_inflow","topup","payment"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test6() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .terminalId("e78ae711-0574-40e2-a2a2-a84ea16beacd")
                .transactionId("ec4665cc-76d7-46fa-bdfb-8f9f544589dc")
                .organizationCode("E-uqNcy2")
                .privateMoneyId("209c5dd9-ff90-4697-a687-e2bf85f0d224")
                .setModified(true)
                .types(new String[]{"topup","exchange_inflow","exchange_outflow","payment"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test7() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .customerName("qPAbWtHJHRtQBqCHsxk71kIOiSHcZ37iojnk7j2j33qMA4N2evwLBNS7QyCEhtgNDuAnxydB9u3o7ZMeTosoRh4S0mExQI1uCwHXvSS9xqXNJMeqv2rRxx8SeYgA5RTAZIE0d3whSKLF4xWXCgQOdSsQVPrApoltr")
                .terminalId("be686aa8-3f7a-4f9b-9abd-34e284a533cd")
                .transactionId("9fbf7b94-f6ea-4580-a147-533d4b3050e2")
                .organizationCode("W--")
                .privateMoneyId("933cdfb2-4248-4ff7-90e1-8efe6c7991de")
                .setModified(true)
                .types(new String[]{"exchange_inflow","topup","payment"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test8() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .customerId("2462904f-9df6-44d2-a7fe-701f92f63de6")
                .customerName("jTir1eeHpnGAvFN5uVHKI7mM3plgJR5fwzKIFQcpGZZVlRU03Fa2F6PUopGrOCi")
                .terminalId("f891673d-bcea-43d8-b47f-f160c96a6123")
                .transactionId("9f5866af-ae0d-4f85-9d56-25d1baaf7e3e")
                .organizationCode("5-IRf3rmIh2u-6S5dE---XMxvF")
                .privateMoneyId("cec4ed5c-6e8e-4765-acd1-2d0a1f869f62")
                .setModified(false)
                .types(new String[]{"topup","exchange_outflow"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test9() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .shopId("5ce98456-2468-42ce-b80a-7a967538af6a")
                .customerId("5b930ff2-9a19-4274-8e68-38b81b705b3c")
                .customerName("4WLuHKWoYQpDLtJyiWbDVy6Ss7attO0KDvZ2PuoFKU33P")
                .terminalId("b8247fd9-5c3f-41a0-995a-f0a97e3a7205")
                .transactionId("2e425384-0fd4-43c5-a8c9-e48854dcd679")
                .organizationCode("V-M8Jx-xU--qxJ-K4936-E-mG5of")
                .privateMoneyId("b7bd9dce-d0a0-4190-8fb7-8f2ced541348")
                .setModified(false)
                .types(new String[]{"topup"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test10() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .perPage(2690)
                .shopId("4ce811a8-f03c-4386-ad46-f48cc6bd13f2")
                .customerId("859a1562-79d8-4559-9d76-77186ab12826")
                .customerName("N3cal4RO9jT63dRDxKNVoewLoaJggIMA5wXB3CTdPu3I6Gb57N6Bfk723xgVJhWc2FLmu9RV4wTQ1eFfFoOmA6KgKFTgUMIqeaKPydQtxKkPEiJ9F7s09s2D07ZJtROtnJyz65lsPnpU")
                .terminalId("f77d502a-c540-4db0-aa7d-14f307d36bb5")
                .transactionId("85faebf2-6b0f-4d12-b349-1187e0c0c82a")
                .organizationCode("tSY--8p-n4-V345d-8uN---l-4dU57")
                .privateMoneyId("5e39f6e9-83fe-4646-ac37-e93549c5a8cd")
                .setModified(true)
                .types(new String[]{"topup","payment","exchange_inflow"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test11() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .page(8297)
                .perPage(8285)
                .shopId("a0b25be2-7e5a-49a2-8b8c-2d758f52084b")
                .customerId("b6e2c3c0-5947-4155-85b7-b303045a0e15")
                .customerName("dTPisUgKnCVzFujd")
                .terminalId("c1e93c1c-b8b5-46a5-baf4-54ad692797f0")
                .transactionId("ccc1c0b1-3ca2-4b94-be84-2f8654ecad7b")
                .organizationCode("31W2--Qx-tEO--w4w--si97mY--nm")
                .privateMoneyId("4eb80dd9-f37d-4372-83d5-56dd60c65c0b")
                .setModified(false)
                .types(new String[]{"exchange_outflow","exchange_inflow","topup","payment"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test12() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .to("2017-12-11T16:40:27.000000+09:00")
                .page(5803)
                .perPage(8680)
                .shopId("e355910a-a6e0-4bb7-84ed-1c4638b12142")
                .customerId("7350b687-e326-421b-965f-7fc4de5ccd35")
                .customerName("JyTl3OSbQF6o9LFFmkiVCdqahnfY1HR9DfMzD3LCASqee9bY3sHOGNF3Mai4m7no77RN8AasCH56gnyuHFpFsNPJmzuH1GHYOOmiUvKwyiQYSSoPK3N5ZGrmU0unMptspEio")
                .terminalId("994ac3aa-26c2-48ad-82f1-0d86b89137fe")
                .transactionId("739969c7-77e3-4c8e-8a10-84cca3191ba7")
                .organizationCode("-7--A81-X--abP9GO-i7-3q898T")
                .privateMoneyId("4eb955b2-8d72-4938-b299-f9ee63e4d190")
                .setModified(true)
                .types(new String[]{"payment","exchange_outflow","topup"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test13() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .from("2021-01-27T03:07:28.000000+09:00")
                .to("2020-05-26T15:27:23.000000+09:00")
                .page(1809)
                .perPage(8848)
                .shopId("f98e6ae1-be72-4ca3-bdb2-b4449dc1d7f3")
                .customerId("5355d23c-f6c3-4b36-9abb-b704a0ef7449")
                .customerName("lQ3ZCa8lZmMT5mAFAIeN7EOzXnRCcbLOsMiN4tjoxBAROpiRc0j39oPNkDTFwGmGihFz2z0gAPfWDnSv")
                .terminalId("35887cb3-8909-4a17-b065-a1cd54d760f3")
                .transactionId("1eb35071-1a8a-4c55-9caf-b41d2ba903f4")
                .organizationCode("gv0j-5-a")
                .privateMoneyId("4179e8b1-7e5e-439f-8883-88b274ab4c71")
                .setModified(false)
                .types(new String[]{"topup"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
}
