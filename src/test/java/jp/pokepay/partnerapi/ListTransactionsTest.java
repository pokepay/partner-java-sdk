// DO NOT EDIT: File is generated by code generator.
package jp.pokepay.partnerapi;

import jp.pokepay.partnerapi.request.ListTransactions;
import jp.pokepay.partnerapi.request.Request;
import com.google.gson.JsonObject;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class ListTransactionsTest {
    @Test
    void test0() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions();
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test1() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .description("vnCSCIadN71sILW4Zcenh4w49C97OdQoFrlTgMYtn97SPKANuQ3ulrK52sRrSPWTnlWZOKL59TdObr3IBjIHCRb8xZbx7W17mh6Gock9QyuadLa8Y5qDvgPSmisZAb6TZdMq6OHxfQ9IstwvfKl6VXfaE4pmPl");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test2() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .types(new String[]{"payment","exchange_inflow","cashback"})
                .description("WtQGlfNIlZvAHCQ0PdbaSINO14v");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test3() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .setModified(false)
                .types(new String[]{"cashback","expire","exchange_inflow","topup","payment","exchange_outflow"})
                .description("7eVQSRNwlKV6SSGe2Hc7TwHSZwkYYHggvBsZtwXyhKhnTyZJVFEh0zAOp1Gs85l8GadcNYjStqBxEMy1dvEQRr");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test4() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .privateMoneyId("35f6a403-f202-446e-8528-08d0bbc9b30f")
                .setModified(true)
                .types(new String[]{"cashback","exchange_outflow"})
                .description("cTHmKVdi8Yyv7xcbBjs4Z2aLiquNrUsPiX2Uu5flQBPI5intYKVlTuIPfUDxtM1");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test5() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .organizationCode("")
                .privateMoneyId("d758e7b2-21f3-499c-b4db-7e871c899f94")
                .setModified(true)
                .types(new String[]{"expire","exchange_outflow","cashback","exchange_inflow","payment"})
                .description("YTbdrWNYYuWbB7SnFRaoOEmVQ8RbjYvFQxnnRjQUSkKiCeA1gIPwiUGhKO5rfmHPg2LSDMoVHqbmuBzawTNksGrmRICJlmYQ6ffl6JVRFMoJ1ZwN");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test6() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .transactionId("p7K6JCCPzq")
                .organizationCode("-D1----5-c9-01S8---0388--5i")
                .privateMoneyId("1275c41f-daf5-4f61-806d-efacd97b622c")
                .setModified(false)
                .types(new String[]{"cashback","topup","payment","expire","exchange_outflow"})
                .description("t9sBwFqGIoMcKUyrxBZB6ll6QFkdJRKcOK0QgmkPQROo1Kq");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test7() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .terminalId("8aba500b-2e6d-44f1-8583-82b33134d363")
                .transactionId("RiDusT")
                .organizationCode("S-PQNWe-KL3Z9PJ5-7")
                .privateMoneyId("eb059658-af09-4649-83f9-1e50e38a0f2f")
                .setModified(false)
                .types(new String[]{"payment","cashback","topup","exchange_outflow","exchange_inflow","expire"})
                .description("11TysX30xA0fA2PAOH1Dl3sBU3G7jXvTRfbgkW6Ts3VxfT0dMpPB32yybwKjMfIsucVN6Nz1GoDEp1KACR8U9zBbfaMh6");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test8() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .customerName("ritC32ofNTSE2pDZaDWto1iLy1FjhkSO2h88cgkGIgIODsPWEmGGdg8Jp8iWiu1ng0E8IDwQuXvhoVG4MFI9oab3guRWxtDaj7EgM5W1rfhiG4KYM3j1F7wMpY")
                .terminalId("4f8cbe36-ae26-4411-b834-ec33091494a8")
                .transactionId("dCL")
                .organizationCode("G91zV-5")
                .privateMoneyId("a5b0d05b-da22-49c3-9788-0d4c098d3802")
                .setModified(true)
                .types(new String[]{"payment","expire","exchange_inflow","exchange_outflow","cashback","topup"})
                .description("JzshBLcx9qPEheSPWwu5eDUXqUmuroMi5nR");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test9() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .customerId("dda1c988-0232-4aaf-9d4a-2579e9d28d64")
                .customerName("ht4P7zJc9TgYtgbu8xcrMgrdDFdOwYXEeZbPkYjk2HYzZ5hN")
                .terminalId("771facdc-c33c-4592-94e2-9022bc0b5807")
                .transactionId("DlxypJ")
                .organizationCode("U-zn-6-3-3-eI464--")
                .privateMoneyId("f5625332-3b6a-44c7-9359-667cbd81aecb")
                .setModified(false)
                .types(new String[]{"exchange_outflow","topup","exchange_inflow","cashback","expire"})
                .description("4dt6fqW9k6jzULjEbetGQexVaGWCofNY5GUtQTPrdThuhECkcz5aVfjXHFWUJARY81qC57PF4arwJrI0CS6iQW9J1cistU7KnDrWAzdc0prN1yVZHXT14kUR09GR7SUUb99bSrBZ5Et7M");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test10() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .shopId("f80c90d7-3550-4787-860e-d683b8c5b2db")
                .customerId("541a13a0-3e1e-4155-bdaa-0a8a7e22915a")
                .customerName("4Vaaotq0An3OycUJEytR8fc0D2k5CZtPk841IlgG9WXSUw71kAvse6SBkSn9Gn1kOEVSy9ftXLZMjyn4ujDVAD8FFCJfOWwqCplFv0ZJegKTX0BmPV1DVXin5OChRm6wujryeVg6ecOQ23WZ7pqzjhaHYqpvRK2VnV6PvTwyoZSMRW7Zuqp2btI8Aj")
                .terminalId("ecc4f781-baa1-441d-9e17-105646584db7")
                .transactionId("CabcOF")
                .organizationCode("-x--s-0D4WOA-")
                .privateMoneyId("704911d2-29ba-4f33-a504-fb2a251ccb6e")
                .setModified(true)
                .types(new String[]{"cashback","expire","topup","exchange_inflow","exchange_outflow","payment"})
                .description("AmRG5");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test11() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .perPage(8196)
                .shopId("0fc1df1f-bca4-41fd-8f18-3ca206d9fd3d")
                .customerId("15a874f1-c00d-4f06-bfe8-e11f1d26371c")
                .customerName("pYb4eVZtTzrZLV0OHZguSSL5hc5OkBY0QWHdJ8d8mqa6GKbk99zVLaocwiCmkSDSg2Q3BoDdS4eqOUpimhnBEkXK4P7hVhUkmW0KSQuwNyPlzGVY8f3y4wVPndNOj3vOisfF6xWgrBqrZwcB1i5zIEOmzL667WelcxB5Poi6iCvxS3EGNIXc7600WlQUxU8EVnuFA8HbyTehwVBEhjNdJcS")
                .terminalId("3d3977af-c21d-4c37-9fb7-4937cb00616d")
                .transactionId("zAeZPMFa7")
                .organizationCode("YD2G")
                .privateMoneyId("8f29b285-8634-47ad-88bd-2531c130c0cf")
                .setModified(false)
                .types(new String[]{"exchange_inflow","topup","payment","expire"})
                .description("AIQc4RKAvuWldsUIkhwwvCoh89N4DQukWV0Pe9os7gx2ESSYBhhnnMspQcaDSQJuTdYEUSrxyseFZsT8lzRdFapdTKZYfQ992lrD5N5HcFn6P64S0jAW7KfkC1m");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test12() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .page(6403)
                .perPage(628)
                .shopId("492afd18-68f7-48ef-8ddf-cf50b4ba27d0")
                .customerId("df6fe541-a1fe-4838-bbb6-0ed98fb2fb19")
                .customerName("ALbUY7JEkE30MnnnMkwVUnlpBuHQspBUrJSvargvXOh6smOii7655DTiIKLnr0iOe4YBbWRyM9rh4EnH1ZcoTqyqU6bgAqmoUnQzXnJfMYJglOdf6TpVUhDtHiYQgxY5CaSeoqXB82KYR7yYIuF20DrUteqsdFh3i3vzuQdrtybGR82wjxzk9I6auNDYbsCMJL")
                .terminalId("ab24ddea-38d4-4155-a7ea-bf72ce52c2c9")
                .transactionId("i")
                .organizationCode("y-Y--QbI-W-")
                .privateMoneyId("553023a6-ed91-421f-b960-aa4c5a66dbcb")
                .setModified(true)
                .types(new String[]{"cashback","expire","payment","topup","exchange_inflow","exchange_outflow"})
                .description("lZwveO4HF98tVoACbiemnCKwkYO85nzf1V0idZIeLrcuWVdqWP1In8Xa3v609bcFzLXVm43iD7HKEme3wuBU83kmkvgY2dl49XlYZRfjFMBGGf");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test13() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .to("2021-04-07T09:44:19.000000+09:00")
                .page(4412)
                .perPage(1960)
                .shopId("3ee8d9ac-6de7-439e-b46f-c5b0f23acf77")
                .customerId("4dbd6619-e34f-4681-b041-3fcd7c781336")
                .customerName("bfAEAEs2N9lixrwzHuPZhuOorCgpqPTvBqv9KgFlD72SIueNZpMeboK0puRfofc1brCPUpqPqbweuMWbH9ZZbh9N0tIU7s71hG4oYlxKZHrizQLhvWSodBSb1E0mjfLQ1CE")
                .terminalId("782aa052-d7f5-4265-8f19-21ba898d2d66")
                .transactionId("X8xL5n2owD")
                .organizationCode("8V")
                .privateMoneyId("75be6d7f-3207-4c5d-924c-f648ba50bef9")
                .setModified(false)
                .types(new String[]{"cashback","exchange_outflow"})
                .description("SoRvamOG");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test14() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .from("2020-08-31T03:31:46.000000+09:00")
                .to("2021-12-07T11:40:58.000000+09:00")
                .page(2808)
                .perPage(5999)
                .shopId("9e06bfd2-3ee8-4380-9c0b-cdc00221a015")
                .customerId("7361390f-5f75-4829-ad6a-30f0b76feec0")
                .customerName("nMnG8h")
                .terminalId("c5a1ce43-646f-4b28-ba12-a3971b162883")
                .transactionId("FrdDsIG")
                .organizationCode("--14--gPST")
                .privateMoneyId("c8b02f9b-470c-482e-9fb9-35c7cf6eaadb")
                .setModified(false)
                .types(new String[]{"exchange_outflow","payment","expire","topup","exchange_inflow"})
                .description("0oFyyFRomoGW2Nb1ZJTXUdVwQfwaAewUA5pBsbXuAJc2");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
}
