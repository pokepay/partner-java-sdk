// DO NOT EDIT: File is generated by code generator.
package jp.pokepay.partnerapi;

import jp.pokepay.partnerapi.request.ListTransactions;
import jp.pokepay.partnerapi.request.Request;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class ListTransactionsTest {
    @Test
    void test0() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions();
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test1() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .types(new String[]{"payment"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test2() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .setModified(true)
                .types(new String[]{"payment","topup"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test3() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .privateMoneyId("3235a26f-f013-45e5-b472-a6b7ff84dc0e")
                .setModified(true)
                .types(new String[]{"exchange_inflow","payment","topup"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test4() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .organizationCode("c-vDc4--I1s0j")
                .privateMoneyId("e67ae7d4-0017-44da-aea5-7a03548e01c7")
                .setModified(false)
                .types(new String[]{});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test5() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .transactionId("86f9b405-dcfa-44ef-bf80-e6bab7b34825")
                .organizationCode("2ed8lh5Sf7q2---Eu11McO8US42sN")
                .privateMoneyId("6d9a40f4-bcab-48c2-aef0-85ecb51daf9b")
                .setModified(true)
                .types(new String[]{"payment","exchange_outflow"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test6() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .terminalId("7867fee6-87d7-4fbe-935b-b0adede7fb41")
                .transactionId("2db55464-46ff-435e-9a4a-e5fff7095db6")
                .organizationCode("A2X-")
                .privateMoneyId("741ba9a0-d863-4bdb-803b-36dae132449d")
                .setModified(true)
                .types(new String[]{});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test7() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .customerName("80maqZ5tZpI1ruY2tWg8fi1ENNE0Qk9BA03KbHdrlhn1WInEVpn38j4v4PdzBHcVsC65Ofbi3szeLNhazlTs4ZOK1qvaTrSylIKfp1ckqQssorYM8lcy8vJkXUjFTIOucrS70BmKpVXLcuIQJCYmiMbwcAixOLCnjerRuDyxHWe08JzKv9qevfZ5gaSQPAhsN0klhJVtdmvqyHyRTsVdSNeg3b0iOc6lp7n0yjblDlplCSu3QB0oI4Tzp3AH0")
                .terminalId("f0d916c7-f1c5-452e-8c0f-5a9f7d780f67")
                .transactionId("6515a684-d2b2-4860-b829-dfad797b7038")
                .organizationCode("-e-5-p---n-2-b1f-X-")
                .privateMoneyId("4c43227c-ceb4-45d6-ba73-2b381b7f39ab")
                .setModified(false)
                .types(new String[]{"exchange_outflow","topup","exchange_inflow","payment"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test8() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .customerId("763b3599-aec2-48a8-893e-ad2adccd0925")
                .customerName("zkmRls2S1bESZOc2tCW0VOA6fYwzAHpLsxBj7YwuIESjf4Ksdck8DR8tiaaulyHJXWubS5X8hp3hw9t7Tuev")
                .terminalId("3086a62a-e3db-4d66-a771-c98317781792")
                .transactionId("37b84ba6-6edc-43ef-8e93-02b09734c8f3")
                .organizationCode("h6")
                .privateMoneyId("805ddaed-42bf-459f-8330-0189b6965e08")
                .setModified(true)
                .types(new String[]{"topup","payment","exchange_inflow","exchange_outflow"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test9() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .shopId("aa529ead-0f3d-4cd1-8407-ad5120de6a53")
                .customerId("f051f45f-5be7-4522-a368-1a35c205ff86")
                .customerName("gNu16JpQvHy4YshsIW3qTqoweJDlX13mIxY343bQzE8TQcc2egGGgX3jnPcd1NmSyvHoYGDRbuBXbYfwrmKagrI8RbBMJwHl6H871YF6qcVYA09XmUfvM2r4")
                .terminalId("e4b977b6-b041-4175-9281-e0f288309e33")
                .transactionId("426c3efd-eef8-41d1-99e7-2b83029b98dd")
                .organizationCode("4m3-c-JNk-i9-6C-7Gv-S30O-")
                .privateMoneyId("ecb394e3-6bef-4913-b20d-16961386f375")
                .setModified(false)
                .types(new String[]{});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test10() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .perPage(1935)
                .shopId("db6494cd-17b7-4ecb-a0a3-338e86202d09")
                .customerId("9dd752fa-eb43-46d8-8ba2-f80f506b3b65")
                .customerName("5JCoFwW6WE1BYkkasMVMcZyDIa5e4fHRTd1BecKTK7X6Sl9XOCiLIo4WJUlur7sNzm9Q9xGqjd5ornapRAbAuqxKb2zIU6zE4A1uAN3vQAPCCGlviVEt13aJQQv0oJmXeTXofP7QYoCZfuq4SkzEyHhj8rmJgAwiwbwA8UMi2ySNg0mhzZCEnBkhCN2Yq5ShIAMHrVJ8GnOwRtt9D3")
                .terminalId("5210e96e-e313-40fe-93be-f1b8aac7f272")
                .transactionId("6a6905ed-2ef1-4eee-9126-d7e5674d0b56")
                .organizationCode("E-NUS--rmXxTe-zN")
                .privateMoneyId("6773ab62-854c-4660-bca1-f8a9478c747b")
                .setModified(false)
                .types(new String[]{"topup","exchange_outflow","exchange_inflow","payment"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test11() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .page(7915)
                .perPage(4398)
                .shopId("43916b6b-b302-4f24-ba94-d68f74159bbb")
                .customerId("48639150-a5af-4252-be2d-6af6e26f5865")
                .customerName("us3ipFX3OaPUaUTB7yADzf94AxjJ0VxjIQdclkjSP2RF3ltb5BY9BoytFHhLib3gTcwUo9QnrTvRtKwIIpxZnBqW7SlQXbmEktT8aw9009DF8h36HPTrQipdJJ3FilAxzpZP5RQFja04fWw3UWTPdXDrtZnp0kYKcZQXSEdwk5LF7sQliJYBArbAYe61PxuF7LHn3E42mNeT8Z3UXsm9qGxK4pE7WxIo5YdrURwTz9Gkm6VdEYFBMUruO3S8XJX")
                .terminalId("66039d2e-6cbe-43f8-99f4-79cd972e9b4f")
                .transactionId("ec741a5e-f88f-4e91-a1fd-d3bc2b1607cf")
                .organizationCode("uV-s-lz-x8")
                .privateMoneyId("c2712f97-b34d-4468-9959-fe72e32a0ab8")
                .setModified(false)
                .types(new String[]{"exchange_inflow"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test12() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .to("2016-07-20T11:21:50.000000+09:00")
                .page(4030)
                .perPage(3278)
                .shopId("d202292a-9fc7-46a5-9de9-b5a9edcc696e")
                .customerId("3d90d0a5-10c3-480a-bb08-3e9d44e3602e")
                .customerName("ThIjBwcy4Mpyv2jZMXchABJQyBrLWY1Ov4aL0L38c9Zc7rrTjcaxhq56RivEmjqNswXo0ks2wrUfG8VJEY285gmUwHpZDU386hlT4IUS2mMTgQPlJpNY6sW4sH71DfQ5RfxAdAfUnopQ756YfS9s17sJg2Agr90IrkHXRpqhe1QH2NohZzQYSsTEwY7vcnmfPdKmiaf5u4wVyOhj8vcH6JWOAyhMBKrGU")
                .terminalId("9c8a7897-bac4-40a8-a2d3-71027203146a")
                .transactionId("8feeee20-1932-4b87-b20c-3e91e0c42949")
                .organizationCode("0B7l9yc-s2jRr9-wuc")
                .privateMoneyId("0729a458-744e-4d30-ac28-c1484c667ea1")
                .setModified(false)
                .types(new String[]{"exchange_outflow","exchange_inflow","payment"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test13() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .from("2022-01-13T07:28:57.000000+09:00")
                .to("2017-10-24T15:24:59.000000+09:00")
                .page(2895)
                .perPage(6775)
                .shopId("1065893f-5798-423d-bf4e-d4b2aa03b3f0")
                .customerId("17af8bb1-c2cb-4798-a3e8-2bfec1d80c1b")
                .customerName("clQUH79HY4nyGd9ZMsD5KvtrM1HR9XmC9M129Hx9aRfvwuunSDzaCuLytkHN6c8Ty5CfKBLDDIkAUfFV5B1FHm6hax01Ug0Pq8jq208u72SPRIPgAdT5ttcF0wn125C4TCugz5dsB8c8")
                .terminalId("559725a1-d943-44b0-86b8-b94c6b3103b3")
                .transactionId("de1e882e-6fb7-427c-abed-1322fcedb676")
                .organizationCode("H-S842c---193E32Tc8TBi-JzK")
                .privateMoneyId("c7f52dc0-8138-4f80-9fcd-1ecbbdfbfad7")
                .setModified(true)
                .types(new String[]{"exchange_outflow","topup"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
}
