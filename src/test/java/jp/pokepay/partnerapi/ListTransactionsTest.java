// DO NOT EDIT: File is generated by code generator.
package jp.pokepay.partnerapi;

import jp.pokepay.partnerapi.request.ListTransactions;
import jp.pokepay.partnerapi.request.Request;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class ListTransactionsTest {
    @Test
    void test0() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions();
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test1() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .types(new String[]{"exchange_inflow","exchange_outflow","topup","payment"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test2() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .setModified(false)
                .types(new String[]{"topup","payment"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test3() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .privateMoneyId("cc678954-7fdd-49f0-8b18-d53120816126")
                .setModified(false)
                .types(new String[]{"topup","payment","exchange_outflow","exchange_inflow"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test4() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .organizationCode("55-Mj-1V-sS1m1g")
                .privateMoneyId("31c52dc7-d739-4564-a151-b0b48c83801d")
                .setModified(true)
                .types(new String[]{"exchange_inflow","exchange_outflow","payment"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test5() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .transactionId("dfae0323-04b7-45c0-b008-d22b2299e985")
                .organizationCode("--pwp2-lL8wR6FP-")
                .privateMoneyId("5c04080c-2cc9-4149-bec1-551e06b4ec13")
                .setModified(false)
                .types(new String[]{"exchange_outflow","topup","exchange_inflow"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test6() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .terminalId("16cc9c5d-3502-42eb-a56c-16f8c0dac682")
                .transactionId("89effa66-ece7-4be4-9463-c361d07921de")
                .organizationCode("-CY-I")
                .privateMoneyId("acd61333-d8ac-455d-9918-bb8e93f37fca")
                .setModified(true)
                .types(new String[]{"exchange_outflow","payment","topup"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test7() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .customerName("NPFwcKmldVf")
                .terminalId("322eb034-78f7-432f-85f9-43f297d4ec41")
                .transactionId("3a0f0afb-89de-4387-b823-533f209d72e9")
                .organizationCode("5l70yb5m4hE-9hA6dn--E")
                .privateMoneyId("6d3391db-a212-4488-9012-00bdd8cf3b38")
                .setModified(false)
                .types(new String[]{"exchange_outflow"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test8() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .customerId("32b2a5a8-d109-4387-ba23-466a3c727089")
                .customerName("4VZIQ0gmEDpSYNpBfjp")
                .terminalId("315e83a6-6074-479b-b0aa-7f19e05dc040")
                .transactionId("c2d90d03-52de-464e-93b4-20004b5a10fd")
                .organizationCode("Y7OiB7-UV5fLegFVVm-K08-l")
                .privateMoneyId("94b38a22-09f1-4fd7-acbd-0c3f0cbc2747")
                .setModified(true)
                .types(new String[]{"topup","payment"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test9() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .shopId("a1cfa698-ba9f-4e80-a34a-e081d89ac765")
                .customerId("0b4f3ea4-9679-4bca-a37f-20a5bc37084d")
                .customerName("RzVAYYrcIORSJ7vpMFwtWYk9guhGKlRW6xsPEAtrHgaLFVykPGs3iQ9VAV0gFUmI1QCmCN9YDcy8KvofgQkZn8Flousk7U7zLT20WXsU1pb018cfVgiYjmPDYdn8SQvfPna4Ef9nAthzk6MzL3KQm1aBgp35BHJCUa0z4osTbr2TTdVfzk8pSJNQsxFewTme7WIjoXV0qk5m4LZEBX5wOhnv0Z")
                .terminalId("a6ede3d4-d19b-448b-9c3e-51bd606d21a2")
                .transactionId("e1131d1e-583a-4141-85f4-acf9fdc2f990")
                .organizationCode("W-4-z47UAp-5-51")
                .privateMoneyId("76c0c10a-9da9-4abe-99d2-61413c668876")
                .setModified(false)
                .types(new String[]{"payment","topup","exchange_outflow"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test10() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .perPage(6243)
                .shopId("6efac90e-8ee5-4ab2-8dfd-0c5dfc832a97")
                .customerId("debe8dd8-8687-4b76-b91f-288c60d5ec72")
                .customerName("VvQMUQuMsLyftLg5HDCZIHKYUDeuEt2Jld")
                .terminalId("0fb8bdb3-6ac0-4aaa-96e1-04564caf73d9")
                .transactionId("2204bb24-5bba-476e-95e8-54a8b2bdd5a2")
                .organizationCode("5---814h-w8F3Ym5-")
                .privateMoneyId("02854e5c-4c9f-4351-b9db-ad8a05965dff")
                .setModified(true)
                .types(new String[]{"exchange_outflow","payment"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test11() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .page(3829)
                .perPage(5712)
                .shopId("d2ef320f-57eb-4821-a1c0-abc2b6c8d5a2")
                .customerId("0195c2c9-8a70-4614-9f00-584ffd781e16")
                .customerName("Qawxw6PCIhkXTgEfY51LbVWnxPRQJcwegaZLR")
                .terminalId("f42b3360-635a-4e6f-bd4c-95e436f420d0")
                .transactionId("a91e7df9-7d36-43aa-a4a0-2a3c9f3baddf")
                .organizationCode("3n-")
                .privateMoneyId("e8582806-cecf-4618-914f-d43da9361805")
                .setModified(true)
                .types(new String[]{});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test12() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .to("2016-03-25T00:42:06.000000+09:00")
                .page(6135)
                .perPage(9314)
                .shopId("7fc1100e-8dc8-4f18-b502-5f10e14809b7")
                .customerId("266d3363-138c-41bf-8926-f7c47528a3f3")
                .customerName("KpA6XLgZOlVj1erx2MssON03Ec3VWi5bzHTeQft2Do9T8qW8NqegupnTRXHM9NUOMd6JzktMyGn5n5B4l5si7rdb3eLz1YSRE7qRqR5GHhcRsq2L2WBW")
                .terminalId("b8421bdc-f620-4b97-8459-105940da36e7")
                .transactionId("f3686bf5-5132-4f42-8f0e-bceaac530f37")
                .organizationCode("e0--tQ")
                .privateMoneyId("2c4cf019-7cd3-4d65-a080-6f7de4fdef2f")
                .setModified(true)
                .types(new String[]{"topup","exchange_inflow","exchange_outflow"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test13() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .from("2019-11-30T03:19:40.000000+09:00")
                .to("2015-11-25T10:23:42.000000+09:00")
                .page(7119)
                .perPage(3509)
                .shopId("b40d5a6c-3517-4fdb-b23b-efdfcc170767")
                .customerId("2e930743-f39b-4ab6-9f16-03d081917a93")
                .customerName("p")
                .terminalId("236f53bf-5f8b-480f-bbb1-cdf94613409b")
                .transactionId("dbb762d4-6d52-4369-b015-18dff04648d7")
                .organizationCode("CvT-")
                .privateMoneyId("2ee0e227-bd9d-42a2-a2cc-e15bbaf499b7")
                .setModified(true)
                .types(new String[]{"payment","exchange_inflow","exchange_outflow","topup"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
}
