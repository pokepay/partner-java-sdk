// DO NOT EDIT: File is generated by code generator.
package jp.pokepay.partnerapi;

import jp.pokepay.partnerapi.request.ListTransactions;
import jp.pokepay.partnerapi.request.Request;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class ListTransactionsTest {
    @Test
    void test0() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions();
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test1() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .types(new String[]{"topup"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test2() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .setModified(false)
                .types(new String[]{"exchange_outflow","payment","exchange_inflow"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test3() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .privateMoneyId("3c9cf67d-42a7-41a7-a2b6-132fb047fc44")
                .setModified(true)
                .types(new String[]{"exchange_outflow","exchange_inflow","payment"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test4() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .organizationCode("w")
                .privateMoneyId("fea79369-14c3-4c6c-9c5d-e142e676be72")
                .setModified(false)
                .types(new String[]{"exchange_outflow"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test5() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .transactionId("6fcc03be-3f41-459b-acd3-b832a38ff56e")
                .organizationCode("-2")
                .privateMoneyId("9a131628-5527-49fb-a899-8dd0809bc3a0")
                .setModified(true)
                .types(new String[]{"payment","exchange_inflow","exchange_outflow","topup"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test6() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .terminalId("2db3e29d-a11a-4f1c-bc00-53900e450382")
                .transactionId("96a1a653-1e51-43c9-91f1-5c65224b5508")
                .organizationCode("SieH-6Q0br-L-e7KBh3pphN--E9nh-a")
                .privateMoneyId("c5847590-f850-4a93-8b7d-a7f467a59206")
                .setModified(false)
                .types(new String[]{"exchange_inflow","payment","exchange_outflow"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test7() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .customerName("1CpsznG26iber1urm2kXi74uYegmN8h8ZO2f5yO1MHZjBbzgTHgwFDQTrXSXtH6YPE7fzxpRTRrdtKj5pdkXUQlOsHu2f5814sUzCleBuQNVgKBkZjYmkOyKlXF7EV6AE9KSr65PDZPfwIFHrGdvJnyzN3rUGejdi4lqJ0eA4ThSjyjTobqss3QE3KDUKcH3WIA1LdDy8nZw8Xm8hR7bJ4mYxjsFcyVi4X8MxYJAeGEYqHUCbF")
                .terminalId("acf2933c-eca1-4775-a29c-af26841e7955")
                .transactionId("da2285b4-14ea-44b8-b71a-ebafb4eb9241")
                .organizationCode("Pi-8Xr9-K-cR-8C-q-")
                .privateMoneyId("a2917501-5369-4d7b-8db4-fa6a184a5bd1")
                .setModified(true)
                .types(new String[]{"payment"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test8() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .customerId("0ff2a405-00dd-400e-9557-e41910d39ee4")
                .customerName("SeNxokB60L47K8lMSh")
                .terminalId("8f0c7ab5-8da0-4396-ad28-3254e9254a6b")
                .transactionId("cebd93aa-e771-49b3-b06b-227f1f8ab4e8")
                .organizationCode("4z6-2-N")
                .privateMoneyId("e9fb3f4f-b1cd-48ff-b46b-fa14d704bb35")
                .setModified(false)
                .types(new String[]{"topup","exchange_outflow"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test9() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .shopId("8fb3b256-517c-4841-9fcd-6a4be4e42a32")
                .customerId("c341683c-8513-4ae2-a8f2-5376f6e0a8da")
                .customerName("zPnrkHUwZPC7zfGEjrgXig9Q98iTiLCNp6a9B8SEO8DFA82zEsN14bkPNAneMIZO7D8QL937flu3lQntMh2IntET9ANk0o7o3JTGmapGRVPUy4gfTun9qKHensO2D1FUAlUEpJ1xIleNJr6SjR1I7SPFQWRcJvCm8tcAGOhBUsoj2ppGjql1bLj3GhvYqD3aSI2Fw")
                .terminalId("79e8b87d-26ae-4ecb-ae70-277072f35ec5")
                .transactionId("39bdf2f4-5cf8-4a30-9c76-dce05351bc45")
                .organizationCode("")
                .privateMoneyId("019c003a-1872-4bdc-a811-6321f38dd7f2")
                .setModified(false)
                .types(new String[]{"exchange_outflow","topup","exchange_inflow","payment"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test10() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .perPage(1378)
                .shopId("6510c15c-688b-453f-a271-28ebd6d30b49")
                .customerId("08596253-79ee-4931-b6d8-8f651a47d3a5")
                .customerName("ME0cuC5vuYnjRCPDGv4j1T7molnDLJYXeIMxnvkUIGXcyuRt0bAZlStncVuVtMDfYT1HuRgNiKkhNT2wSMDMev1Kam1eO212WdjJ6Ld2eE0EXTRX3NF9xSMkzsc91")
                .terminalId("79b446b1-a252-4d05-951b-860c5651f569")
                .transactionId("200bd7cc-2ba5-4fea-9097-a59daca64442")
                .organizationCode("TRYW-9sGO5-CI8-7f4R84-")
                .privateMoneyId("99896a34-a127-453d-8bcc-d1b8759476f8")
                .setModified(false)
                .types(new String[]{});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test11() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .page(2253)
                .perPage(1324)
                .shopId("28a9f91a-e690-41be-9c1e-6a366cef2888")
                .customerId("6ca746ec-a480-4169-9698-a460492cce5e")
                .customerName("wRID6CV5V9dqZm")
                .terminalId("634a21b5-940c-44ea-9352-f1cfe362169a")
                .transactionId("33c5f5b9-f01f-4ceb-8785-ce5698984a60")
                .organizationCode("-")
                .privateMoneyId("513daf33-86ea-49dc-a608-61a6434d9110")
                .setModified(true)
                .types(new String[]{"topup"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test12() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .to("2023-12-03T07:56:15.000000+09:00")
                .page(4134)
                .perPage(1178)
                .shopId("3897e72e-46f5-4f11-a5f3-46fe22140176")
                .customerId("81c2004d-dd78-4b14-bc48-f75bb87b4951")
                .customerName("QRzX6UQjufCmMaUymtFM75E")
                .terminalId("0bd4f410-c0bb-4919-a8de-1cc1cb8a104e")
                .transactionId("f94adc63-b013-4d1e-a076-69d02c687d43")
                .organizationCode("5l9-p2z--bc")
                .privateMoneyId("a49c2c69-481a-47bd-bd71-7ee024a4ffb0")
                .setModified(true)
                .types(new String[]{});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test13() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .from("2018-06-07T14:16:32.000000+09:00")
                .to("2022-08-21T15:32:24.000000+09:00")
                .page(9080)
                .perPage(4043)
                .shopId("9d828bd5-fd81-4cc8-a0e9-f4912cce2927")
                .customerId("11229af0-5824-4c88-977b-5922777b34ed")
                .customerName("aLhpHqv3FwamUTDXNhcqh1HPyTS9kpbiAJ0qbNVIh2swyKfYnwd4LM1v5XTT7EMGXnI1BfKdPqoJ04CCiOHwCkSBWLXwt7dQgaEAJPzO8QXpzLrpYQVj4Whk4L7ueUoYoT6XceVHaqtA09gagHbp9K5GeHJ0OrU9x3TrTkWQlb2dQc44i4IEjLfVzlfujBNWJ9VJZXZ4KwsUCgFAhO3iKn")
                .terminalId("6bd8c388-ce1e-4fa3-8ea8-5859f04c4e56")
                .transactionId("23dc10b3-baf0-40bc-9db9-c9d4af4fc29b")
                .organizationCode("0et7---7-O0m-L--yCKd")
                .privateMoneyId("94b9a200-076a-45de-af51-b2f805879579")
                .setModified(false)
                .types(new String[]{});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
}
