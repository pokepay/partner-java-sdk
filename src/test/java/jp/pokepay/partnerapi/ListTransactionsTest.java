// DO NOT EDIT: File is generated by code generator.
package jp.pokepay.partnerapi;

import jp.pokepay.partnerapi.request.ListTransactions;
import jp.pokepay.partnerapi.request.Request;
import com.google.gson.JsonObject;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class ListTransactionsTest {
    @Test
    void test0() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions();
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test1() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .description("PV8lVcOO1w2GShMQxP1XNaA4tMwkt9CEIs7P52Qn8Ps6rGg4gxhQEPHlDMgzo7Ry");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test2() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .types(new String[]{"payment","exchange_outflow","cashback","exchange_inflow"})
                .description("IVLohtP7YX7LIJvkHIDHAM5JdvPW8u4K9jehE0FIX2d1fsIJRaq4cseT3Jr8x9EZ1qV4Ufa8eDKBhpNX1jWPk8Z43B0y0B9mfs2NjGqIbT9OwqnkaPpwID0");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test3() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .setModified(true)
                .types(new String[]{"expire","exchange_outflow","topup","exchange_inflow","cashback","payment"})
                .description("ZpFNZ79bus52pNLLPoSL84SGwACEhVooVmB4cFvbTIGcXWAqG4BSfipEZMFGhk16I7iXigWOnUAkBWGfv1h3SdKWf7Mk6qxlTgasH11ZahWwt0KCw4FDQO05qL");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test4() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .privateMoneyId("62c302d4-35f1-4e7e-87c4-3215645cc062")
                .setModified(false)
                .types(new String[]{"exchange_outflow","topup"})
                .description("v4VsaDUMga8HPHLfj8VAxLQCn6DppPY7uZKs5wMf3MBYDCuFCMBOgtd28MFakoJp4sttlPy");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test5() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .organizationCode("k1SSX-r")
                .privateMoneyId("311bd1b2-821b-4fe2-94e0-f5a4694a8a3d")
                .setModified(false)
                .types(new String[]{"payment","exchange_inflow","expire","topup","exchange_outflow","cashback"})
                .description("FSWXNEvBDebROkI568yn3vAdg2WzE6cQfJbdKVhY");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test6() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .transactionId("IeaGt")
                .organizationCode("D9A--UB-y5Wn--5I--9u393gS--s3")
                .privateMoneyId("fe6213e7-e07d-4a7e-adfe-2cf43ac6f070")
                .setModified(true)
                .types(new String[]{"expire","topup","cashback","payment","exchange_outflow","exchange_inflow"})
                .description("BR2bpCJbWCsF1XOMwOMfbCbRi8MeoObjQBbD5vivOmPF0WWyAe43BTjYiVtdGDmgs4Vk2VUx2tI5N4bIOpNtWwRJ7taFGOOZNR9womkOYYXss1h0acoAUmABE9DWtANH45sfx8S");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test7() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .terminalId("9b31a3e7-fc60-4e5d-9839-b6718f656803")
                .transactionId("O6")
                .organizationCode("3iJ-9dD---7-YolA58m-Vc-996y5l")
                .privateMoneyId("1750ab2f-d7c2-480d-842e-9bc53e6fa6aa")
                .setModified(true)
                .types(new String[]{"cashback"})
                .description("S5KI84n4B4JwtxMbsrynF");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test8() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .customerName("zleqVzZvPQrwaZ5xfzumz05DAlrcpNez8TuusjLCXuqGq9aXt2RyxOmHZB8Yd9TYL0bkCAVqSRIdac4BtBwC2bbOKrqEvtHSmLf6gZqSXb2Lr55RtyiRtGJ1HUxolj1KPz6vAaVd6Sg4zOt2L")
                .terminalId("0cdc7118-47d0-4396-a2a9-9f8c6a148ab0")
                .transactionId("vCf")
                .organizationCode("U8m-EI8MS8hII-tI")
                .privateMoneyId("26687349-3c16-4178-b708-abe5d4699ac8")
                .setModified(true)
                .types(new String[]{"expire"})
                .description("VFw56RKDemCYdfHKy6kNARZB0e7gSo7Ck5GjWL9QXL9sfwRokQiO2gJLOs7NWiVmOaSDg31Umvi1k0xZepHVlU5UCBk1mC260SZIPf7lUxpBEwOCUnBV1wl8i3xQfqNGTjhBSpAIG2GVj");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test9() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .customerId("05b57152-289f-42cc-99c3-c34692786d8b")
                .customerName("S26ypTzMExe5LQXN3tfMMeaiTEdRlgPRLO6iu4xB9p9hHVjuFskSUixL")
                .terminalId("8df7af26-c41d-4788-b003-3d76867b583d")
                .transactionId("lY8MFYZ")
                .organizationCode("Y03-2UWgF9")
                .privateMoneyId("0e260079-0ae0-4332-921a-f0180b856949")
                .setModified(true)
                .types(new String[]{"exchange_outflow","topup","expire","payment","cashback","exchange_inflow"})
                .description("CUonyUv3nTPZ701h3V5Qywi2pn04JUSx27eVHz2wOx9gOffBCzdPD5lY5ruzs73QnlHzwGBVLp2Vmg3eprOU7ktZcHWsZTpEtZX9770nlSO8H2DCl6imPJgn2XjYsZUpQvLebh65Hdtxmvs4SwxRthVVayjO1th3s3e6f");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test10() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .shopId("977e2b08-a061-4a79-8a06-64febe0d9c5a")
                .customerId("1bff689c-8cfb-475b-a32a-95326e526f27")
                .customerName("E32vm3RMvvWttu1PJb3d04IfskzbRh2")
                .terminalId("f52d39cb-6a2d-48aa-9358-6123c140ac44")
                .transactionId("Jqy1UyPaGH")
                .organizationCode("v39jFTlu-XkApk--324-FW3m--8")
                .privateMoneyId("d897650b-e0a6-4c4f-b61c-e2d8149b3754")
                .setModified(false)
                .types(new String[]{"topup","cashback","expire"})
                .description("PEJOaNnRanlNyuKHWuXq7zEzVgAAIhzrVmMQ7zQf4j1Xlnx61iQEXBdwXQXBx9CjvSgZke3VuPIIBeUSxLQqoj9SXP9EgDJcoagTJNb42JvVKNsj3zA7Dw0uibv6O0nFaLFwVLI");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test11() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .perPage(2395)
                .shopId("7b52361c-ab20-4604-aea4-95c333415836")
                .customerId("cd4922a1-cbf2-4319-84f9-005989664ef5")
                .customerName("uG1XnlSIVaCTCoBzc3PolsdbrxUTbpTkQr9CA458OFUiC0xNjD1g6ausYOsWjmgSVes0LvRpIOKLgAa2m76DTKceEBbKe1QbzWrTYvHigdBYvKVDdotVdsHD1HarFGRZ0Q28LywVGUz2sIRxtNbAYM")
                .terminalId("2743e2fa-a1c8-49fc-8065-9650cee5841f")
                .transactionId("RHJLPebY")
                .organizationCode("-Cq10S-E8gQ----jDNN98mfGHwMEIBk")
                .privateMoneyId("34e88dfc-36bd-404c-9bb5-d4e327efddb4")
                .setModified(true)
                .types(new String[]{"exchange_outflow","cashback","topup","exchange_inflow"})
                .description("Pi4ivBi3eJhDgAiQ5RhXwEfmyakwCi2K41MKrJ8u3JtJHw13BJLqURa9CDG8z1");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test12() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .page(7539)
                .perPage(8246)
                .shopId("7261d6a9-1fb2-463f-8e20-eb786615d1ed")
                .customerId("66eb1f15-3d9c-431d-9b12-329d5a93ed89")
                .customerName("So3IMgKOG9RqgqLtsxscDVj4qDxwlIsjYdDsgNzWfMVYN8tFORiCKaN1GSBkTmsnETZgON7wI25XD4LDGgtc1eHQx1a38fcy9G2ru7CIugZBUKc64A8KJDFHDE0sPhVLSmxr0FU3DnW6KqsDEeelMkJvsg1mQveiZolVhKjCQVZwzstz19XaUt7HUg2vBtQ3icUlEOMImvGy37aG3VpRlqKVbLVJ59qzi8HFxZtC5ypm8TU2Y6m10oa")
                .terminalId("bf1043fa-ff9c-4b4f-a0a9-5aeedb4aaf53")
                .transactionId("RVBAD")
                .organizationCode("-i2w-XaN03-R-7n")
                .privateMoneyId("b5e91b2f-b889-4b22-a38e-7bc7310df541")
                .setModified(false)
                .types(new String[]{"exchange_outflow","exchange_inflow","payment","expire","cashback"})
                .description("AIScfq8JbwsUjFhr3NwoEyag2SfuJiolnAr0O5BazmKqHUlvI3TLRDU2wR06BrqE4xR4GA8B6QEvmEtQTqfIDfhF08aWAgYKgMRg4eijui0x4A");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test13() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .to("2020-07-26T10:55:21.000000Z")
                .page(2784)
                .perPage(4219)
                .shopId("f98b4df5-c995-408a-bb6b-47a2f3349e71")
                .customerId("7bdf35a9-2b58-4e69-a9b0-1b92641220af")
                .customerName("wz9NdLnaFp0d8NnYZXWwwPUfmYGEVrOM4dkj0diMGxwkBMFBNKhTrrG")
                .terminalId("f8b5d8eb-2220-422d-88af-8fc79f2630a0")
                .transactionId("nz7dW1L")
                .organizationCode("e--Pwgc9HmVBlTce5-o-6v-Mx23q")
                .privateMoneyId("87fcfd6b-5fb5-49b5-9cdb-6529a6653d70")
                .setModified(true)
                .types(new String[]{"expire"})
                .description("BmR66mDvQf3SzEAz6sFhOXUyleHUBygYLLJFfbbjnOxn1Ii4QyBabDj1sJ7k6dP6L13ja9VovumOjMgFfs83kBzSot4H9G2QRAYPymeRfFOHsPVjb9UCbPcYx5YX");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test14() throws ConnectionError, ProcessingError {
        Request request = new ListTransactions()
                .from("2024-02-05T13:13:38.000000Z")
                .to("2023-03-16T23:25:29.000000Z")
                .page(3546)
                .perPage(3920)
                .shopId("9b3545d7-4db0-4b06-8d6f-09019542ff11")
                .customerId("4423a488-860a-46e1-85ac-dc3b1dddcc1f")
                .customerName("SUOR88F7Ubd6EIlmfbIWBjq1h3aM3MFSn6Z9Xp0dYAIwKPnm62HiK7")
                .terminalId("f1c2eeb7-2535-44a0-8655-b1ea851422ca")
                .transactionId("wWsCFU")
                .organizationCode("LYQf-X-6--oZ")
                .privateMoneyId("4591de5a-0210-4461-a6c3-1e458e9de94d")
                .setModified(false)
                .types(new String[]{"exchange_outflow","payment","expire"})
                .description("u8UbXHSU9E0Qlg3gebv");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
}
