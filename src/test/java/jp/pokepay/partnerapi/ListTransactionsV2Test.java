// DO NOT EDIT: File is generated by code generator.
package jp.pokepay.partnerapi;

import jp.pokepay.partnerapi.request.ListTransactionsV2;
import jp.pokepay.partnerapi.request.Request;
import com.google.gson.JsonObject;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class ListTransactionsV2Test {
    @Test
    void test0() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2(
            "87d69bf1-dee4-4740-a13e-b9f1346792fe"
        );
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test1() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2(
            "87d69bf1-dee4-4740-a13e-b9f1346792fe"
        )
                .perPage(415);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test2() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2(
            "87d69bf1-dee4-4740-a13e-b9f1346792fe"
        )
                .prevPageCursorId("8304e27e-4ff2-4829-9999-3ed25d80a0bc")
                .perPage(540);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test3() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2(
            "87d69bf1-dee4-4740-a13e-b9f1346792fe"
        )
                .nextPageCursorId("232f3a16-b2e1-4355-a134-0174b10513f3")
                .prevPageCursorId("0de0e74e-bf7e-497d-afa7-260fb5874171")
                .perPage(385);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test4() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2(
            "87d69bf1-dee4-4740-a13e-b9f1346792fe"
        )
                .to("2016-02-02T01:12:15.000000+09:00")
                .nextPageCursorId("1e82ab11-d6a2-4155-b468-c32bbc38b1d9")
                .prevPageCursorId("47550302-d89b-4b53-bbf8-f91f99c19d53")
                .perPage(912);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test5() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2(
            "87d69bf1-dee4-4740-a13e-b9f1346792fe"
        )
                .from("2022-10-18T23:04:09.000000+09:00")
                .to("2024-12-27T07:58:53.000000+09:00")
                .nextPageCursorId("47061571-4f09-4022-9913-81e68624af60")
                .prevPageCursorId("9463b027-744b-4563-a4f0-2145571a14a2")
                .perPage(916);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test6() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2(
            "87d69bf1-dee4-4740-a13e-b9f1346792fe"
        )
                .types(new String[]{"payment"})
                .from("2022-04-12T21:49:43.000000+09:00")
                .to("2020-05-18T00:29:42.000000+09:00")
                .nextPageCursorId("ce06a0e7-820f-40d1-be38-60ca98403923")
                .prevPageCursorId("31ccdc0b-8328-44d4-b78e-c0ee90992697")
                .perPage(907);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test7() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2(
            "87d69bf1-dee4-4740-a13e-b9f1346792fe"
        )
                .setModified(true)
                .types(new String[]{"exchange_outflow","cashback","topup"})
                .from("2021-10-31T16:16:04.000000+09:00")
                .to("2015-12-06T12:23:58.000000+09:00")
                .nextPageCursorId("247f4a7f-acd3-432e-a73c-24389febac71")
                .prevPageCursorId("6671c3fa-4465-4305-87a6-7e8ab033cbca")
                .perPage(772);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test8() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2(
            "87d69bf1-dee4-4740-a13e-b9f1346792fe"
        )
                .transactionId("a4b065c0-930b-4993-a08e-f57d1ca5859d")
                .setModified(false)
                .types(new String[]{"exchange_outflow"})
                .from("2022-06-08T08:08:29.000000+09:00")
                .to("2017-03-08T18:24:22.000000+09:00")
                .nextPageCursorId("54c3f084-da8f-447b-8601-5fd031451448")
                .prevPageCursorId("d1b2a277-8324-4831-959c-565438b97fea")
                .perPage(398);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test9() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2(
            "87d69bf1-dee4-4740-a13e-b9f1346792fe"
        )
                .description("1quigD2l2JnK33Y2PKkmhgdj1RbwEdGAkTKdkwDZEgx5wET5OvQdZofRUOUAciXVcpzKCMcrOD6Emk2wkp2iXzqZDQWG9JIPYO9QhKj")
                .transactionId("12e677d9-c215-4e1e-9741-01c1a349e10a")
                .setModified(true)
                .types(new String[]{"payment"})
                .from("2022-11-18T02:03:04.000000+09:00")
                .to("2018-09-21T16:09:47.000000+09:00")
                .nextPageCursorId("317ebd0a-d3ff-44e6-91f8-644b3e4e52d2")
                .prevPageCursorId("1d178a22-abf6-45c5-8b73-e30e461a3cfa")
                .perPage(166);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test10() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2(
            "87d69bf1-dee4-4740-a13e-b9f1346792fe"
        )
                .customerName("3mWAEHwNafuFelOU7xCAyi0eUz4xXH5OLhVoB1lIuiOfxpiSD0ualUMr1aiXbRr0Yt6Ont0eqhymEV4KDx3FmD9kbbli1vOnH69EFiv")
                .description("jA6JEHCCuKlnfNVTWFTkh4YZxFDhr8QjY")
                .transactionId("7d2d5eec-c63b-4142-b4a3-7132849a373a")
                .setModified(true)
                .types(new String[]{"cashback"})
                .from("2019-09-25T14:23:46.000000+09:00")
                .to("2025-06-30T13:42:00.000000+09:00")
                .nextPageCursorId("c224c0bf-9779-46ec-b006-6eedfece7a94")
                .prevPageCursorId("067233ac-e3dd-470b-9bc6-3d4f4caa26ae")
                .perPage(760);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test11() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2(
            "87d69bf1-dee4-4740-a13e-b9f1346792fe"
        )
                .customerId("c2207ec3-24e4-419f-a43f-d73e806d2182")
                .customerName("KPABZdrgh98RslDBuoJSI")
                .description("UrTRne91u8KmONYXCce6NgXmM6SU8mT9N7YdoyhvIOK96oQgvpt3OE4bGWfPwqWxwC3DU0Z")
                .transactionId("610476d9-6522-481e-8e04-1a9ad3babd49")
                .setModified(true)
                .types(new String[]{"exchange_outflow","topup"})
                .from("2020-02-14T14:22:11.000000+09:00")
                .to("2017-06-09T08:11:55.000000+09:00")
                .nextPageCursorId("e0f27f13-96fa-47f2-92f9-ef774f147547")
                .prevPageCursorId("8f518082-9cd2-4cce-a76b-57c14e1ddd3c")
                .perPage(614);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test12() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2(
            "87d69bf1-dee4-4740-a13e-b9f1346792fe"
        )
                .terminalId("a6574e53-3204-4d17-88a7-a6fd5bb1e37c")
                .customerId("372c03ff-9c26-4ce9-a76e-68ba90a083a4")
                .customerName("7X7r9y8K62vZdczxzKDF7OzztIRdIBCYTSHrtKwDRbFJx9qY9kB8kVDqJMjy6rf4CluMJ3q8UHdGY9c6av2inoQmoszzzj7gjncZRjG49ZyE9dB8fCGfTM2Oyolj4kfEe2uvMtiKxUivt9MIJ97msI3tBe6ti0SO07EXHC5hQ61pWDcVyEH0QvPCR5IiYZhX71qxxCDFjWtGssb86D9XZfo8j2fPJCGzVYdohDRxcepsSsdecsp")
                .description("EcH6zAIM8ju98Xf3eDqYA5vYg7TRPpd99WNI7yrXSKnnTIb76zTEtm8AaIiuGx9L9HalOMU5vigXX7Icn5jXA5QxJPbbGkUILhTXtRtmknLVk7hQOvzRC9zFhAU2LnJOGL09rr")
                .transactionId("8ed85f96-c4d2-428a-9698-a1422e55f025")
                .setModified(false)
                .types(new String[]{"exchange_outflow","cashback","exchange_inflow","topup"})
                .from("2020-01-03T17:20:58.000000+09:00")
                .to("2016-09-11T15:54:25.000000+09:00")
                .nextPageCursorId("b9c5ec04-4512-4b28-874a-9f73ab046178")
                .prevPageCursorId("968d69ac-32a0-4407-878b-2929a67bf141")
                .perPage(639);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test13() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2(
            "87d69bf1-dee4-4740-a13e-b9f1346792fe"
        )
                .shopId("dfdbdc26-3ff2-4e67-99a3-7ac95ca97e26")
                .terminalId("3868165e-7c75-4375-adcd-13d6f901f664")
                .customerId("d5398a16-ec6c-4301-9f97-33b3205f7b31")
                .customerName("leH5Dl7ZUHzS51rJLdw2n2tQfnXr078yWrpzKRIJrBD5D7CpKjeG53Xpalhw5eu")
                .description("SaoLetupiLJGKA08kULtDXm7mGq20CccqYOFtqhMLy1fSrOZfnZ2mwTeB7HbtOFrcDL7mosyloW0gLyN")
                .transactionId("0a5d4f7e-ab69-4ae7-8ab5-daf1febc69d5")
                .setModified(false)
                .types(new String[]{"payment","cashback","exchange_inflow"})
                .from("2022-11-04T15:16:49.000000+09:00")
                .to("2020-04-01T04:44:01.000000+09:00")
                .nextPageCursorId("f918dc2c-e104-4bb9-a24c-c0beca60b746")
                .prevPageCursorId("cede6ce6-9348-45c9-8362-9690da603a12")
                .perPage(756);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test14() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2(
            "87d69bf1-dee4-4740-a13e-b9f1346792fe"
        )
                .organizationCode("v-2k1-7wM-LtRV-11-TW61hV--G--")
                .shopId("7ffcabd4-7449-42af-8ca2-6ff5972a7718")
                .terminalId("0d8671fc-1777-45db-84a1-66707e512f13")
                .customerId("90851017-420e-4eab-bba6-3e34056cfda6")
                .customerName("PaSBE0QhobjzNQVW3hP0Ve0rN3Em7q1SjNjatjjDZX7RIKgDX3b9oA142xLkpis0qy5MfISyoLqEQKhMnAGBrL3KeptreugpuZPDhn3kvKQdinTisU7JGahMN0psp")
                .description("m5VBpWaMfH3OlTb5uoxVylmhf3ESdF0EHZGgpE19g89rUg")
                .transactionId("55325684-d1fd-4d11-96b8-2131a83d9ba4")
                .setModified(true)
                .types(new String[]{"exchange_outflow"})
                .from("2022-01-31T12:29:50.000000+09:00")
                .to("2024-10-17T05:32:10.000000+09:00")
                .nextPageCursorId("70ebb60e-71b4-4cd8-a558-d341829a467e")
                .prevPageCursorId("b11ea752-03fe-4206-a501-e256c3f7199a")
                .perPage(932);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
}
