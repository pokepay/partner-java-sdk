// DO NOT EDIT: File is generated by code generator.
package jp.pokepay.partnerapi;

import jp.pokepay.partnerapi.request.ListTransactionsV2;
import jp.pokepay.partnerapi.request.Request;
import com.google.gson.JsonObject;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class ListTransactionsV2Test {
    @Test
    void test0() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2(
            "2f89887a-34d3-4b8f-bb0f-85ef0554db01"
        );
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test1() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2(
            "2f89887a-34d3-4b8f-bb0f-85ef0554db01"
        )
                .perPage(26);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test2() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2(
            "2f89887a-34d3-4b8f-bb0f-85ef0554db01"
        )
                .prevPageCursorId("45f30174-50b4-441b-ac48-3d1f73c373b9")
                .perPage(584);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test3() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2(
            "2f89887a-34d3-4b8f-bb0f-85ef0554db01"
        )
                .nextPageCursorId("adbf8432-9551-47d2-8159-39d02dbd935f")
                .prevPageCursorId("0ba457f9-6511-43fe-ade5-bf527dca1782")
                .perPage(152);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test4() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2(
            "2f89887a-34d3-4b8f-bb0f-85ef0554db01"
        )
                .to("2025-06-11T03:28:46.000000+09:00")
                .nextPageCursorId("815ff1a8-4fc6-4481-8f48-5707cca091fc")
                .prevPageCursorId("48f5e9f3-d6bd-49d0-9605-509ec9081efd")
                .perPage(235);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test5() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2(
            "2f89887a-34d3-4b8f-bb0f-85ef0554db01"
        )
                .from("2023-02-01T11:32:58.000000+09:00")
                .to("2021-05-12T22:25:46.000000+09:00")
                .nextPageCursorId("c01b02a4-58d0-4c7f-af9b-0e15e2a78d22")
                .prevPageCursorId("83fdbf09-9263-4b9b-a608-fe592d0f7cf8")
                .perPage(193);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test6() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2(
            "2f89887a-34d3-4b8f-bb0f-85ef0554db01"
        )
                .types(new String[]{"payment"})
                .from("2018-09-18T16:13:45.000000+09:00")
                .to("2024-06-11T21:27:20.000000+09:00")
                .nextPageCursorId("3294b38d-946f-4901-9188-860a792c76e1")
                .prevPageCursorId("1036e685-9fac-4c3b-9f35-c923852acdbe")
                .perPage(140);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test7() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2(
            "2f89887a-34d3-4b8f-bb0f-85ef0554db01"
        )
                .setModified(false)
                .types(new String[]{"payment","cashback"})
                .from("2017-09-10T08:37:00.000000+09:00")
                .to("2016-05-03T06:25:06.000000+09:00")
                .nextPageCursorId("3da66e37-cc29-4708-8fd5-2ae258c2d2e4")
                .prevPageCursorId("98e34a27-a036-4d81-a4a5-c599a53d9c45")
                .perPage(221);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test8() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2(
            "2f89887a-34d3-4b8f-bb0f-85ef0554db01"
        )
                .transactionId("b2e383a5-cf92-40c9-95ec-b0ed794e5de6")
                .setModified(true)
                .types(new String[]{"exchange_outflow","topup"})
                .from("2018-02-05T18:59:42.000000+09:00")
                .to("2020-05-12T21:02:01.000000+09:00")
                .nextPageCursorId("3b7ec431-ccbe-4203-ac3c-d168bb673b22")
                .prevPageCursorId("871826fd-fb3c-441c-b3de-2ce18e09ee81")
                .perPage(206);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test9() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2(
            "2f89887a-34d3-4b8f-bb0f-85ef0554db01"
        )
                .description("MFSn6Z9Xp0dYAIwKPnm62HiK775FUjJKUwWsCFULHC5xu9xwKzEE")
                .transactionId("71605e46-1e72-4176-b084-bb86a05737f0")
                .setModified(false)
                .types(new String[]{})
                .from("2017-02-08T18:45:22.000000+09:00")
                .to("2022-05-22T12:49:31.000000+09:00")
                .nextPageCursorId("fd10b7c9-4d05-41cb-8d58-1a59874f8050")
                .prevPageCursorId("638c32f8-a7e5-464b-9d5b-41972dd38c63")
                .perPage(311);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test10() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2(
            "2f89887a-34d3-4b8f-bb0f-85ef0554db01"
        )
                .customerName("3uyZaCEMZ2Ju8UbXHSU9E0Qlg3gebvAwjzG8UYapgA4DXNtjsg9PgQkXqYPn4dGIxCAVXu8wPFdMI0g8RX9GwTm1EaeDH0runisLVA8D7RtvLwRN8QmXijHIyMGxrgTxrmP2c2b7AqdqrRaU4tsNqOUthYSxSa5qYfKcdpEzIZoGgQ8JT7nM2XSRS8qzeJVaYua2WPHw1UTjf1quigD2l2JnK33Y2PKkmhgdj1RbwEdGAkTKdkwDZEg")
                .description("5wET5OvQdZofRUOUAciXVcpzKCMcrOD6Emk2wkp2iXzqZDQWG9JIPYO9QhKjYAAaWngq9PQfQxKRvEszf3mWAEHwNafuFelOU7xCAyi0eUz4xXH5OLhVoB1lI")
                .transactionId("736bc575-1ee9-474f-8c1e-c2ac4393a286")
                .setModified(true)
                .types(new String[]{})
                .from("2016-06-02T16:11:11.000000+09:00")
                .to("2019-02-01T23:45:46.000000+09:00")
                .nextPageCursorId("bdd7effd-94c4-493b-b0ac-1e0a0c8c4bbb")
                .prevPageCursorId("85135a5f-d475-41fc-bbe1-c282423c04ec")
                .perPage(677);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test11() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2(
            "2f89887a-34d3-4b8f-bb0f-85ef0554db01"
        )
                .customerId("709f1555-f113-4bfb-a6cd-5272f317a531")
                .customerName("aiXbRr0Yt6Ont0eqhymEV4KDx3FmD9kbbli1vOnH69EFivIjA6JEHCCuKlnfNVTWFTkh4YZxFDhr8QjYlB42oGAhylpmFOwCdKPABZdrgh98RslDBuoJSIFUrTRne91u8KmONYXCce6NgXmM6SU8mT9N7YdoyhvIOK96oQgvpt3OE4bGWfPwqWxwC3DU0ZYNIFrYHkTuOzrywGRNkAeSHinr7X7r9y8K62vZdczxzKDF7OzztIRdIBCYTSHrtK")
                .description("DRbFJx9qY9kB8kVDqJMjy6rf4CluMJ3q8UHdGY9c6av2inoQmoszzzj7gjncZRjG49ZyE9dB8fCGfTM2Oyolj4kfEe2uvMtiKxUivt9MIJ97msI3tBe6ti0SO07EXHC5hQ61pWDcVyEH0QvPCR5IiYZhX71qxxCD")
                .transactionId("b59cb597-c346-447d-aa5e-abd741577908")
                .setModified(true)
                .types(new String[]{"cashback","topup","payment"})
                .from("2024-11-24T10:44:11.000000+09:00")
                .to("2021-01-05T02:43:12.000000+09:00")
                .nextPageCursorId("05f6ad36-e5c4-457f-a4b9-3996339f25d8")
                .prevPageCursorId("c6009908-4b5a-450d-a3e6-acef34cb2605")
                .perPage(397);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test12() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2(
            "2f89887a-34d3-4b8f-bb0f-85ef0554db01"
        )
                .terminalId("1b12eb7b-c388-4a0e-8838-e7eaec42fea4")
                .customerId("5bc02097-ed32-4dbe-89e6-fea2b2e608fc")
                .customerName("PJCGzVYdohDRxcepsSsdecspEcH6zAIM8ju98Xf3eDqYA5vYg7TRPpd99WNI7yrXSKnnTIb76zTEtm8AaIiuGx9L9HalOMU5vigXX7Icn5jXA5QxJPbbGkUILhTXtRtmknLVk7hQOvzRC9zFh")
                .description("AU2LnJOGL09rrRBaBOdWWGJsxArgIuumMVdl31leH5D")
                .transactionId("c512e76c-40fc-4937-9a21-5cfed5a9d92d")
                .setModified(true)
                .types(new String[]{"topup","payment","exchange_outflow","cashback"})
                .from("2017-07-11T12:18:22.000000+09:00")
                .to("2017-07-17T12:43:03.000000+09:00")
                .nextPageCursorId("3f48e8f2-1eca-4f0c-8cbc-83e467422ef7")
                .prevPageCursorId("3853e632-aa6e-4db2-b4d1-473bda0390e6")
                .perPage(495);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test13() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2(
            "2f89887a-34d3-4b8f-bb0f-85ef0554db01"
        )
                .shopId("f943b8a7-6f7b-4a40-8dd8-e819fb1c709d")
                .terminalId("e539eb72-6c30-4c37-b8fc-d9f9fbe44c57")
                .customerId("7b7c3c5f-2a95-4ff2-b07a-888a59dfc9fd")
                .customerName("RIJrBD5D7CpKjeG53Xpalhw5eupOSaoLetupiLJGKA08kULtDXm7mGq20CccqYOFtqhMLy1fSrOZ")
                .description("fnZ2mwTeB7HbtOFrcDL7mosyloW0g")
                .transactionId("d183054c-c179-4080-8b1e-5b4e0a5d4f7e")
                .setModified(false)
                .types(new String[]{"exchange_outflow"})
                .from("2015-10-29T04:42:57.000000+09:00")
                .to("2020-05-28T05:11:39.000000+09:00")
                .nextPageCursorId("3f3af5fc-b959-40ba-b7c7-dc2cd36fe104")
                .prevPageCursorId("0986abb9-eae2-444c-be46-6ce6e4fb9348")
                .perPage(458);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test14() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2(
            "2f89887a-34d3-4b8f-bb0f-85ef0554db01"
        )
                .organizationCode("vNj")
                .shopId("8155d5a5-bfa6-4e5c-9ff5-bcfbb0f65fc2")
                .terminalId("7c00ea7c-8032-48d4-9c8a-13ce56986dca")
                .customerId("bd783681-47e3-4ca2-8a47-fae0f2291276")
                .customerName("SmksA1")
                .description("uW1A79SIV4QucaCTIuwp4PaSBE0QhobjzNQVW3hP0Ve0rN3Em7q1SjNjatjjDZX7RIKgDX3b9oA142")
                .transactionId("d4df9df8-5b8c-454c-a58e-fa6bc6ed4ff0")
                .setModified(false)
                .types(new String[]{"exchange_inflow","payment","topup","cashback","exchange_outflow"})
                .from("2017-06-08T19:17:19.000000+09:00")
                .to("2017-02-08T11:54:40.000000+09:00")
                .nextPageCursorId("d3a88579-5c24-43de-af4c-47ddd55893f1")
                .prevPageCursorId("d6ef9c88-d394-41c5-91ab-9afeef85eede")
                .perPage(716);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
}
