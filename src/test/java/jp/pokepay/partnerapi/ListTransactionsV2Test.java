// DO NOT EDIT: File is generated by code generator.
package jp.pokepay.partnerapi;

import jp.pokepay.partnerapi.request.ListTransactionsV2;
import jp.pokepay.partnerapi.request.Request;
import com.google.gson.JsonObject;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class ListTransactionsV2Test {
    @Test
    void test0() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2();
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test1() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2()
                .perPage(652);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test2() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2()
                .prevPageCursorId("9849a1ef-8355-4f23-832c-9c24777c596d")
                .perPage(182);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test3() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2()
                .nextPageCursorId("3baba906-90c6-4928-bcf7-c982a8364122")
                .prevPageCursorId("f0c5b747-00af-48e8-9650-a87b03bb5767")
                .perPage(320);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test4() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2()
                .to("2023-05-21T08:05:14.000000+09:00")
                .nextPageCursorId("95ea0e83-7b80-4b21-891e-8eae9b4ed324")
                .prevPageCursorId("fcbd912a-d509-4e09-8892-151fc251acb6")
                .perPage(648);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test5() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2()
                .from("2024-07-02T08:40:38.000000+09:00")
                .to("2018-01-18T18:48:04.000000+09:00")
                .nextPageCursorId("b7118e4e-9d58-4c2f-8832-826838dfd087")
                .prevPageCursorId("12072a8c-b36f-4b23-abbf-f58e7589d2de")
                .perPage(621);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test6() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2()
                .types(new String[]{"exchange_inflow","topup","cashback","exchange_outflow"})
                .from("2016-11-02T06:57:17.000000+09:00")
                .to("2019-04-24T19:42:43.000000+09:00")
                .nextPageCursorId("5268ec7b-800c-424b-9700-80e71a00ee6f")
                .prevPageCursorId("69d54449-cfea-49b8-90a9-b8676dea3d4f")
                .perPage(642);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test7() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2()
                .setModified(true)
                .types(new String[]{"topup"})
                .from("2021-01-21T11:04:55.000000+09:00")
                .to("2016-03-04T08:42:59.000000+09:00")
                .nextPageCursorId("1a0b875b-bb07-462a-bb93-25edfc0aeb1f")
                .prevPageCursorId("0ef8d060-0ea4-49d4-bc76-88b62718f866")
                .perPage(570);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test8() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2()
                .transactionId("qKH9MTQABn")
                .setModified(false)
                .types(new String[]{"payment","exchange_outflow","exchange_inflow","cashback","topup"})
                .from("2021-02-18T01:24:00.000000+09:00")
                .to("2023-10-16T15:01:55.000000+09:00")
                .nextPageCursorId("f43b9fba-1147-445f-8dc3-d59a690bdc16")
                .prevPageCursorId("364648e1-17be-4175-974f-2d229c07b840")
                .perPage(331);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test9() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2()
                .description("amDnm4lGdcPEwkwvdu2Tibs1Zh4DrV4IoIyALoHXxYlOM99YCuotH97zaDj7F5rmi06KwauEz6bCPepEthW55E6r478yKbDdDc7O3YhcfALddOvGWH7aCnlkalI5IrTj6Q4TlWYLYqhGE0QJ1bTshnmYa89KNpao3W6lpKexx2oDVq")
                .transactionId("j7Cx8m0")
                .setModified(false)
                .types(new String[]{"payment","topup","cashback","exchange_outflow"})
                .from("2017-05-27T23:12:12.000000+09:00")
                .to("2017-08-02T02:37:56.000000+09:00")
                .nextPageCursorId("e7204d55-1333-4e08-9bf1-4ba6f74f44db")
                .prevPageCursorId("3c402c04-a2e3-46c3-950a-399c37056282")
                .perPage(998);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test10() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2()
                .customerName("6YAaQTEHIbD2n")
                .description("8rM4YCe6HbLxCC8VPUGet2a6S5YRFroEDQYaOZ0l3pHssQ0NAHymvCSTTWD17VoTPGzKenmn5nE0IM0spLjIXpFw1WBo1eLnbuMnAVwlku340AulKp5hAIPPPXzVMvQ7ySXxSlEFuXtPIaOfL84sgPJQ6n")
                .transactionId("dkZInSXPre")
                .setModified(false)
                .types(new String[]{"cashback","expire"})
                .from("2018-07-01T19:24:40.000000+09:00")
                .to("2020-11-28T14:53:15.000000+09:00")
                .nextPageCursorId("cb101144-a2ec-47b1-a2de-dc10ce220e4e")
                .prevPageCursorId("1e673c5b-c5ba-4724-872e-1ebec19371ca")
                .perPage(322);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test11() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2()
                .customerId("4ca4d9c7-6aab-46b3-8db6-0004043996f8")
                .customerName("M0mt15gLzSF9ondm7DQc7RXI7yAgCEqhg2ESGH7ZLUCjd3SLp5CaTxKe3AQ8dT8eFPtFvks6jfYD92pRpdsQbHAAMTzc0p5buh0kwv4pPi0RUoUGVVKw8IjF6enjly5YRQWaF8OrmFi9vEfOeRhRWJpyBmdIKIiPUm3pvGV5ozfBtXg")
                .description("O1a3mRdxmQXwANZm9dOnwYbjjCmYOSa6qxbkQHfxhAtD1IhC72Zp85cWvJP8LQsX1OTgRWFTsdlHfnHfFr9vvJWd6DWVPn0c")
                .transactionId("lNj")
                .setModified(false)
                .types(new String[]{"payment","exchange_outflow","cashback","topup","exchange_inflow","expire"})
                .from("2024-04-17T23:26:26.000000+09:00")
                .to("2021-02-06T07:18:45.000000+09:00")
                .nextPageCursorId("e991d892-4bfa-4be9-a504-bcdb2ed43f63")
                .prevPageCursorId("b7741506-fabb-4b5b-a907-5802dd56c356")
                .perPage(550);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test12() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2()
                .terminalId("6fa6df0b-a4af-4375-8303-a7f75cd4175f")
                .customerId("a4cfc075-731f-466b-a4fa-b68c851dfb66")
                .customerName("6gT95kJ5Vei")
                .description("QfC0mhn1JH5jpOIcnPTSLHW5hhwk6NXPFC0kjw1pJ2IxMQdLQ4Jo4oemutOBqZj15u8B1lrAdou4HuWP5E9Chcp0GaEURnWSFquLgp")
                .transactionId("PEpLSt")
                .setModified(false)
                .types(new String[]{"cashback","topup","exchange_inflow"})
                .from("2017-06-04T02:44:28.000000+09:00")
                .to("2016-04-11T20:08:48.000000+09:00")
                .nextPageCursorId("fb7291c9-e04a-430d-8947-b68588de9cff")
                .prevPageCursorId("0e0a7105-7741-4c05-b8dc-af81631050b3")
                .perPage(17);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test13() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2()
                .shopId("c4b5bf53-9686-49cf-b857-326597697969")
                .terminalId("79e24dba-bc61-4ed4-a359-ddb55dfb878b")
                .customerId("b51c70e9-736a-4aab-8aaa-61a0bd5f47a5")
                .customerName("xnMU9709XBI5As1A4B01E0EOvqfR2QFkNKOHT8fibDmg2MJ8IJQJz4OWwmupuMhaQgtaYW8P2JVI8bab1jwQ6u0cfwv1Wo7YCc5mit9cye1gRJI81xyKEidiIfqhwXUS99fawlzv")
                .description("4hINtAup69m6Ae32VacehQBhWtIrfim9yqfXtNCePsdEWzunzylGeKr9Dp1CeViPMSgNNbqCqno5X7k3HQ33Ad3vnKlUkeKEwXb6J26yPdoE42zJ75L2LNF0l8Ua11Xdxsak6WY6VKwXiUHAdOU8")
                .transactionId("C")
                .setModified(true)
                .types(new String[]{"topup","exchange_inflow","cashback","payment","exchange_outflow","expire"})
                .from("2017-12-06T03:49:46.000000+09:00")
                .to("2018-08-27T23:50:26.000000+09:00")
                .nextPageCursorId("251f2b16-0165-42ca-8c90-1943ad4d5daf")
                .prevPageCursorId("372617ce-0881-454b-82e9-dc709f4d2881")
                .perPage(751);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test14() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2()
                .organizationCode("w")
                .shopId("e65eda5e-c9d7-4037-ab1c-50a45d0e053b")
                .terminalId("a938fcd4-ff50-4c92-9930-6cf6f9f47b73")
                .customerId("2519ae4b-6295-4658-9de1-3fc2ebc258be")
                .customerName("g2uyaD2Cbtp5yRLkzwxo6by0t716asZqzBTaokVFQRG08d")
                .description("f8c8O94P94km1MI4d7b9SNTITCWTGgYglOzEAEDQJlSBvTaph7ZxIQCZYHBo19FvqF8NQLpca7DRCzXbJ665X021R8SnbRJoKibX4D7oNU5y2GV6YbmUqUEaQt91evmxYQv8g6JQduRkbaN5IC4qcOZddYEP0qRBTlvOLDm9eZnk")
                .transactionId("cI9fjU3Maq")
                .setModified(true)
                .types(new String[]{"expire","topup","payment","exchange_inflow","cashback"})
                .from("2016-11-12T11:10:12.000000+09:00")
                .to("2022-12-05T00:31:35.000000+09:00")
                .nextPageCursorId("6b5c5d6a-70bd-4f08-b1a2-b9914f90dc60")
                .prevPageCursorId("a160277c-2fc4-40a7-9cd5-6855221a332a")
                .perPage(734);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test15() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2()
                .privateMoneyId("98e9efee-8fa1-480d-9c3f-55573420ab7c")
                .organizationCode("-Rl2-81-UbXCHGc1D-Gd05FiTXu")
                .shopId("208957fe-fe13-4c3b-b78a-ec52a544c1dd")
                .terminalId("2bc98a1e-ffcd-4d85-a7e3-4870866c075b")
                .customerId("8d1a046b-91a7-4413-a66d-5d05a6ea36bd")
                .customerName("elq7CCXkgmHneQWl5DBVkEPvRf6H0JKcJ1EDDeM34n0s1rWo7Yvg2Z23rvYhEqKIQszkl9b6spzwbcblbeF61cgl4wVPKGUFs4kFik8CsIrzDxbOKaHIeqUvnpUb30ZOamYV4eanz3DYEZeacCCyMdDODphBiA6M6etr8X4bVNDsgLRu2e1HyrM5NVNzpxhAjIE2XHCrsHba6")
                .description("2TB7H4XiQDzcsKgrDIZoATh7wdlrhNdAV9H7UMpVcre3oCst7OpCUYikBoLsFIW7Ss3DkZllvprOISyhpMNcf8ECPpNYHRLU8kWOkP0H0rpm5asUmkqMkZz0gSXPRVfnx17Ka")
                .transactionId("O3zjV8")
                .setModified(true)
                .types(new String[]{"expire","exchange_outflow","topup","exchange_inflow","payment"})
                .from("2019-07-12T19:19:46.000000+09:00")
                .to("2016-09-15T12:22:44.000000+09:00")
                .nextPageCursorId("4cb98f73-9f43-4532-a62d-0ee1c6218f2a")
                .prevPageCursorId("b2ec39f4-8d7b-4cf3-a7ce-686a9c9e1c8c")
                .perPage(343);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
}
