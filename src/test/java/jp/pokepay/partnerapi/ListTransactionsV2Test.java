// DO NOT EDIT: File is generated by code generator.
package jp.pokepay.partnerapi;

import jp.pokepay.partnerapi.request.ListTransactionsV2;
import jp.pokepay.partnerapi.request.Request;
import com.google.gson.JsonObject;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class ListTransactionsV2Test {
    @Test
    void test0() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2();
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test1() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2()
                .perPage(315);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test2() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2()
                .prevPageCursorId("40b5ef2d-3880-407b-ac8e-f052b0abc1ab")
                .perPage(942);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test3() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2()
                .nextPageCursorId("279566f8-e081-4c72-9467-b06001e251ab")
                .prevPageCursorId("18d2e206-1b65-4500-9293-99e5b2607570")
                .perPage(704);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test4() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2()
                .to("2020-06-16T12:30:14.000000+09:00")
                .nextPageCursorId("19629b8d-dc11-4377-839b-e7234be49b18")
                .prevPageCursorId("58c021e7-c8aa-4d82-b88f-96aca924cd5c")
                .perPage(920);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test5() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2()
                .from("2021-01-08T06:23:58.000000+09:00")
                .to("2021-09-01T14:52:40.000000+09:00")
                .nextPageCursorId("3dddc161-f169-47da-9c83-9a2e6298c09e")
                .prevPageCursorId("5fc314ee-c7ff-48a3-9d30-7ea4fdbecaf8")
                .perPage(997);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test6() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2()
                .types(new String[]{"payment","exchange_inflow","expire","exchange_outflow","topup"})
                .from("2024-03-22T10:59:35.000000+09:00")
                .to("2024-02-25T07:45:16.000000+09:00")
                .nextPageCursorId("5be4a41b-02f8-42a0-9e6b-90aefa99f16a")
                .prevPageCursorId("8c3749bb-d85f-4bd5-82ca-370801cef011")
                .perPage(219);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test7() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2()
                .setModified(true)
                .types(new String[]{"topup","expire","cashback"})
                .from("2022-11-30T10:54:32.000000+09:00")
                .to("2023-01-15T23:40:02.000000+09:00")
                .nextPageCursorId("5d456f7b-4149-499c-843e-c6818513d19f")
                .prevPageCursorId("ecdf08f0-bd8c-47ad-849d-a1f58a74c221")
                .perPage(873);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test8() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2()
                .transactionId("Xcunh0")
                .setModified(true)
                .types(new String[]{"exchange_outflow","topup","expire","cashback","payment"})
                .from("2020-06-11T23:02:08.000000+09:00")
                .to("2020-02-15T11:56:20.000000+09:00")
                .nextPageCursorId("f364e42e-ef65-467a-9a88-3a611f4de8e8")
                .prevPageCursorId("239baf1c-2d4c-47d5-b5be-120ec422bc97")
                .perPage(339);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test9() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2()
                .description("Xlew4NUKyAFAAypM2MonKlhgaYlwMIkhAqsaAOwwOC6UYeUt7j2gcPC216HwVPdJYuCDut31Nsir")
                .transactionId("WSmT")
                .setModified(false)
                .types(new String[]{"exchange_outflow"})
                .from("2021-08-30T21:16:55.000000+09:00")
                .to("2022-12-18T04:41:31.000000+09:00")
                .nextPageCursorId("ad20f15d-ba29-4cb8-9737-259e8e1ae720")
                .prevPageCursorId("96c32c3b-80fd-4f17-8a7a-100e83bad814")
                .perPage(886);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test10() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2()
                .customerName("xG2J5m9PnuKbutvmAQufIO")
                .description("iCZkuvG7ENtR0oyIfV8lAmM76e6BX10t5fL2LOlQ3aauHpfbXA2A")
                .transactionId("8IMxln")
                .setModified(true)
                .types(new String[]{"cashback","expire","exchange_outflow","topup","exchange_inflow"})
                .from("2022-08-25T10:43:31.000000+09:00")
                .to("2022-12-03T20:41:36.000000+09:00")
                .nextPageCursorId("42404980-cf26-4b87-8240-3988cfc378ac")
                .prevPageCursorId("71b1ce11-4848-4d78-bf27-7111a60b7e73")
                .perPage(326);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test11() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2()
                .customerId("5a91fd41-3578-496f-9616-61f8708b51a1")
                .customerName("rNU8LXbFrBe562qDgFf2ebhoqPXeO1ndrEOQeBDR97pGXm1ye3dlfkM8xoRCcqMgqxRhNWwFxsw8yUK4XQAXAqNK7ET7")
                .description("sNo8VBcIcSf8vzq9S")
                .transactionId("eYo7")
                .setModified(false)
                .types(new String[]{"cashback","topup"})
                .from("2022-02-11T20:47:50.000000+09:00")
                .to("2024-03-08T06:18:47.000000+09:00")
                .nextPageCursorId("3d7e84d4-3a00-4503-a337-bb6f673a3678")
                .prevPageCursorId("8fa0af9a-7a7b-42cc-b242-2ada59205ede")
                .perPage(26);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test12() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2()
                .terminalId("1e8a67a2-792c-4c92-97dd-b2c8ef935301")
                .customerId("bd875c48-5cd7-4913-8f56-6c52f1717651")
                .customerName("vrfTGIfHdhafZbYvlg6KQBE")
                .description("Gd10Uvu48S1gBWXDiKibF8RfIkVv8P2jqzrPpS9zBu5Q59")
                .transactionId("Gpos")
                .setModified(false)
                .types(new String[]{"cashback","payment","exchange_outflow","expire","exchange_inflow","topup"})
                .from("2023-08-15T00:10:41.000000+09:00")
                .to("2023-02-18T23:50:20.000000+09:00")
                .nextPageCursorId("e0d35277-ebe0-4c29-9c16-c53f880e38b6")
                .prevPageCursorId("33d43f4f-bac1-49e1-9b65-d812f37a8ccb")
                .perPage(252);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test13() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2()
                .shopId("48366912-9dbf-43bf-8b36-35f1ea461902")
                .terminalId("127f15bc-9a25-4598-9c5f-3bb4aaadb05e")
                .customerId("1728302c-9883-449b-8fee-6a45724b7551")
                .customerName("u3dLMG1pCNUYdAAx1OxrDYxnloFRGnadQIWsdhP6R2C5dW6fKdRtWKdKihZwZtkcovlQzhbJCTkh25SVQcA8n94iZSlfb5adg4PwkVMtI8ag6L5Ok1RdQbphaAuzg")
                .description("QVj8Hfoq42XmUtPQlhTxrwEGX7qAlYO99ht6OyFa8Nv373hc3iYympc3ik9wdyEhCbC8PMSPhCEOQN5OY1ZneUgUWh1i4OJQXELD2mQHphq4qS4xEikExnN4ytufXEqAp6PoKBMuRplxQdWZU6hHRiAr9")
                .transactionId("UTdZ5OAm4")
                .setModified(true)
                .types(new String[]{"exchange_outflow"})
                .from("2022-02-13T14:50:12.000000+09:00")
                .to("2022-02-10T19:13:24.000000+09:00")
                .nextPageCursorId("465d320f-a641-4bd5-9ba7-1312f4858e3a")
                .prevPageCursorId("888dd398-0252-4450-8fd3-23155d5bc01a")
                .perPage(26);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test14() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2()
                .organizationCode("ed-M86-j-1-VTx-wW3q-5--6")
                .shopId("6336b416-97f6-4621-9e22-7251af514a83")
                .terminalId("8af0314c-cccb-493e-aa69-1f5e7ab6f6ee")
                .customerId("39c79256-96d6-440a-8cd2-1da4c4f4df65")
                .customerName("wgYlt4JPW2FQyI2rBsA6z2ztfDwfs8MPjKVgrjgtDyX1EII1NUBa1P3tLC7hJCYzRrp8mmw5vhpfHuFeU57iQvMSngd49KBL3MagLTnsVVX3DcAz6LeEdqx7GOlxIE8UNN8O4lEKIasmb4D9ifmZb8ejJd55p8n20T7bZCzw76OM0KJ9TWoJYHO82Qaj2WaFL")
                .description("JgTWywIgXalwL14cj51Ktjqu24uaOs0d3mWxuzgVwLCxJHmSsSi8kHrg6qbWvG5g")
                .transactionId("cbNb38Tcs")
                .setModified(true)
                .types(new String[]{"topup"})
                .from("2023-05-27T13:27:37.000000+09:00")
                .to("2024-04-25T20:11:27.000000+09:00")
                .nextPageCursorId("1125c8de-d90f-4082-92f4-bacb4810c485")
                .prevPageCursorId("9739a46f-c67d-4efb-824c-458029660593")
                .perPage(537);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test15() throws ConnectionError, ProcessingError {
        Request request = new ListTransactionsV2()
                .privateMoneyId("44d83493-235e-40e2-8465-36268a22b42c")
                .organizationCode("w-85YO")
                .shopId("b3ede687-80e2-4472-8fe7-5529d0e19535")
                .terminalId("13100247-ffe6-4915-85d2-41d8c8e5348c")
                .customerId("00f5b2e3-c8f8-46ef-95a0-1b29812a62f8")
                .customerName("PY5biWEV187EmqHXrr0lK5ZbSfTm4wHjwdbTYhb4Q8XwtBb41dR6HHBayt6cmb5uT0e0lu6bAVBSqfGjm7zGf67zTSfjkDvc09hm6RbwqByTBxW4xg6Eeil0iowKpVviPXGVJ12OcVH0jdIBHzQmV0l4XATlf7YxddxEvdy837s4Ft7irosJJpuRiQ6fNiLhuVQ0lR4F6bgrqUB2BXzlBybrFUY0MXzEg")
                .description("bSN7FSsJ06wXl8m61mY5Mup")
                .transactionId("Kk02KKeg")
                .setModified(false)
                .types(new String[]{"topup","payment"})
                .from("2022-08-04T18:30:05.000000+09:00")
                .to("2020-08-17T13:42:11.000000+09:00")
                .nextPageCursorId("65ba0c03-15ab-4c23-9401-0f3f4cae42e1")
                .prevPageCursorId("77abc164-4352-405e-8978-ab60e3869317")
                .perPage(673);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
}
