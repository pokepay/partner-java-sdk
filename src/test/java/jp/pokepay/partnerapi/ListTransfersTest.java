// DO NOT EDIT: File is generated by code generator.
package jp.pokepay.partnerapi;

import jp.pokepay.partnerapi.request.ListTransfers;
import jp.pokepay.partnerapi.request.Request;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class ListTransfersTest {
    @Test
    void test0() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers();
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test1() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .transferTypes(new String[]{"payment","transfer"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test2() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .transactionTypes(new String[]{})
                .transferTypes(new String[]{"transfer","topup"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test3() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .setModified(false)
                .transactionTypes(new String[]{"transfer","topup","payment","exchange"})
                .transferTypes(new String[]{"transfer"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test4() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .privateMoneyId("adc4b06a-758b-4a0c-b3df-8a866a0243c2")
                .setModified(false)
                .transactionTypes(new String[]{"exchange","payment"})
                .transferTypes(new String[]{"transfer","payment","topup"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test5() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .transactionId("adbce974-f759-4acb-aa53-3ae95e441229")
                .privateMoneyId("811e4627-84bf-458f-9489-7fd905028b2b")
                .setModified(false)
                .transactionTypes(new String[]{"payment"})
                .transferTypes(new String[]{"exchange"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test6() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .customerName("MrQtUt8nWWpCapfITnZORkeUGIa3qe4tFd3WWnHqo7DpLMrk06U11A6uWB4ZFJXSsStytRDYvDK6W13oO")
                .transactionId("eea96690-1b43-411d-be38-cf3fef660024")
                .privateMoneyId("54136f5d-0171-4f29-aed1-f2439eae4df7")
                .setModified(false)
                .transactionTypes(new String[]{"transfer"})
                .transferTypes(new String[]{});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test7() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .customerId("02c2c126-a35c-4976-b892-1672c9d86cd5")
                .customerName("vhkV4gr2ElOUhHI3Zad9BuNAEeUSqyCQCUC8N0qgy1z3QLMaK1cbnj9nxOlwEDDNeINYtoKM1EkFQhNz0Xji9vqSmTcovQJc4tXJ5BvlIzN8ABvMDTXwwttzCDQ05jmg9EBmtzbhDZx0HUyQXh4F0Xwq7sYZZGwTxrjHDlvfQZWA3fT7k1ImNS")
                .transactionId("83cabefd-acb3-448f-bfd3-f968a6ecb004")
                .privateMoneyId("46810bf1-96c5-4cdf-9891-3ecdee12270e")
                .setModified(true)
                .transactionTypes(new String[]{"exchange"})
                .transferTypes(new String[]{"topup"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test8() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .shopName("gRaX4eWx8sPJrj4trViIpwryBbR3NXpjVtUTodN1hEHzIApjVudPp15pkvjnf9nccZwtTrCbO2KTDrzX5hxybMoRtHdDElJzc3fFd7g4m5PNcQAPnlna5m51OAAOimwViNHL1d7XHFePeZDJixW9tOPk")
                .customerId("b95d21fa-5c18-4b5d-883e-95d0d2876390")
                .customerName("DtfX3B12L285Zf3HdFnqmAAKLvl0a3dbGUeE0KuZR99qFce6ch0EiMq6GjNTcSeWi2WKaD9ITiMVN1vcL4ftiRFI6zwy4l7zSFDqEhlOiJfG8lFVHGKzqknoSGLERPEo9ObM6qW3ipW8i8WgUoUgKB7tEGXtgC7iqj62yJTaiS9rBBgdRYysGkzZABszPgpBdfP2rV28uXCJv")
                .transactionId("e2789297-12c5-4a76-9939-0658b90042e2")
                .privateMoneyId("ffb331ef-507d-4a86-b169-91ec3b675e4a")
                .setModified(false)
                .transactionTypes(new String[]{"topup"})
                .transferTypes(new String[]{});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test9() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .shopId("83cfa871-3c92-4c5e-83fc-c4023be48e1c")
                .shopName("Nco407EZluYFZ7WY64pg3JKH67SuJbcN4CjlsmxFyJ2nEf5f4JywZYAyI3Tk9hINiQc1jmnUqlnezydx")
                .customerId("8ecdf8b1-2b4a-4bf9-b6e2-a06618d1f550")
                .customerName("Lk301M0PFKbNyO8C48NCVQMkM8gE1e9OGp660PVCagIJhyxCDZhm9IQ1WjBWfc23OCy5ue1vKKq0ILd3poJHHoC8g8NOePXOdJD1WsmbkO4IEpBIZ1Jz9VEjQDJ")
                .transactionId("56cdbbe3-ef7b-4113-8093-94208ae0a251")
                .privateMoneyId("34e7e87c-8830-4930-ad26-39bafd3ead14")
                .setModified(false)
                .transactionTypes(new String[]{"topup","payment","exchange","transfer"})
                .transferTypes(new String[]{});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test10() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .perPage(4716)
                .shopId("f4d7fc76-219b-4bab-8fd5-de08b7b6d00c")
                .shopName("ssTDEIAVfCcDZXi1B4yWWHkehepaUX0JGKxUFYFnooWELJrGGmPE8p4ksVd57cQSmrxfYw2QyjIoMZ4kCZB0kqQE0fphC6xklcqU9KcTAUtRAti6ijr9DTHzszHozsiU6t9CgqKxRtpywGPnS8xtbkr202svo1h2HbKvF9mzp7svpcKcv0H4PIAFvnr9cjTF8QA")
                .customerId("6c774dfd-fe39-44b0-a86c-060efa623c35")
                .customerName("sum2sklo2DurHbvTVM1CzcebGiuUC4cjnL1j8GVjHG3E6Af3zqLZle1bukJIPHHmN1GEPVnp4kb1IzHanw2CBHaW6MEM9j0sceSc6NxemnGnwKQeNgTMyqYNc8hfljmpT8uVj4hmBmvILoJ7jKhyQWc7ykQCkZTGsns2eOc85WOdgHXkylp1Ak96WuZbyb2i4EJRQ5")
                .transactionId("1b684927-1dd5-4ffd-9547-21dea298d79e")
                .privateMoneyId("3d52aba6-732d-41ee-89a1-27d311f3036f")
                .setModified(false)
                .transactionTypes(new String[]{"payment","exchange","topup"})
                .transferTypes(new String[]{});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test11() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .page(7814)
                .perPage(8031)
                .shopId("f936bc12-859c-43e5-9f07-9ed3511842a6")
                .shopName("2wAmzcSyGpyags5H3vr21gGmoqfNll7LslTSukwAddBhpP4x8gmv3VFCQj4xr34RKXLQ6VUBFHpRQBUb5OgumY1LdkGRAVIQGOEN3uUjYSYdqMI91jr32xxxsyWgpm1Uw575hITmZ1i0SBzs5qk7YEX0R9inBFGb4LIvTLhJ7LoBnWge5JbdQvyJUGzaMfeDAS3cL9o2Nfrx79bhC4wsl5yvca")
                .customerId("336cd7ee-e293-44be-9ca4-d57f9925e40c")
                .customerName("legZnGFG8CUWXxyM28I4d2ETZGwd9xFQ9Mocr2qI6HlLkLtg8ktNKvRW3u0JxDDqgWdsj2tWeRG1fr6aCNr4x0lACwB")
                .transactionId("cc46a5f4-71a0-4f3c-b502-9ff0361f03cf")
                .privateMoneyId("774e3ad5-6f24-4fbf-8c22-a94ab1107b39")
                .setModified(false)
                .transactionTypes(new String[]{"exchange","topup","transfer","payment"})
                .transferTypes(new String[]{});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test12() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .to("2017-04-08T14:13:26.000000+09:00")
                .page(5485)
                .perPage(2591)
                .shopId("7bbfd689-23a8-4ba7-acb6-2d2252bf8eea")
                .shopName("I7V8iKbjytfhozIDXq84JzosJQDOFdJ2jt31T7VaKhJ7N93FESemt")
                .customerId("e579c4f3-8dbd-4440-8286-323cd14563c7")
                .customerName("fJui7o92T8dYjhjv2Tc3cEypcZrLbFKLxVvxbU2Ylsx76zyR87vr9TvNKxEoojvaS8ZQflyCDTozyIAtumkLNWrzGBHI8T3S6zSOlu")
                .transactionId("394e463b-ae3c-41d6-8cce-2356e54303e0")
                .privateMoneyId("4e0e6a80-8cb7-441d-ade0-22294673d36f")
                .setModified(true)
                .transactionTypes(new String[]{"transfer","topup","payment"})
                .transferTypes(new String[]{});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test13() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .from("2019-03-26T23:19:04.000000+09:00")
                .to("2020-04-01T00:35:49.000000+09:00")
                .page(1804)
                .perPage(55)
                .shopId("02012cd1-40fb-4d61-b1ea-f7ad2470e3a6")
                .shopName("45ExfXA9HrTqtv23LdgC4Y3ZNwS4eZU6dHzI886JUXkJHP4FYx5tgP3e0FCkQFx8Hk26ydDQphquwvkfSGof8DOM9XeOqIaGLtwpMBnsNSSAtS51QWHgVlLUf8dJlBrdLqI9UBXNL3W4aCrbt9JkucjonlQYtxAW06F5RdIrFaHGPz4GBn2BRLVJzP6m0mvJ1qkUHoVcwT")
                .customerId("bfae8f7a-7582-4acd-b9db-230bdf6db1df")
                .customerName("1yAHbZcX3wlu2r3uUYARo3WJ5f2iZjhU1Q1bVKCmf9rWceSDVSBuzAMNzIPIfaaE4n")
                .transactionId("4fa53716-6436-4956-adbf-954e734b0aae")
                .privateMoneyId("6d4b2cf2-9bcb-44e1-ac8a-bdfb8a3d523a")
                .setModified(false)
                .transactionTypes(new String[]{"topup","payment","transfer"})
                .transferTypes(new String[]{});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
}
