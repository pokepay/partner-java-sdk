// DO NOT EDIT: File is generated by code generator.
package jp.pokepay.partnerapi;

import jp.pokepay.partnerapi.request.ListTransfers;
import jp.pokepay.partnerapi.request.Request;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class ListTransfersTest {
    @Test
    void test0() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers();
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test1() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .transferTypes(new String[]{"transfer","exchange","topup","payment"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test2() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .transactionTypes(new String[]{"transfer","payment"})
                .transferTypes(new String[]{"topup","exchange","payment","transfer"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test3() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .setModified(false)
                .transactionTypes(new String[]{})
                .transferTypes(new String[]{"payment"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test4() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .privateMoneyId("27dc4279-476a-4053-becc-8291a84bb392")
                .setModified(false)
                .transactionTypes(new String[]{"exchange"})
                .transferTypes(new String[]{});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test5() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .transactionId("ee308744-0056-4051-851e-d5c83b485170")
                .privateMoneyId("e71952fd-1a94-45b4-af3a-90bab827c3bf")
                .setModified(true)
                .transactionTypes(new String[]{})
                .transferTypes(new String[]{});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test6() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .customerName("YmwBqWvKdqYBv8bc0iZ5EyHl41eCN7DBCqsyqWMjS9ykaSaTIvP1iY4uyLQHqrdILqFprZvcJzXxcP5mfeU8lGonqJ2rD30I")
                .transactionId("cbb39ff0-418e-412f-9a7f-78981dce2fa7")
                .privateMoneyId("42857b18-0677-423e-9b48-579919af0249")
                .setModified(true)
                .transactionTypes(new String[]{"exchange","payment"})
                .transferTypes(new String[]{});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test7() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .customerId("85079cdb-422f-4d1b-80dd-c46baac43943")
                .customerName("aLid7ciTJez3kf1TyA1JngYLjEDM1HPfHOOYOmogNsF2TxJi5ZBdcbTTa3tCuqdimeZ9VUnJAiojt3UE4XowSApNwx86TL8QFCzFMwibJklWtRzyMFEMQiHsD")
                .transactionId("7baeb321-4348-434c-b368-c3ad4bd6bad2")
                .privateMoneyId("9ea6e440-8466-4af6-8172-25e1b3f9b515")
                .setModified(true)
                .transactionTypes(new String[]{"topup"})
                .transferTypes(new String[]{"payment","transfer","exchange","topup"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test8() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .shopName("nrGSzMQlXqlmty7rcffRBI4awFyhcRus5myxCxERsPiQbft")
                .customerId("3e41dd66-9674-49af-9789-5a643f8a728f")
                .customerName("z9ymuBv03Tn47QBJykrYlHcc4cOEEoZPdFOEAcX2KGjXbFwKZ3HtpeBYi0Qu0bxl3cBBBMk3cW4ICKVPjHhqwrgbotX9coppbwLCAWSg0IrWOaAR")
                .transactionId("3d9081e8-7d1c-49dc-8f7e-caeed8ddb3d0")
                .privateMoneyId("43b2aa92-88cc-4015-824e-66089e0ab869")
                .setModified(true)
                .transactionTypes(new String[]{"transfer","exchange","topup"})
                .transferTypes(new String[]{"transfer"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test9() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .shopId("684e8485-0b44-460a-94a2-2d6daf7c353d")
                .shopName("IvdMNTxzjLS8ZE1caG3SLnjni6atM3GOLvIkPGvfWaq6fjfb2ellJa2PMegcspdMc0U4aMHP3TcbP0cuZX3rvrPDRxP5PjdiuAxFlWvuVWV7uNMUb6MpjhWbqI1b3e3rr10ysYOm3QtH98nKlvUDAncaQ")
                .customerId("e595ecf3-4a31-4d6e-aad9-bfdd5c8eb2de")
                .customerName("O2AG2F9SXNf3YyiCcZqAFwSLhWjnb9GUxuDTplVl4bfwL")
                .transactionId("4e4ee45d-2cfa-45f1-abe4-3ec7007df6d3")
                .privateMoneyId("bc7a594d-94cd-40e1-b99f-454bab592fc8")
                .setModified(false)
                .transactionTypes(new String[]{"topup","exchange","payment"})
                .transferTypes(new String[]{});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test10() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .perPage(1487)
                .shopId("250c4f4e-9ad9-470b-80df-4ee906cfd8ab")
                .shopName("UseHXMPeKDGAfJ08tYdl6J8koOAThpnmuWQgRNBMhPLXVtUWsyMOE3ZHomRplyoOIlM3mAZhQWFspU7jKf9QTdYtbEg7rSspe3n082tUBpQRAUme1IztD5dmkq5oHq4rAydBmMLhFUvgIaSONfpnEyxrlURq5DpDfMr0uOzfTHSxHou1RdRuxMjDCp81cd3XchPfR3RiMt46f1xEZY9s")
                .customerId("6acddf13-b3a5-422d-8fb1-54637ec5c1fc")
                .customerName("fvIvivIlCDk39XCByrtIomNtVdRDEFe5DFKAjXGIf9WfAqODhEOBnAMWX8pjIAc2ktBKiARxUqtr8P4xWe48GRHAfPAHOFzbJ18wjmTlIQWixHvfbWm1Vv2JC3hy5EiAvcWbKoi8EKAQ55F1QoSG4Vp7wrXdeXsFLhFwi07j5OD2vlSmTmI7CeAUqawMUitu7o")
                .transactionId("23d0259f-9762-465e-9c25-f26077a1388e")
                .privateMoneyId("22cd0287-8562-4718-a1ee-14f4552587f4")
                .setModified(false)
                .transactionTypes(new String[]{"transfer","payment","topup"})
                .transferTypes(new String[]{"payment","transfer"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test11() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .page(4446)
                .perPage(6711)
                .shopId("78119603-3451-4393-bc92-1a8324b8f7d7")
                .shopName("8FWJeqkd79PUTcFvSmnRBxMCnvCbMt1olAuwF0EOF0QZMw801N")
                .customerId("d1089026-3366-404f-93b5-873bcc82a12b")
                .customerName("Ys2zXGnyeCR9UzxFeh4EdeVU9hp8wCarXExnQ8y2wArS3ttdAfok0UpYUehI751YPw7ajPQoSLC9xfRPJBhG0tEgwsQwPWnokCVLSfYfbZBxIhDK6TB5s6hAfZKX7FwmDBUCkIdiT1eHSJEdJqhpTHEOhVusBMMTFVr5rC7uk2cSSPUlcasRQfi0i30Hec6yMzdYkjolXIOyn5t9AihIc6bGD7pQmLIEDNb3D1NrwvrX1FEyDYUFd")
                .transactionId("5cd2f898-81e9-42b4-bf70-6ab237b684b8")
                .privateMoneyId("7c42e134-33aa-4f0f-95c0-e615c6faa14c")
                .setModified(false)
                .transactionTypes(new String[]{"exchange","transfer","topup","payment"})
                .transferTypes(new String[]{"exchange","transfer","payment","topup"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test12() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .to("2015-11-27T11:07:58.000000+09:00")
                .page(19)
                .perPage(7388)
                .shopId("a0c29952-467e-4dde-8a05-f29dce22d9bc")
                .shopName("GK1oQlbkXPN6ootTir1MMgNI4d9n6eWet6uMnsLM8SOer2xhxkdfRtcIMQ6z8TInkLEigbExgzkundcvlWy48fYGQfxgfgDcywDTBXfOExdfyRdWDHz8b8Cu6MBt")
                .customerId("492c0ecb-0d40-42ee-aa5b-3012ddea97a4")
                .customerName("CcXYHY0W6IvXYuoreliMSeJFMQPWBZHN1SeCgG4fvJot8sixnx4G0zzOOkrieGi3hK8LeXAqraZN5bZhd1WEVEApJkG3mlku70sJ4DkRP8WedxA2vDS6pMnbT6zX1kJDnltyuhVO4Om2XY0")
                .transactionId("839fae2e-a653-4924-92d5-769f21515ca0")
                .privateMoneyId("c8a8f4e5-e8ce-4e4e-ad5d-8e28ebd13b67")
                .setModified(false)
                .transactionTypes(new String[]{"topup","exchange","transfer","payment"})
                .transferTypes(new String[]{"topup"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test13() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .from("2022-08-31T23:09:08.000000+09:00")
                .to("2020-06-21T06:48:35.000000+09:00")
                .page(9292)
                .perPage(2023)
                .shopId("94c0d10c-094b-41db-9a94-ec1f70b39509")
                .shopName("NhcP4S40tVXOmPYs2TbC6QDxVXJ7QXGoON8dFX7x1FOA")
                .customerId("90048efd-0f5c-43e8-976d-579e6c3fcfb0")
                .customerName("kLc9FOkP7u0x8BlrfSfqsdY")
                .transactionId("5d81684a-b05d-4e9f-9609-cccfba03272e")
                .privateMoneyId("eac7633c-b40a-44aa-9d89-f6e8ac9dbe68")
                .setModified(true)
                .transactionTypes(new String[]{"transfer","payment"})
                .transferTypes(new String[]{});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
}
