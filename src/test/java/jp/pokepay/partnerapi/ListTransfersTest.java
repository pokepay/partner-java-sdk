// DO NOT EDIT: File is generated by code generator.
package jp.pokepay.partnerapi;

import jp.pokepay.partnerapi.request.ListTransfers;
import jp.pokepay.partnerapi.request.Request;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class ListTransfersTest {
    @Test
    void test0() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers();
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test1() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .transferTypes(new String[]{"exchange","topup"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test2() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .transactionTypes(new String[]{"exchange","topup","payment"})
                .transferTypes(new String[]{"payment","exchange","transfer"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test3() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .setModified(false)
                .transactionTypes(new String[]{"payment","transfer","topup","exchange"})
                .transferTypes(new String[]{});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test4() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .privateMoneyId("330f5903-3d76-483d-9b66-7e6cbfac9759")
                .setModified(true)
                .transactionTypes(new String[]{"exchange"})
                .transferTypes(new String[]{});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test5() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .transactionId("c7c407f6-7e6c-47bd-a6d0-7b5ab611eab9")
                .privateMoneyId("3058b758-399e-4705-be3a-125bd40a2d0d")
                .setModified(false)
                .transactionTypes(new String[]{"exchange","payment","transfer"})
                .transferTypes(new String[]{"transfer","payment","exchange","topup"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test6() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .customerName("jUex8FZcru468uiy2IBQsKNbECUonyUv3nTPZ701h3V5Qywi2pn04JUSx27eVHz2wOx9gOffBCzdPD5lY5ruzs73QnlHzwGBVLp2Vmg3eprOU7ktZcHWsZTpEtZX9770nlSO8H2DCl6imPJg")
                .transactionId("41770b6e-4e0c-4a22-bc7b-77ba574894b2")
                .privateMoneyId("55d67d04-0be0-4258-9c93-fda07ed7566a")
                .setModified(false)
                .transactionTypes(new String[]{"exchange","transfer"})
                .transferTypes(new String[]{"exchange","topup"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test7() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .customerId("cff19c70-0198-4251-932f-c9f65a0ef74c")
                .customerName("ebh65Hdtxmvs4SwxRthVVayjO1th3s3e6fayZ2E32vm3RM")
                .transactionId("cad3400e-c6f6-461b-b607-ea16445cf5d7")
                .privateMoneyId("8e7dc674-61f4-4c75-8e99-ee913e789131")
                .setModified(true)
                .transactionTypes(new String[]{"transfer","exchange"})
                .transferTypes(new String[]{"exchange","payment","transfer","topup"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test8() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .shopName("04IfskzbRh2KXDkJqy1UyPaGHVkyMSdmemZcovbEUc9TiM3DTSa7pJlo8JS6mIVfCl8O6XTpGUPEJOaNnRanlNyuKHWuXq7zEzVgAAIhzrVmMQ7zQf4j1Xlnx61iQEXBdwXQXBx9CjvSgZke3VuPIIBeUSxLQqoj9SXP9EgDJcoagTJNb42JvVKNsj3zA7Dw0uibv6O0nFaLFwVLIZnC6rDyYuuG1XnlSIVaC")
                .customerId("58dac9aa-f4d4-40c3-af97-98c22746e391")
                .customerName("zc3PolsdbrxUTbpTkQr9CA458OFUiC0xNjD1g6ausYOsWjmgSVes0LvRpIOKLgAa2m76DTKceEBbKe1QbzWrTYvHigdBYvKVDdotVdsHD1HarFGRZ0Q28LywVGUz2sIRxtNbAYMzHePlwRHJLPebYCA3qabphyjXP3")
                .transactionId("e69edca0-be14-422e-b875-b413a294b6e8")
                .privateMoneyId("200583e8-7279-48b9-b547-b7d2248394f3")
                .setModified(true)
                .transactionTypes(new String[]{"transfer","exchange","payment","topup"})
                .transferTypes(new String[]{"topup","transfer"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test9() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .shopId("74358a2e-8191-4b35-ae83-7b8bbd6f7f8d")
                .shopName("PQzPRirLmp7HiQajpl09d6QIiaL5c40GPi4ivBi3eJhDgAiQ5RhXwEfmyakwCi2K41MKrJ8u3JtJHw13BJLqURa9CDG8z1r52Nx")
                .customerId("6615d1ed-1f15-4d9c-9d5b-c912e992329d")
                .customerName("vSo3IMgKOG9RqgqLtsxscDVj4qDxwlIsjYdDsgNzWfMVYN8tFORiCKaN1GSBkTmsnETZgON7wI25XD4LDGgtc1eHQx1a38fcy9G2ru7CIugZBUKc64A8KJDFHDE0sPhVLSmxr0FU3D")
                .transactionId("12d7d9ee-1a57-47b6-8b5b-1d92fc26510e")
                .privateMoneyId("76831699-0bf1-4ff3-989f-769188681d44")
                .setModified(true)
                .transactionTypes(new String[]{"topup","transfer","exchange","payment"})
                .transferTypes(new String[]{"topup","exchange"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test10() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .perPage(782)
                .shopId("98d66989-325c-44f6-bdf3-a2e79f21b63f")
                .shopName("1mQveiZolVhKjCQVZwzstz19XaUt7HUg2vBtQ3icUlEOMImvGy37aG3VpRlqKVb")
                .customerId("1cb88acc-3f88-458b-bdbd-1bd6603e2987")
                .customerName("J59qzi8HFxZtC5ypm8TU2Y6m10oazOnSDRVBADkHpYoJtK8deELoxPb8vCqW8ZrqfNGAkbzmAIScfq8JbwsUjFhr3NwoEyag2SfuJiolnAr0O5BazmKqHUlvI3TLRDU2wR06BrqE4xR4GA8B6QEvmEtQTqfIDfhF08aWAgYKgMRg4eijui0x4AzukqXii06wz")
                .transactionId("79d68215-feba-43a2-8f85-882ab4b0669c")
                .privateMoneyId("67020db9-26ce-47e4-8ca7-696e8c0142e1")
                .setModified(true)
                .transactionTypes(new String[]{"topup","payment","transfer"})
                .transferTypes(new String[]{"topup","payment","transfer"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test11() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .page(6073)
                .perPage(5583)
                .shopId("036969ee-6ade-41ff-998d-ad2c7e663b0f")
                .shopName("ZXWwwPUfmYGEVrOM4dkj0diMGxwkB")
                .customerId("726760cd-1c46-4bc2-bd4e-1b117e6180cb")
                .customerName("hTrrGkGVnz7dW1L5JRcqWGZoB7J2SLBuVTFPFKYeglUQAESlFenRvUgW2C0Pk55puUaBmR66mDvQf3SzEAz6sFhOXUyleHUBygYLLJFfbbjnOxn1Ii4QyBabDj1sJ7k6dP6L13ja9VovumOj")
                .transactionId("b01bcb4d-a00c-4b09-a63a-3867c4c57002")
                .privateMoneyId("b7f78ec6-f1e6-4119-b30d-ca915ee0bbb8")
                .setModified(false)
                .transactionTypes(new String[]{"exchange","payment","topup","transfer"})
                .transferTypes(new String[]{"topup","transfer","exchange"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test12() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .to("2019-05-24T19:37:29.000000+09:00")
                .page(2064)
                .perPage(1520)
                .shopId("0554db01-4019-4174-b41b-8dac7bc5a848")
                .shopName("9G2QRAYPymeRfFOHsPVjb9UCbPcYx5YX")
                .customerId("dfb4fe02-c469-4dd9-8fd7-4db0b7ba5b06")
                .customerName("oa5SUOR88F7Ubd6EIlmfbIWBjq1h3aM3MFSn6Z9Xp0dYAIwKPnm62HiK775FUjJKUwWsCFULHC5xu9xwKzEEFrv0p5VC2XFSxIKMXYPxeKc6v3uyZaCEMZ2Ju8UbXHSU9E0Qlg3gebvAwj")
                .transactionId("0aa9c87c-7afa-4891-8738-7e553becd959")
                .privateMoneyId("1f685e87-0e1d-425e-8361-c0ac3b32c0db")
                .setModified(true)
                .transactionTypes(new String[]{"topup","exchange","payment"})
                .transferTypes(new String[]{"transfer","exchange","topup","payment"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test13() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .from("2024-09-22T13:04:32.000000+09:00")
                .to("2021-04-29T09:23:08.000000+09:00")
                .page(3002)
                .perPage(6960)
                .shopId("1fa4ebae-f121-4e81-8706-d0d0c3a061bc")
                .shopName("QkXqYPn4dGIxCAVXu8wPFdMI0g8RX9GwTm1EaeDH0runisLVA8D7RtvLwRN8QmXijHIyMGxrgTxrmP2c2b7AqdqrRaU4tsNqOUthYSxSa5qYfKcdpEzIZoGgQ8JT7nM2XSRS8qzeJVaYua2WPHw1UTjf1quigD2l2JnK33Y2PKkmhgdj1RbwEdGAkTKdkwDZEgx5wET5OvQdZofRUOUAciXVcpzKCMcrOD6Emk2w")
                .customerId("4adb676b-57af-47f0-b269-ac1035d6eb22")
                .customerName("zqZDQWG9JIPYO9QhKjYAAaWngq9PQfQxKRvEszf3mWAEHwNafuFelOU7xCAyi0eUz4xXH5OLhVoB1lIuiOfxpiSD0")
                .transactionId("5bac03ac-1e0a-4bbb-9f75-21fcdf268c7b")
                .privateMoneyId("0e4bdfe1-c282-44ec-a455-f11348c72bfb")
                .setModified(true)
                .transactionTypes(new String[]{"payment","exchange","topup","transfer"})
                .transferTypes(new String[]{"topup","payment"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
}
