// DO NOT EDIT: File is generated by code generator.
package jp.pokepay.partnerapi;

import jp.pokepay.partnerapi.request.ListTransfers;
import jp.pokepay.partnerapi.request.Request;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class ListTransfersTest {
    @Test
    void test0() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers();
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test1() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .transferTypes(new String[]{"exchange","transfer"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test2() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .transactionTypes(new String[]{"topup","payment","exchange"})
                .transferTypes(new String[]{"topup","transfer","payment"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test3() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .setModified(false)
                .transactionTypes(new String[]{"exchange","topup"})
                .transferTypes(new String[]{"topup","exchange","payment","transfer"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test4() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .privateMoneyId("6cacdf25-71f9-4154-ac18-801a122fe8b1")
                .setModified(false)
                .transactionTypes(new String[]{})
                .transferTypes(new String[]{"topup","transfer","payment","exchange"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test5() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .transactionId("049e3023-99bc-4af4-a5d0-1bc94f30b15e")
                .privateMoneyId("d8f781a7-c274-4fd8-b492-ab9e152ad448")
                .setModified(true)
                .transactionTypes(new String[]{})
                .transferTypes(new String[]{"exchange","payment","transfer"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test6() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .customerName("Gs8QGdnso6ThYjN4K3L0Ixs3hvK3RDsuG52ejVD9DNkY7PruV4kXdSWQlCzoJPNnsomnUdZVrN0NRZtSm9nTY8xlQzx1kyeGwifJHONVGrtySiRA3kyMH2zEgyocZNwlPkZWn1iXUC9CP0KAQ5va1qDQRr0DFSxUL3OCkDNwiDr4CfFvcHUBFzULA1NLsefo6CPtH9h6J4Q8bPvX2qvbvC4uyItYS91o6AdQ")
                .transactionId("68048340-3400-42ab-9878-7decb3300d30")
                .privateMoneyId("bbdc2b79-ea6a-46c9-a1b8-d4e4d7da0c9d")
                .setModified(true)
                .transactionTypes(new String[]{"transfer"})
                .transferTypes(new String[]{"payment","transfer","exchange","topup"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test7() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .customerId("be845f18-8944-45d9-9470-d3cea83ee175")
                .customerName("xBLvtJ3OlM4YEebtDUcn8P33aiud3s1EdKQ3ThiwbZIQao1W7axbC0lT87qOOcBeIRBeGvhjphTzM4FU5m1AjkWrUCh6IkpQnLreRf1QXjXUnktmlKSkEAi2tZsKRfYWOLZOMFvjVOXJyf2bw5sR7VbLNeWPb")
                .transactionId("b7381ca9-a8af-4ffd-9759-53ade9e2200c")
                .privateMoneyId("d75eb80f-0423-4f20-b708-8ef45aa9c247")
                .setModified(true)
                .transactionTypes(new String[]{"transfer","topup","payment"})
                .transferTypes(new String[]{"payment","topup","exchange"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test8() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .shopName("UERvXZORf7I9UrqsPEdbcNXrE1elgZbgECrseEkQG6")
                .customerId("52b973e1-c128-47c3-ade7-3c7437805ecd")
                .customerName("82xVUDKBCzxnT6WpmJxWkLD1Y1XjqyX0NL7zqwWuKSyqw6ogxF1T6CrDXOmnNShMwTzPxu6iJeTOBkjztQbKd2BilS1qs0kSQc38IraXd1tCNi2NRfW5qOY2SpeeskGCp4m04hgno3xve8it7ZOsjrULtFNu7WQgl2K3iox4XOpLsFxfOfbgGed0V5NiZ0NusgkQ1RQ")
                .transactionId("6c043387-394c-4d63-b95d-7e80ba03d5f2")
                .privateMoneyId("bb76154a-b04e-4b51-a73f-5c0f00acc0ca")
                .setModified(false)
                .transactionTypes(new String[]{"topup","payment","exchange","transfer"})
                .transferTypes(new String[]{"payment","topup","transfer"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test9() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .shopId("4395c800-7cda-4e75-a3b8-a4194fc84463")
                .shopName("sUGN89G")
                .customerId("1b4b0bac-4e61-4f22-a095-bb6816fd85c2")
                .customerName("lcTzkjsD9tKb7bEWgfAcaCuWayAQHybv4pnxcwWjiy1pf4wbTNqQRDxXebkhVVdUbkcYJYoMAaWQuG1cVPgrmKkrUMR64NUTPZOqGNkMlCwYCOtaNpd9D4kPzun8dMk9QdxMu9mivCs8n8MNvnUGpsF9TQTVN9Z98fDJu4FyhKT9KKQMQfcm0TzF4C4oiAVad70g1VYv8aLXxlJMi4ijHDtzVwXW3aAggz0UY0qWiBQv1JZ5UXIgg")
                .transactionId("cc06f499-8729-4c12-8c30-13716a98502b")
                .privateMoneyId("49fdfa43-2d5b-4f7e-99cf-73d6dff1c052")
                .setModified(true)
                .transactionTypes(new String[]{"transfer","exchange","payment","topup"})
                .transferTypes(new String[]{});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test10() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .perPage(1990)
                .shopId("59a244a6-511d-41cf-85b0-286a0ff3aa5a")
                .shopName("fJvDV1NkuMjqfpOCSQZqs6Y6i2t3FqzsRmfMJ3jeQ4YuaOINEjNCvspvg7WUPL3DBGqa2ukan61gLHXk3vJM38LiE")
                .customerId("4f8c531b-5ed6-4fb0-91d6-7e698cf18a63")
                .customerName("jqIGFLQOtxH9UVNl1kYLv17Ws7Qvh7VjzX0C3x7LGlFvooGCPtrmXWTbKVzho01TSJ3H1fquGFL7prKv6503dSw2uF58GtJcH9EXO4O3QB29hhcF1akPFtklMsn45T0usB01AKkhwLtb6efgS5O5PNV0m3xY5UXI5zuAltkYaMuXfqikJMNMtecVp1LR5H9yADa64KvFJyIAbhE7FOp6EJulIULIyIX0QLLnLDvWyLe")
                .transactionId("6332df7f-3313-4794-bfa2-4a8fe4d90615")
                .privateMoneyId("9bc82227-9a4f-4098-acfe-04b3c30b1ea0")
                .setModified(false)
                .transactionTypes(new String[]{"transfer","payment","topup","exchange"})
                .transferTypes(new String[]{"topup","payment"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test11() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .page(9906)
                .perPage(8011)
                .shopId("98c08a29-fead-4c2e-bc6b-f42fe2489330")
                .shopName("COKcjDhcT7LG3TmsoEInS7mUlxyjaz")
                .customerId("408b2694-039c-43fe-ac59-29a9131196f7")
                .customerName("nfeNto1K5KkBI8pR0lBuElJz6LJH7AN1ONJSkwW712P7sZio0boZIM5bFT4VH2V2i83foiK3sBGJhJFC4HBQvHmcBWTjEJEDOX7AS1wk6QE4Qg1WtYwCVWPpLwUeTDrOL5VCsFMcug7QjfhT9RNEByLStIaf77CzO4FXkYIOY3d56UVSPASMZbZOXbz44r0zMQzv69c6pAwtKek2FN5LOnuTX4UB4z3hbvCvDkGb11Oy")
                .transactionId("f3bd26fa-da27-40f9-b84c-f841935283d0")
                .privateMoneyId("28a6570d-d9bc-4b74-876e-5b75e54f77ba")
                .setModified(true)
                .transactionTypes(new String[]{"transfer","exchange","payment","topup"})
                .transferTypes(new String[]{"transfer","exchange"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test12() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .to("2020-08-13T20:22:30.000000+09:00")
                .page(6257)
                .perPage(4491)
                .shopId("a3d439ff-ec6e-4cbc-a210-fc3e165af56c")
                .shopName("58oe4EUt6tZEP360eAXbVTblZDMVDhOxxCM5DymLszrx4aJa5FTl3DNB7H3UZlRhzO3brbKUVwX9dM7466cm1qp1acx5QQjZVXbgZ9QeFAqZ513P")
                .customerId("ab387c4d-bd7f-4746-bfa8-fdb4271b86c9")
                .customerName("hD9NwENVSHAGsTHmpZ2c5w3ELXNBkNudebVjTCELZL3cW")
                .transactionId("52153f82-8402-45ba-ae04-726f8f7db782")
                .privateMoneyId("8280cc51-1bdc-48a1-b7d0-8986cf02ca1d")
                .setModified(false)
                .transactionTypes(new String[]{"transfer","exchange","payment"})
                .transferTypes(new String[]{"transfer","topup"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test13() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .from("2017-01-21T04:17:33.000000+09:00")
                .to("2022-06-24T06:38:06.000000+09:00")
                .page(9946)
                .perPage(9367)
                .shopId("b1af8e68-75cb-48c9-9249-318b03e7631d")
                .shopName("MtE63yNN3hfRw4nIHUmsRE2WIeaf2PuetuE4ntHAlxhfvAydKt0Xcqud4yUzVVNjaCDJX8ebRgupADzu3HOOoxWWTsNyBAc0enreoDEP1OBT56LYYqxSpQpt0VuWH9d4XZDAU9Ru06W7qV5X8CdVbF1lXLya03kZ2N")
                .customerId("83c1032a-641e-4fad-ba42-0073ee76a144")
                .customerName("py4RCNmAT3GVUIPZqGD6h30pLjUdGEDuQNj8tuu6bROgTNoILLBpWmXAEFrzNIK2SWIsOfyoNd6Xyo2DsaFt1krHPadUWa6YcwcbyJCRvuYHISjEcA9Uh6bfSxRZIBjS8hBxgEGXnZKqBwyGZzGzhoEmBEydfrplV0ugOI6YrWKJstQ3qZhVWwNniCb6nUMwROapNxPvxOHYFgkbgCb4IAT37Mns")
                .transactionId("c5fee3e6-09d6-402b-b104-7fabfcb0afd3")
                .privateMoneyId("a5536b30-6aad-45f8-8fa8-434f0e118dac")
                .setModified(true)
                .transactionTypes(new String[]{"payment","topup"})
                .transferTypes(new String[]{"transfer"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
}
