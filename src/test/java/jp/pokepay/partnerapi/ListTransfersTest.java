// DO NOT EDIT: File is generated by code generator.
package jp.pokepay.partnerapi;

import jp.pokepay.partnerapi.request.ListTransfers;
import jp.pokepay.partnerapi.request.Request;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class ListTransfersTest {
    @Test
    void test0() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers();
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test1() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .transferTypes(new String[]{"exchange"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test2() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .transactionTypes(new String[]{})
                .transferTypes(new String[]{"transfer","topup","payment","exchange"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test3() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .setModified(false)
                .transactionTypes(new String[]{"transfer"})
                .transferTypes(new String[]{"topup","payment","exchange","transfer"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test4() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .privateMoneyId("613cc0fd-83a4-47c4-acc8-b706a88efd5c")
                .setModified(false)
                .transactionTypes(new String[]{"payment","transfer","exchange"})
                .transferTypes(new String[]{"payment","topup"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test5() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .transactionId("3b4cdbc9-6adc-49c4-ad50-a238717092c4")
                .privateMoneyId("977ebc5d-a3cc-4cd2-accf-47f746959d36")
                .setModified(true)
                .transactionTypes(new String[]{"exchange","payment","topup"})
                .transferTypes(new String[]{"payment","transfer","exchange"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test6() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .customerName("duJjhmTOaRfwEbufjDe7YEb0Y8U5pzMxbGVYaNs43")
                .transactionId("45588511-a4b1-4c83-bfa0-d33f548fc40e")
                .privateMoneyId("3b4bf0b4-7b1e-4a2e-b15a-33b596f893a6")
                .setModified(true)
                .transactionTypes(new String[]{"payment","transfer","topup"})
                .transferTypes(new String[]{"topup","payment","exchange"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test7() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .customerId("5202a2ed-cd3f-44c4-ab3e-05f9f591b5c3")
                .customerName("962XZqzuiLFdA5xX2SFeiFjtQBcnjEO6b49a9x606DnQ46Wsi5gCaqHbqdrFQ02RG0l1Lo11p7gjkt4Iyj4DZBqKjjcyNlVTpoHnZtl3ug")
                .transactionId("bc692c73-44a7-41c2-91d9-4b60fb43a399")
                .privateMoneyId("c639210d-3b29-4362-aa9f-9c45524c84af")
                .setModified(false)
                .transactionTypes(new String[]{"transfer","topup","payment"})
                .transferTypes(new String[]{"payment","transfer","exchange"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test8() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .shopName("8IF6cxL7M87USOj9vE591S4MHVrdoM7SAlceIOnu2nu2tTw7pepmtsnnGpcn4x8D0xs1qHkOJ9vYcWeWYBXMvWqhPzcAi6lqYh5xHZhkJr3gFGcrAFaGUcdMjfJgDQwUCZybwxHZtpHVw25jFMvEzJN43BvRx04bFZeQRhYpOv429WnBN")
                .customerId("9fb494e5-e56e-4003-99c9-89d470c88a42")
                .customerName("ycxF9Qz3tzYX8eWF3Sus6UFnPtmTjfkDZtPNs2yN5U0e0Hm6XMfHxe7Skd2Q5xiisb37FGUeifhgtTi5O")
                .transactionId("f560b8cf-1b5b-42b2-bbf8-e6e9d8dfb2cc")
                .privateMoneyId("1ca2c419-4725-45d3-83f7-12382045ad1f")
                .setModified(false)
                .transactionTypes(new String[]{})
                .transferTypes(new String[]{"transfer","topup","exchange"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test9() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .shopId("0d5ab674-537d-4b56-bb96-24c3be66b559")
                .shopName("OCEk1MTh2tjkyMS9EDV3BIoJAFSSD0LKC3uXtIYGQtEW15s4NZSG8jml8dhpLJv")
                .customerId("8f465678-26fa-4232-b614-0e4ec8b0e5df")
                .customerName("3Z5H2UlpCzAn8PPc65BwIp00f54F4b9cjWKsVl6NJYHfAZ6ZQZuoXhN7XIEW3J2TrDo8gNW5MkMj7YtrgnxJxH2d3em1aJQJj9L0Whi1tUoxWneBqIbkHiPBHSyTMaw8wOREYe0gmxHbIRXs0PkkMt7w3WPGaUrw7UQyhSUXZRDGdTHSYyDUTCitl0KK221Mrr")
                .transactionId("fc82f773-65c8-4b07-900b-10a6f88922f8")
                .privateMoneyId("153b73cb-4c13-43de-96cd-f9bda07bfbda")
                .setModified(false)
                .transactionTypes(new String[]{"transfer","topup","payment"})
                .transferTypes(new String[]{"topup"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test10() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .perPage(7302)
                .shopId("d808e3d0-03c0-489f-ae30-5ec2f0adcfd6")
                .shopName("9mhgnOLIFoze0MiMZ4SYXSd0U5e6PDtVmYBuWn8GCRfJkshIUa1I1xYGT4F581zAIw5D4FyVnqHfcKUdVO4ZyaAeeFtLzyCv3zPL1vw7qYAd036NF5OeUapqtsnmh3yABknhqwADYBGHdHUKj4MVFZkSKig6byBU7dTXIYEXUdf1ES0MzkLjHWdxfc1l9faX7oV5HMhbTZP56dg")
                .customerId("b07295d9-839c-413b-a41d-4931a9ad7c32")
                .customerName("cKL4r0gUAP9IgAjjbvWyo5Pxepc4ENfVXYBLS8zwopX0aq9WrIZNoLyTCDDSIjDptz1yn60Mf8xMeqFeKODaxYA9kZj5EOtJPeQckvg4a8IKL5aF8gzjswKPU7wAcESsqcvhr9DuQzuXL5DUQRRuND")
                .transactionId("35da0843-6213-4b87-aabd-7cad7e0c76c4")
                .privateMoneyId("8d62a97b-259a-4e79-a702-7d3156b4b78a")
                .setModified(true)
                .transactionTypes(new String[]{"topup","payment","transfer","exchange"})
                .transferTypes(new String[]{});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test11() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .page(7017)
                .perPage(9737)
                .shopId("efd2f3b5-b2a9-4514-a204-4811cda4af3c")
                .shopName("wNfN1bH74YlW76g2mbLIcTMANokHu5tjTEzXfYxFyx")
                .customerId("83fd8fcc-a189-46aa-b278-aff1503d6238")
                .customerName("Qdb7nlRoJgzIcfxcCZTQz7tO51RdtaG8EFpm5Jp62nJzG8aeAoROQhMLHUlt88QP5D0BhdAJG")
                .transactionId("7d9323ce-745a-4c9e-9840-683fbbd95624")
                .privateMoneyId("bdcbc6ef-605c-4266-b88b-2fd7370381b3")
                .setModified(false)
                .transactionTypes(new String[]{"transfer","payment","exchange","topup"})
                .transferTypes(new String[]{"payment","exchange","topup","transfer"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test12() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .to("2017-11-13T08:00:47.000000+09:00")
                .page(2972)
                .perPage(8199)
                .shopId("6d8960d6-ea57-441c-a02c-22b92a3f184b")
                .shopName("yjLTZEnNd9PQ8Zq2JL0KTR9JlghoDTLtSzdJeQpxHVyftX")
                .customerId("c60156e6-06ae-4727-8510-fdbba5a89b42")
                .customerName("pEVJa3jXE0gL1O3VfMEXiH9Hi1RYw7VtTqAG3tlhdTPX001PFmHEF9gKqmKrRwknxgFgf1poUwwnXylKgDvg7vWh5cfocC5CS5OTv")
                .transactionId("a1a68c1b-3965-4716-b34d-5c1311583c83")
                .privateMoneyId("6e2b2754-207d-45e0-b2d7-796a67741866")
                .setModified(true)
                .transactionTypes(new String[]{"topup","payment","exchange","transfer"})
                .transferTypes(new String[]{"transfer","exchange","topup","payment"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test13() throws ConnectionError, ProcessingError {
        Request request = new ListTransfers()
                .from("2019-03-06T10:39:58.000000+09:00")
                .to("2021-12-22T21:41:48.000000+09:00")
                .page(3483)
                .perPage(9586)
                .shopId("535da60a-4bb8-4411-b3bf-e9ee50fa692a")
                .shopName("0H22sQxFFHTkohw7ECTTkjp0xhm9hqPBLPH77yTIPG9giFTubunECZ1OB5Nn3wVdXfr4DmWdO8TaUa2l89F03b9US1KuAjJVTo61rHm11vrMuDp3qapiuSiq4w7bgOV1yTuEijlvQtQ6dnEC3ALBpFjp")
                .customerId("e50c1797-b9ac-4062-ba11-5cb1ea0fffbc")
                .customerName("gxU63tKyt9yVCRmhK25pPqeA0Czl7rH816ror63TiLivZFf15wBIqengy89VUdlg50DmRgXyP0AwEhqlZzQP7u9eIhvRWxoXQX5HXlEVP4TTGHriiw4RO23ihVk46Fd6cBtyrpApFvFP7nledVEG8UcMQjp03tJM5wt9zh97rFycoRk9PV5PKIhyzrg8xuXb7P8JFHou3CmrSUCcp7TmJBcOdPYlf6Wuc")
                .transactionId("589556d6-61fd-4ad2-b08e-76115d3299f3")
                .privateMoneyId("f879f062-eafc-43e7-bf98-c9e8486c95dc")
                .setModified(true)
                .transactionTypes(new String[]{"topup","exchange"})
                .transferTypes(new String[]{"transfer","payment","topup","exchange"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
}
