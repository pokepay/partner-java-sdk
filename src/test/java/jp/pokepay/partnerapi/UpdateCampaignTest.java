// DO NOT EDIT: File is generated by code generator.
package jp.pokepay.partnerapi;

import jp.pokepay.partnerapi.request.UpdateCampaign;
import jp.pokepay.partnerapi.request.Request;
import com.google.gson.JsonObject;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class UpdateCampaignTest {
    @Test
    void test0() throws ConnectionError, ProcessingError {
        Request request = new UpdateCampaign(
            "b1dc9469-075b-4d47-aab1-8b97ded3fe86"
        );
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test1() throws ConnectionError, ProcessingError {
        Request request = new UpdateCampaign(
            "b1dc9469-075b-4d47-aab1-8b97ded3fe86"
        )
                .budgetCapsAmount(1846048109);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test2() throws ConnectionError, ProcessingError {
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new UpdateCampaign(
            "b1dc9469-075b-4d47-aab1-8b97ded3fe86"
        )
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(1161308371);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test3() throws ConnectionError, ProcessingError {
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new UpdateCampaign(
            "b1dc9469-075b-4d47-aab1-8b97ded3fe86"
        )
                .maxTotalPointAmount(5715)
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(1062068093);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test4() throws ConnectionError, ProcessingError {
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new UpdateCampaign(
            "b1dc9469-075b-4d47-aab1-8b97ded3fe86"
        )
                .maxPointAmount(6330)
                .maxTotalPointAmount(8831)
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(769812961);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test5() throws ConnectionError, ProcessingError {
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new UpdateCampaign(
            "b1dc9469-075b-4d47-aab1-8b97ded3fe86"
        )
                .existInEachProductGroups(true)
                .maxPointAmount(1270)
                .maxTotalPointAmount(124)
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(173694542);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test6() throws ConnectionError, ProcessingError {
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new UpdateCampaign(
            "b1dc9469-075b-4d47-aab1-8b97ded3fe86"
        )
                .minimumNumberForCombinationPurchase(2135)
                .existInEachProductGroups(true)
                .maxPointAmount(1276)
                .maxTotalPointAmount(9060)
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(1165020838);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test7() throws ConnectionError, ProcessingError {
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new UpdateCampaign(
            "b1dc9469-075b-4d47-aab1-8b97ded3fe86"
        )
                .minimumNumberOfAmount(3475)
                .minimumNumberForCombinationPurchase(5299)
                .existInEachProductGroups(false)
                .maxPointAmount(6011)
                .maxTotalPointAmount(5516)
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(1777436902);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test8() throws ConnectionError, ProcessingError {
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new UpdateCampaign(
            "b1dc9469-075b-4d47-aab1-8b97ded3fe86"
        )
                .minimumNumberOfProducts(2258)
                .minimumNumberOfAmount(9990)
                .minimumNumberForCombinationPurchase(4946)
                .existInEachProductGroups(true)
                .maxPointAmount(3456)
                .maxTotalPointAmount(7634)
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(1301092573);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test9() throws ConnectionError, ProcessingError {
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new UpdateCampaign(
            "b1dc9469-075b-4d47-aab1-8b97ded3fe86"
        )
                .applicableShopIds(new String[]{"4bbd3162-b4bb-4f35-b1a5-46ba6148651b","cda6d07a-1155-4544-aa81-b166dcba48f9","ae7c1721-ee2a-4ec7-8270-e69fcc091380","1c897513-09ce-47a6-9e6b-68493eed742b","ac9ee7e9-c302-4e55-845b-fc98e531b5ae","1e361976-63f3-4583-baab-1764889ba0a5","b57c3e30-6037-4bbd-8c69-5b82ea40fb33","8e158dc7-99f9-4fbc-99ad-1a86bddc371e"})
                .minimumNumberOfProducts(9363)
                .minimumNumberOfAmount(1299)
                .minimumNumberForCombinationPurchase(4422)
                .existInEachProductGroups(true)
                .maxPointAmount(2933)
                .maxTotalPointAmount(6728)
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(233495880);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test10() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new UpdateCampaign(
            "b1dc9469-075b-4d47-aab1-8b97ded3fe86"
        )
                .applicableTimeRanges(new Object[]{items,items2})
                .applicableShopIds(new String[]{"1ed1f2c7-d3a2-4058-af35-53e03c81bd2e","f3b70088-e1ba-4a0f-9550-f6843e6f4da2"})
                .minimumNumberOfProducts(1838)
                .minimumNumberOfAmount(5548)
                .minimumNumberForCombinationPurchase(160)
                .existInEachProductGroups(true)
                .maxPointAmount(7207)
                .maxTotalPointAmount(2538)
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(39477703);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test11() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("from", "12:00");
        items7.addProperty("to", "23:59");
        JsonObject items8 = new JsonObject();
        items8.addProperty("from", "12:00");
        items8.addProperty("to", "23:59");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new UpdateCampaign(
            "b1dc9469-075b-4d47-aab1-8b97ded3fe86"
        )
                .applicableDaysOfWeek(new Integer[]{2,6,3,3,2,5})
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5,items6,items7,items8})
                .applicableShopIds(new String[]{"4632bf59-dcb5-4049-b69d-11762472c923","11cf33fe-56bb-4759-a17c-e44a9d4338aa","5f77f094-7128-4e7f-bc71-8d454c8014e3","0cafe261-eeee-4a73-9373-1fd0940982b2"})
                .minimumNumberOfProducts(2184)
                .minimumNumberOfAmount(9496)
                .minimumNumberForCombinationPurchase(5902)
                .existInEachProductGroups(true)
                .maxPointAmount(8382)
                .maxTotalPointAmount(230)
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(144380158);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test12() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("product_code", "4912345678904");
        items.addProperty("classification_code", "c123");
        JsonObject items2 = new JsonObject();
        items2.addProperty("product_code", "4912345678904");
        items2.addProperty("classification_code", "c123");
        JsonObject items3 = new JsonObject();
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("classification_code", "c123");
        JsonObject items4 = new JsonObject();
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("classification_code", "c123");
        JsonObject items5 = new JsonObject();
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("classification_code", "c123");
        JsonObject items6 = new JsonObject();
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("classification_code", "c123");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("classification_code", "c123");
        JsonObject items11 = new JsonObject();
        items11.addProperty("from", "12:00");
        items11.addProperty("to", "23:59");
        JsonObject items12 = new JsonObject();
        items12.addProperty("from", "12:00");
        items12.addProperty("to", "23:59");
        JsonObject items13 = new JsonObject();
        items13.addProperty("from", "12:00");
        items13.addProperty("to", "23:59");
        JsonObject items14 = new JsonObject();
        items14.addProperty("from", "12:00");
        items14.addProperty("to", "23:59");
        JsonObject items15 = new JsonObject();
        items15.addProperty("from", "12:00");
        items15.addProperty("to", "23:59");
        JsonObject items16 = new JsonObject();
        items16.addProperty("from", "12:00");
        items16.addProperty("to", "23:59");
        JsonObject items17 = new JsonObject();
        items17.addProperty("from", "12:00");
        items17.addProperty("to", "23:59");
        JsonObject items18 = new JsonObject();
        items18.addProperty("from", "12:00");
        items18.addProperty("to", "23:59");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new UpdateCampaign(
            "b1dc9469-075b-4d47-aab1-8b97ded3fe86"
        )
                .blacklistedProductRules(new Object[]{items,items2,items3,items4,items5,items6,items7,items8,items9,items10})
                .applicableDaysOfWeek(new Integer[]{3,3,5,0,1,3,2})
                .applicableTimeRanges(new Object[]{items11,items12,items13,items14,items15,items16,items17,items18})
                .applicableShopIds(new String[]{"2845dee1-e5ae-4111-ae0f-01514eafcce2","aaea48d6-893a-4494-91cd-07398f70a35a","2b95aab6-6c86-4dd2-87b0-49ebf6138ebc","0cd7e98f-d043-4418-9873-3f1470955c26","cbebc1d0-9be4-4922-baf7-0c90e3471f45","912395f2-bc1d-4e7d-acb5-da116b009b6d","29590a58-3988-4708-abbe-68296e105dc7","3333f13f-cbfa-46f5-8c02-e58553d9c527","4530dad7-5833-4546-abd7-807f3added3e","83e6959a-1469-448d-b9da-4468386e4949"})
                .minimumNumberOfProducts(6652)
                .minimumNumberOfAmount(3899)
                .minimumNumberForCombinationPurchase(9776)
                .existInEachProductGroups(false)
                .maxPointAmount(4496)
                .maxTotalPointAmount(7383)
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(1025667088);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test13() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("product_code", "4912345678904");
        items.addProperty("is_multiply_by_count", true);
        items.addProperty("required_count", 2);
        JsonObject items2 = new JsonObject();
        items2.addProperty("point_amount", 5);
        items2.addProperty("point_amount_unit", "percent");
        items2.addProperty("product_code", "4912345678904");
        items2.addProperty("is_multiply_by_count", true);
        items2.addProperty("required_count", 2);
        JsonObject items3 = new JsonObject();
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("classification_code", "c123");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("from", "12:00");
        items7.addProperty("to", "23:59");
        JsonObject items8 = new JsonObject();
        items8.addProperty("from", "12:00");
        items8.addProperty("to", "23:59");
        JsonObject items9 = new JsonObject();
        items9.addProperty("from", "12:00");
        items9.addProperty("to", "23:59");
        JsonObject items10 = new JsonObject();
        items10.addProperty("from", "12:00");
        items10.addProperty("to", "23:59");
        JsonObject items11 = new JsonObject();
        items11.addProperty("from", "12:00");
        items11.addProperty("to", "23:59");
        JsonObject items12 = new JsonObject();
        items12.addProperty("from", "12:00");
        items12.addProperty("to", "23:59");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new UpdateCampaign(
            "b1dc9469-075b-4d47-aab1-8b97ded3fe86"
        )
                .productBasedPointRules(new Object[]{items,items2})
                .blacklistedProductRules(new Object[]{items3})
                .applicableDaysOfWeek(new Integer[]{0,6,3,6,6,1})
                .applicableTimeRanges(new Object[]{items4,items5,items6,items7,items8,items9,items10,items11,items12})
                .applicableShopIds(new String[]{"0e2aad56-794a-4929-8ea7-13fd509cda05","6aae338a-e89b-4004-9c95-f4936f465001","92c529ce-c410-4920-b827-fcb108e1c009"})
                .minimumNumberOfProducts(7373)
                .minimumNumberOfAmount(1994)
                .minimumNumberForCombinationPurchase(3980)
                .existInEachProductGroups(true)
                .maxPointAmount(4784)
                .maxTotalPointAmount(889)
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(148336805);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test14() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("subject_more_than_or_equal", 1000);
        items.addProperty("subject_less_than", 5000);
        JsonObject items2 = new JsonObject();
        items2.addProperty("point_amount", 5);
        items2.addProperty("point_amount_unit", "percent");
        items2.addProperty("subject_more_than_or_equal", 1000);
        items2.addProperty("subject_less_than", 5000);
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("subject_more_than_or_equal", 1000);
        items3.addProperty("subject_less_than", 5000);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("subject_more_than_or_equal", 1000);
        items4.addProperty("subject_less_than", 5000);
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("subject_more_than_or_equal", 1000);
        items5.addProperty("subject_less_than", 5000);
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("subject_more_than_or_equal", 1000);
        items6.addProperty("subject_less_than", 5000);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("subject_more_than_or_equal", 1000);
        items7.addProperty("subject_less_than", 5000);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("subject_more_than_or_equal", 1000);
        items8.addProperty("subject_less_than", 5000);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("is_multiply_by_count", true);
        items9.addProperty("required_count", 2);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("classification_code", "c123");
        JsonObject items14 = new JsonObject();
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("classification_code", "c123");
        JsonObject items15 = new JsonObject();
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("classification_code", "c123");
        JsonObject items16 = new JsonObject();
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("classification_code", "c123");
        JsonObject items17 = new JsonObject();
        items17.addProperty("from", "12:00");
        items17.addProperty("to", "23:59");
        JsonObject items18 = new JsonObject();
        items18.addProperty("from", "12:00");
        items18.addProperty("to", "23:59");
        JsonObject items19 = new JsonObject();
        items19.addProperty("from", "12:00");
        items19.addProperty("to", "23:59");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new UpdateCampaign(
            "b1dc9469-075b-4d47-aab1-8b97ded3fe86"
        )
                .amountBasedPointRules(new Object[]{items,items2,items3,items4,items5,items6,items7,items8})
                .productBasedPointRules(new Object[]{items9,items10,items11,items12})
                .blacklistedProductRules(new Object[]{items13,items14,items15,items16})
                .applicableDaysOfWeek(new Integer[]{6,0})
                .applicableTimeRanges(new Object[]{items17,items18,items19})
                .applicableShopIds(new String[]{"f0621bc6-dc0a-46d0-9c10-7175df743982"})
                .minimumNumberOfProducts(8390)
                .minimumNumberOfAmount(5437)
                .minimumNumberForCombinationPurchase(7632)
                .existInEachProductGroups(true)
                .maxPointAmount(1278)
                .maxTotalPointAmount(3071)
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(1972410865);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test15() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("subject_more_than_or_equal", 1000);
        items.addProperty("subject_less_than", 5000);
        JsonObject items2 = new JsonObject();
        items2.addProperty("point_amount", 5);
        items2.addProperty("point_amount_unit", "percent");
        items2.addProperty("subject_more_than_or_equal", 1000);
        items2.addProperty("subject_less_than", 5000);
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("is_multiply_by_count", true);
        items3.addProperty("required_count", 2);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("is_multiply_by_count", true);
        items4.addProperty("required_count", 2);
        JsonObject items5 = new JsonObject();
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("classification_code", "c123");
        JsonObject items6 = new JsonObject();
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("classification_code", "c123");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("from", "12:00");
        items10.addProperty("to", "23:59");
        JsonObject items11 = new JsonObject();
        items11.addProperty("from", "12:00");
        items11.addProperty("to", "23:59");
        JsonObject items12 = new JsonObject();
        items12.addProperty("from", "12:00");
        items12.addProperty("to", "23:59");
        JsonObject items13 = new JsonObject();
        items13.addProperty("from", "12:00");
        items13.addProperty("to", "23:59");
        JsonObject items14 = new JsonObject();
        items14.addProperty("from", "12:00");
        items14.addProperty("to", "23:59");
        JsonObject items15 = new JsonObject();
        items15.addProperty("from", "12:00");
        items15.addProperty("to", "23:59");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new UpdateCampaign(
            "b1dc9469-075b-4d47-aab1-8b97ded3fe86"
        )
                .subject("money")
                .amountBasedPointRules(new Object[]{items,items2})
                .productBasedPointRules(new Object[]{items3,items4})
                .blacklistedProductRules(new Object[]{items5,items6,items7,items8,items9})
                .applicableDaysOfWeek(new Integer[]{6,1,1,3})
                .applicableTimeRanges(new Object[]{items10,items11,items12,items13,items14,items15})
                .applicableShopIds(new String[]{"60548624-851e-43e7-b391-1a02842e45d6","4b08f189-379a-49e1-a356-4a858f1f9d67","776b0929-65b5-45ec-9180-ac134a935051"})
                .minimumNumberOfProducts(3660)
                .minimumNumberOfAmount(6030)
                .minimumNumberForCombinationPurchase(7956)
                .existInEachProductGroups(false)
                .maxPointAmount(3775)
                .maxTotalPointAmount(1907)
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(1799661733);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test16() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("subject_more_than_or_equal", 1000);
        items.addProperty("subject_less_than", 5000);
        JsonObject items2 = new JsonObject();
        items2.addProperty("point_amount", 5);
        items2.addProperty("point_amount_unit", "percent");
        items2.addProperty("subject_more_than_or_equal", 1000);
        items2.addProperty("subject_less_than", 5000);
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("subject_more_than_or_equal", 1000);
        items3.addProperty("subject_less_than", 5000);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("is_multiply_by_count", true);
        items4.addProperty("required_count", 2);
        JsonObject items5 = new JsonObject();
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("classification_code", "c123");
        JsonObject items6 = new JsonObject();
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("classification_code", "c123");
        JsonObject items7 = new JsonObject();
        items7.addProperty("from", "12:00");
        items7.addProperty("to", "23:59");
        JsonObject items8 = new JsonObject();
        items8.addProperty("from", "12:00");
        items8.addProperty("to", "23:59");
        JsonObject items9 = new JsonObject();
        items9.addProperty("from", "12:00");
        items9.addProperty("to", "23:59");
        JsonObject items10 = new JsonObject();
        items10.addProperty("from", "12:00");
        items10.addProperty("to", "23:59");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new UpdateCampaign(
            "b1dc9469-075b-4d47-aab1-8b97ded3fe86"
        )
                .setExclusive(true)
                .subject("money")
                .amountBasedPointRules(new Object[]{items,items2,items3})
                .productBasedPointRules(new Object[]{items4})
                .blacklistedProductRules(new Object[]{items5,items6})
                .applicableDaysOfWeek(new Integer[]{5,2,2,1,6,5,1,6,6,4})
                .applicableTimeRanges(new Object[]{items7,items8,items9,items10})
                .applicableShopIds(new String[]{"cf34b680-c8a3-4b72-9b32-14b45c721506","aefa6b11-0f76-40a8-ac52-c35b24629dee","d6b7305e-c230-4d21-962f-dffbde8af631","438843cb-0ded-453f-8b16-edbcf104e971","7292d4dd-0989-43bb-8ee8-17f0d817fba0","e6b55b0b-2df5-4e44-86b1-d741c0791253","3fcab134-3e90-46c9-8218-4e789c6709f6","44b73670-805b-4822-8601-f39ba5f626d0"})
                .minimumNumberOfProducts(9641)
                .minimumNumberOfAmount(6216)
                .minimumNumberForCombinationPurchase(9135)
                .existInEachProductGroups(true)
                .maxPointAmount(2658)
                .maxTotalPointAmount(4133)
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(1540138721);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test17() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("subject_more_than_or_equal", 1000);
        items.addProperty("subject_less_than", 5000);
        JsonObject items2 = new JsonObject();
        items2.addProperty("point_amount", 5);
        items2.addProperty("point_amount_unit", "percent");
        items2.addProperty("subject_more_than_or_equal", 1000);
        items2.addProperty("subject_less_than", 5000);
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("subject_more_than_or_equal", 1000);
        items3.addProperty("subject_less_than", 5000);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("subject_more_than_or_equal", 1000);
        items4.addProperty("subject_less_than", 5000);
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("subject_more_than_or_equal", 1000);
        items5.addProperty("subject_less_than", 5000);
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("subject_more_than_or_equal", 1000);
        items6.addProperty("subject_less_than", 5000);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("subject_more_than_or_equal", 1000);
        items7.addProperty("subject_less_than", 5000);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("is_multiply_by_count", true);
        items8.addProperty("required_count", 2);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("is_multiply_by_count", true);
        items9.addProperty("required_count", 2);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("is_multiply_by_count", true);
        items16.addProperty("required_count", 2);
        JsonObject items17 = new JsonObject();
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("classification_code", "c123");
        JsonObject items18 = new JsonObject();
        items18.addProperty("product_code", "4912345678904");
        items18.addProperty("classification_code", "c123");
        JsonObject items19 = new JsonObject();
        items19.addProperty("product_code", "4912345678904");
        items19.addProperty("classification_code", "c123");
        JsonObject items20 = new JsonObject();
        items20.addProperty("product_code", "4912345678904");
        items20.addProperty("classification_code", "c123");
        JsonObject items21 = new JsonObject();
        items21.addProperty("product_code", "4912345678904");
        items21.addProperty("classification_code", "c123");
        JsonObject items22 = new JsonObject();
        items22.addProperty("product_code", "4912345678904");
        items22.addProperty("classification_code", "c123");
        JsonObject items23 = new JsonObject();
        items23.addProperty("product_code", "4912345678904");
        items23.addProperty("classification_code", "c123");
        JsonObject items24 = new JsonObject();
        items24.addProperty("from", "12:00");
        items24.addProperty("to", "23:59");
        JsonObject items25 = new JsonObject();
        items25.addProperty("from", "12:00");
        items25.addProperty("to", "23:59");
        JsonObject items26 = new JsonObject();
        items26.addProperty("from", "12:00");
        items26.addProperty("to", "23:59");
        JsonObject items27 = new JsonObject();
        items27.addProperty("from", "12:00");
        items27.addProperty("to", "23:59");
        JsonObject items28 = new JsonObject();
        items28.addProperty("from", "12:00");
        items28.addProperty("to", "23:59");
        JsonObject items29 = new JsonObject();
        items29.addProperty("from", "12:00");
        items29.addProperty("to", "23:59");
        JsonObject items30 = new JsonObject();
        items30.addProperty("from", "12:00");
        items30.addProperty("to", "23:59");
        JsonObject items31 = new JsonObject();
        items31.addProperty("from", "12:00");
        items31.addProperty("to", "23:59");
        JsonObject items32 = new JsonObject();
        items32.addProperty("from", "12:00");
        items32.addProperty("to", "23:59");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new UpdateCampaign(
            "b1dc9469-075b-4d47-aab1-8b97ded3fe86"
        )
                .pointExpiresInDays(4488)
                .setExclusive(true)
                .subject("money")
                .amountBasedPointRules(new Object[]{items,items2,items3,items4,items5,items6,items7})
                .productBasedPointRules(new Object[]{items8,items9,items10,items11,items12,items13,items14,items15,items16})
                .blacklistedProductRules(new Object[]{items17,items18,items19,items20,items21,items22,items23})
                .applicableDaysOfWeek(new Integer[]{1,5,0,0,4,3,4,3})
                .applicableTimeRanges(new Object[]{items24,items25,items26,items27,items28,items29,items30,items31,items32})
                .applicableShopIds(new String[]{"665e330b-d2ee-4fbd-8af9-b1f972c70910","ad5607ce-f065-40b7-9fbe-17b45591cf51","ebc4bf5c-c5a7-4215-80b2-a29760739c18"})
                .minimumNumberOfProducts(1681)
                .minimumNumberOfAmount(1025)
                .minimumNumberForCombinationPurchase(4579)
                .existInEachProductGroups(true)
                .maxPointAmount(164)
                .maxTotalPointAmount(7355)
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(963819398);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test18() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("subject_more_than_or_equal", 1000);
        items.addProperty("subject_less_than", 5000);
        JsonObject items2 = new JsonObject();
        items2.addProperty("point_amount", 5);
        items2.addProperty("point_amount_unit", "percent");
        items2.addProperty("subject_more_than_or_equal", 1000);
        items2.addProperty("subject_less_than", 5000);
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("subject_more_than_or_equal", 1000);
        items3.addProperty("subject_less_than", 5000);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("subject_more_than_or_equal", 1000);
        items4.addProperty("subject_less_than", 5000);
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("subject_more_than_or_equal", 1000);
        items5.addProperty("subject_less_than", 5000);
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("subject_more_than_or_equal", 1000);
        items6.addProperty("subject_less_than", 5000);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("subject_more_than_or_equal", 1000);
        items7.addProperty("subject_less_than", 5000);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("subject_more_than_or_equal", 1000);
        items8.addProperty("subject_less_than", 5000);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("is_multiply_by_count", true);
        items9.addProperty("required_count", 2);
        JsonObject items10 = new JsonObject();
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("classification_code", "c123");
        JsonObject items11 = new JsonObject();
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("classification_code", "c123");
        JsonObject items12 = new JsonObject();
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("classification_code", "c123");
        JsonObject items13 = new JsonObject();
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("classification_code", "c123");
        JsonObject items14 = new JsonObject();
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("classification_code", "c123");
        JsonObject items15 = new JsonObject();
        items15.addProperty("from", "12:00");
        items15.addProperty("to", "23:59");
        JsonObject items16 = new JsonObject();
        items16.addProperty("from", "12:00");
        items16.addProperty("to", "23:59");
        JsonObject items17 = new JsonObject();
        items17.addProperty("from", "12:00");
        items17.addProperty("to", "23:59");
        JsonObject items18 = new JsonObject();
        items18.addProperty("from", "12:00");
        items18.addProperty("to", "23:59");
        JsonObject items19 = new JsonObject();
        items19.addProperty("from", "12:00");
        items19.addProperty("to", "23:59");
        JsonObject items20 = new JsonObject();
        items20.addProperty("from", "12:00");
        items20.addProperty("to", "23:59");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new UpdateCampaign(
            "b1dc9469-075b-4d47-aab1-8b97ded3fe86"
        )
                .pointExpiresAt("2023-08-03T16:56:06.000000Z")
                .pointExpiresInDays(991)
                .setExclusive(true)
                .subject("money")
                .amountBasedPointRules(new Object[]{items,items2,items3,items4,items5,items6,items7,items8})
                .productBasedPointRules(new Object[]{items9})
                .blacklistedProductRules(new Object[]{items10,items11,items12,items13,items14})
                .applicableDaysOfWeek(new Integer[]{3,1})
                .applicableTimeRanges(new Object[]{items15,items16,items17,items18,items19,items20})
                .applicableShopIds(new String[]{"d4babf2f-2164-4a0c-ba94-dfd0e22c3507","814cc85f-f6d3-4881-b71e-95505508260e","8d8b0a12-704a-4730-bd85-57b951e42c95","e35a3a0b-3f99-4b77-a9e8-be1278e0f1ec","9b21671b-11c6-4a36-948a-dcc31598c522","c7fa359d-2e56-4f6c-8d2b-904b7b5a3cc6"})
                .minimumNumberOfProducts(6191)
                .minimumNumberOfAmount(876)
                .minimumNumberForCombinationPurchase(853)
                .existInEachProductGroups(true)
                .maxPointAmount(4550)
                .maxTotalPointAmount(2401)
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(1380771656);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test19() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("subject_more_than_or_equal", 1000);
        items.addProperty("subject_less_than", 5000);
        JsonObject items2 = new JsonObject();
        items2.addProperty("point_amount", 5);
        items2.addProperty("point_amount_unit", "percent");
        items2.addProperty("subject_more_than_or_equal", 1000);
        items2.addProperty("subject_less_than", 5000);
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("subject_more_than_or_equal", 1000);
        items3.addProperty("subject_less_than", 5000);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("is_multiply_by_count", true);
        items4.addProperty("required_count", 2);
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("is_multiply_by_count", true);
        items5.addProperty("required_count", 2);
        JsonObject items6 = new JsonObject();
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("classification_code", "c123");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("classification_code", "c123");
        JsonObject items11 = new JsonObject();
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("classification_code", "c123");
        JsonObject items12 = new JsonObject();
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("classification_code", "c123");
        JsonObject items13 = new JsonObject();
        items13.addProperty("from", "12:00");
        items13.addProperty("to", "23:59");
        JsonObject items14 = new JsonObject();
        items14.addProperty("from", "12:00");
        items14.addProperty("to", "23:59");
        JsonObject items15 = new JsonObject();
        items15.addProperty("from", "12:00");
        items15.addProperty("to", "23:59");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new UpdateCampaign(
            "b1dc9469-075b-4d47-aab1-8b97ded3fe86"
        )
                .status("disabled")
                .pointExpiresAt("2022-11-11T20:49:22.000000Z")
                .pointExpiresInDays(2090)
                .setExclusive(false)
                .subject("all")
                .amountBasedPointRules(new Object[]{items,items2,items3})
                .productBasedPointRules(new Object[]{items4,items5})
                .blacklistedProductRules(new Object[]{items6,items7,items8,items9,items10,items11,items12})
                .applicableDaysOfWeek(new Integer[]{2,3,1,1,3,6})
                .applicableTimeRanges(new Object[]{items13,items14,items15})
                .applicableShopIds(new String[]{"1753db78-907a-461f-9f1a-014665548214","b5afe7d5-30c6-42b6-82e9-c0683867ad2c"})
                .minimumNumberOfProducts(109)
                .minimumNumberOfAmount(8590)
                .minimumNumberForCombinationPurchase(970)
                .existInEachProductGroups(false)
                .maxPointAmount(4732)
                .maxTotalPointAmount(1589)
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(1833154823);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test20() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("subject_more_than_or_equal", 1000);
        items.addProperty("subject_less_than", 5000);
        JsonObject items2 = new JsonObject();
        items2.addProperty("point_amount", 5);
        items2.addProperty("point_amount_unit", "percent");
        items2.addProperty("subject_more_than_or_equal", 1000);
        items2.addProperty("subject_less_than", 5000);
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("subject_more_than_or_equal", 1000);
        items3.addProperty("subject_less_than", 5000);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("subject_more_than_or_equal", 1000);
        items4.addProperty("subject_less_than", 5000);
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("subject_more_than_or_equal", 1000);
        items5.addProperty("subject_less_than", 5000);
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("subject_more_than_or_equal", 1000);
        items6.addProperty("subject_less_than", 5000);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("subject_more_than_or_equal", 1000);
        items7.addProperty("subject_less_than", 5000);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("subject_more_than_or_equal", 1000);
        items8.addProperty("subject_less_than", 5000);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("subject_more_than_or_equal", 1000);
        items9.addProperty("subject_less_than", 5000);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("is_multiply_by_count", true);
        items16.addProperty("required_count", 2);
        JsonObject items17 = new JsonObject();
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("classification_code", "c123");
        JsonObject items18 = new JsonObject();
        items18.addProperty("product_code", "4912345678904");
        items18.addProperty("classification_code", "c123");
        JsonObject items19 = new JsonObject();
        items19.addProperty("product_code", "4912345678904");
        items19.addProperty("classification_code", "c123");
        JsonObject items20 = new JsonObject();
        items20.addProperty("product_code", "4912345678904");
        items20.addProperty("classification_code", "c123");
        JsonObject items21 = new JsonObject();
        items21.addProperty("product_code", "4912345678904");
        items21.addProperty("classification_code", "c123");
        JsonObject items22 = new JsonObject();
        items22.addProperty("product_code", "4912345678904");
        items22.addProperty("classification_code", "c123");
        JsonObject items23 = new JsonObject();
        items23.addProperty("product_code", "4912345678904");
        items23.addProperty("classification_code", "c123");
        JsonObject items24 = new JsonObject();
        items24.addProperty("product_code", "4912345678904");
        items24.addProperty("classification_code", "c123");
        JsonObject items25 = new JsonObject();
        items25.addProperty("product_code", "4912345678904");
        items25.addProperty("classification_code", "c123");
        JsonObject items26 = new JsonObject();
        items26.addProperty("product_code", "4912345678904");
        items26.addProperty("classification_code", "c123");
        JsonObject items27 = new JsonObject();
        items27.addProperty("from", "12:00");
        items27.addProperty("to", "23:59");
        JsonObject items28 = new JsonObject();
        items28.addProperty("from", "12:00");
        items28.addProperty("to", "23:59");
        JsonObject items29 = new JsonObject();
        items29.addProperty("from", "12:00");
        items29.addProperty("to", "23:59");
        JsonObject items30 = new JsonObject();
        items30.addProperty("from", "12:00");
        items30.addProperty("to", "23:59");
        JsonObject items31 = new JsonObject();
        items31.addProperty("from", "12:00");
        items31.addProperty("to", "23:59");
        JsonObject items32 = new JsonObject();
        items32.addProperty("from", "12:00");
        items32.addProperty("to", "23:59");
        JsonObject items33 = new JsonObject();
        items33.addProperty("from", "12:00");
        items33.addProperty("to", "23:59");
        JsonObject items34 = new JsonObject();
        items34.addProperty("from", "12:00");
        items34.addProperty("to", "23:59");
        JsonObject items35 = new JsonObject();
        items35.addProperty("from", "12:00");
        items35.addProperty("to", "23:59");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new UpdateCampaign(
            "b1dc9469-075b-4d47-aab1-8b97ded3fe86"
        )
                .description("uoOEnKraNjpsN9SjDxtxrgs7e0dkiAA")
                .status("disabled")
                .pointExpiresAt("2023-04-14T04:35:38.000000Z")
                .pointExpiresInDays(5177)
                .setExclusive(true)
                .subject("all")
                .amountBasedPointRules(new Object[]{items,items2,items3,items4,items5,items6,items7,items8,items9})
                .productBasedPointRules(new Object[]{items10,items11,items12,items13,items14,items15,items16})
                .blacklistedProductRules(new Object[]{items17,items18,items19,items20,items21,items22,items23,items24,items25,items26})
                .applicableDaysOfWeek(new Integer[]{1,6,4,3,2,3,1})
                .applicableTimeRanges(new Object[]{items27,items28,items29,items30,items31,items32,items33,items34,items35})
                .applicableShopIds(new String[]{"df324786-3dde-44dd-ac76-217ac2ccd605","9d1e1b42-cd11-4461-babe-2e53af301fc3","46fbbc45-b028-423d-bbba-fb9f27fbb731","7661bbe8-a8bd-4360-850c-24479f5b5086","340bfda0-a3bc-4bb2-a7c5-7c0633462791","c59cf76b-5deb-42dd-9e0c-ebd05bd30532","5678ba0d-93ae-4f56-a508-f31dad866a49","78367916-efd0-41f9-823e-8b372ff08d7b","8edb5d48-aa3e-4e89-8557-96b7c19cdb24"})
                .minimumNumberOfProducts(7775)
                .minimumNumberOfAmount(6886)
                .minimumNumberForCombinationPurchase(4520)
                .existInEachProductGroups(true)
                .maxPointAmount(5876)
                .maxTotalPointAmount(963)
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(1405008058);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test21() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("subject_more_than_or_equal", 1000);
        items.addProperty("subject_less_than", 5000);
        JsonObject items2 = new JsonObject();
        items2.addProperty("point_amount", 5);
        items2.addProperty("point_amount_unit", "percent");
        items2.addProperty("subject_more_than_or_equal", 1000);
        items2.addProperty("subject_less_than", 5000);
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("subject_more_than_or_equal", 1000);
        items3.addProperty("subject_less_than", 5000);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("subject_more_than_or_equal", 1000);
        items4.addProperty("subject_less_than", 5000);
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("subject_more_than_or_equal", 1000);
        items5.addProperty("subject_less_than", 5000);
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("subject_more_than_or_equal", 1000);
        items6.addProperty("subject_less_than", 5000);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("is_multiply_by_count", true);
        items7.addProperty("required_count", 2);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("is_multiply_by_count", true);
        items8.addProperty("required_count", 2);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("is_multiply_by_count", true);
        items9.addProperty("required_count", 2);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("classification_code", "c123");
        JsonObject items16 = new JsonObject();
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("classification_code", "c123");
        JsonObject items17 = new JsonObject();
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("classification_code", "c123");
        JsonObject items18 = new JsonObject();
        items18.addProperty("product_code", "4912345678904");
        items18.addProperty("classification_code", "c123");
        JsonObject items19 = new JsonObject();
        items19.addProperty("product_code", "4912345678904");
        items19.addProperty("classification_code", "c123");
        JsonObject items20 = new JsonObject();
        items20.addProperty("product_code", "4912345678904");
        items20.addProperty("classification_code", "c123");
        JsonObject items21 = new JsonObject();
        items21.addProperty("product_code", "4912345678904");
        items21.addProperty("classification_code", "c123");
        JsonObject items22 = new JsonObject();
        items22.addProperty("product_code", "4912345678904");
        items22.addProperty("classification_code", "c123");
        JsonObject items23 = new JsonObject();
        items23.addProperty("product_code", "4912345678904");
        items23.addProperty("classification_code", "c123");
        JsonObject items24 = new JsonObject();
        items24.addProperty("product_code", "4912345678904");
        items24.addProperty("classification_code", "c123");
        JsonObject items25 = new JsonObject();
        items25.addProperty("from", "12:00");
        items25.addProperty("to", "23:59");
        JsonObject items26 = new JsonObject();
        items26.addProperty("from", "12:00");
        items26.addProperty("to", "23:59");
        JsonObject items27 = new JsonObject();
        items27.addProperty("from", "12:00");
        items27.addProperty("to", "23:59");
        JsonObject items28 = new JsonObject();
        items28.addProperty("from", "12:00");
        items28.addProperty("to", "23:59");
        JsonObject items29 = new JsonObject();
        items29.addProperty("from", "12:00");
        items29.addProperty("to", "23:59");
        JsonObject items30 = new JsonObject();
        items30.addProperty("from", "12:00");
        items30.addProperty("to", "23:59");
        JsonObject items31 = new JsonObject();
        items31.addProperty("from", "12:00");
        items31.addProperty("to", "23:59");
        JsonObject items32 = new JsonObject();
        items32.addProperty("from", "12:00");
        items32.addProperty("to", "23:59");
        JsonObject items33 = new JsonObject();
        items33.addProperty("from", "12:00");
        items33.addProperty("to", "23:59");
        JsonObject items34 = new JsonObject();
        items34.addProperty("from", "12:00");
        items34.addProperty("to", "23:59");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new UpdateCampaign(
            "b1dc9469-075b-4d47-aab1-8b97ded3fe86"
        )
                .event("external-transaction")
                .description("BB1YNClE0n87A30l6vspNWH9u8x4Yq2mx")
                .status("enabled")
                .pointExpiresAt("2023-05-16T03:50:44.000000Z")
                .pointExpiresInDays(74)
                .setExclusive(false)
                .subject("money")
                .amountBasedPointRules(new Object[]{items,items2,items3,items4,items5,items6})
                .productBasedPointRules(new Object[]{items7,items8,items9,items10,items11,items12,items13,items14})
                .blacklistedProductRules(new Object[]{items15,items16,items17,items18,items19,items20,items21,items22,items23,items24})
                .applicableDaysOfWeek(new Integer[]{5,4,6,1,5})
                .applicableTimeRanges(new Object[]{items25,items26,items27,items28,items29,items30,items31,items32,items33,items34})
                .applicableShopIds(new String[]{"f8574894-d553-4f6e-8f48-87d3ab29e466"})
                .minimumNumberOfProducts(5099)
                .minimumNumberOfAmount(348)
                .minimumNumberForCombinationPurchase(180)
                .existInEachProductGroups(true)
                .maxPointAmount(4204)
                .maxTotalPointAmount(8618)
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(1222220490);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test22() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("subject_more_than_or_equal", 1000);
        items.addProperty("subject_less_than", 5000);
        JsonObject items2 = new JsonObject();
        items2.addProperty("point_amount", 5);
        items2.addProperty("point_amount_unit", "percent");
        items2.addProperty("subject_more_than_or_equal", 1000);
        items2.addProperty("subject_less_than", 5000);
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("is_multiply_by_count", true);
        items3.addProperty("required_count", 2);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("is_multiply_by_count", true);
        items4.addProperty("required_count", 2);
        JsonObject items5 = new JsonObject();
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("classification_code", "c123");
        JsonObject items6 = new JsonObject();
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("classification_code", "c123");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("from", "12:00");
        items8.addProperty("to", "23:59");
        JsonObject items9 = new JsonObject();
        items9.addProperty("from", "12:00");
        items9.addProperty("to", "23:59");
        JsonObject items10 = new JsonObject();
        items10.addProperty("from", "12:00");
        items10.addProperty("to", "23:59");
        JsonObject items11 = new JsonObject();
        items11.addProperty("from", "12:00");
        items11.addProperty("to", "23:59");
        JsonObject items12 = new JsonObject();
        items12.addProperty("from", "12:00");
        items12.addProperty("to", "23:59");
        JsonObject items13 = new JsonObject();
        items13.addProperty("from", "12:00");
        items13.addProperty("to", "23:59");
        JsonObject items14 = new JsonObject();
        items14.addProperty("from", "12:00");
        items14.addProperty("to", "23:59");
        JsonObject items15 = new JsonObject();
        items15.addProperty("from", "12:00");
        items15.addProperty("to", "23:59");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new UpdateCampaign(
            "b1dc9469-075b-4d47-aab1-8b97ded3fe86"
        )
                .priority(7836)
                .event("payment")
                .description("11kPUOWIOCC9XRXSkWvgwMdC6YsQVBM615BSLRTB4phpjbt6QHeDKxXdEg3OxGlsZaVSpjoQ6ffYAe6kpXiCTiSBUIe5iqIMOcjyqBKlSFGLuqDn2oMYRFh8cqnV2spFoKb7jYgx3gTJKy6dBb3ykYYVRZ4jdyfD")
                .status("disabled")
                .pointExpiresAt("2020-04-08T14:09:01.000000Z")
                .pointExpiresInDays(5192)
                .setExclusive(false)
                .subject("all")
                .amountBasedPointRules(new Object[]{items,items2})
                .productBasedPointRules(new Object[]{items3,items4})
                .blacklistedProductRules(new Object[]{items5,items6,items7})
                .applicableDaysOfWeek(new Integer[]{1})
                .applicableTimeRanges(new Object[]{items8,items9,items10,items11,items12,items13,items14,items15})
                .applicableShopIds(new String[]{"2749e009-eadf-4e50-8343-a022772edc1c"})
                .minimumNumberOfProducts(3633)
                .minimumNumberOfAmount(933)
                .minimumNumberForCombinationPurchase(6089)
                .existInEachProductGroups(true)
                .maxPointAmount(2813)
                .maxTotalPointAmount(8116)
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(1181237434);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test23() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("subject_more_than_or_equal", 1000);
        items.addProperty("subject_less_than", 5000);
        JsonObject items2 = new JsonObject();
        items2.addProperty("point_amount", 5);
        items2.addProperty("point_amount_unit", "percent");
        items2.addProperty("subject_more_than_or_equal", 1000);
        items2.addProperty("subject_less_than", 5000);
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("is_multiply_by_count", true);
        items3.addProperty("required_count", 2);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("is_multiply_by_count", true);
        items4.addProperty("required_count", 2);
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("is_multiply_by_count", true);
        items5.addProperty("required_count", 2);
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("is_multiply_by_count", true);
        items6.addProperty("required_count", 2);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("is_multiply_by_count", true);
        items7.addProperty("required_count", 2);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("is_multiply_by_count", true);
        items8.addProperty("required_count", 2);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("is_multiply_by_count", true);
        items9.addProperty("required_count", 2);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("classification_code", "c123");
        JsonObject items14 = new JsonObject();
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("classification_code", "c123");
        JsonObject items15 = new JsonObject();
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("classification_code", "c123");
        JsonObject items16 = new JsonObject();
        items16.addProperty("from", "12:00");
        items16.addProperty("to", "23:59");
        JsonObject items17 = new JsonObject();
        items17.addProperty("from", "12:00");
        items17.addProperty("to", "23:59");
        JsonObject items18 = new JsonObject();
        items18.addProperty("from", "12:00");
        items18.addProperty("to", "23:59");
        JsonObject items19 = new JsonObject();
        items19.addProperty("from", "12:00");
        items19.addProperty("to", "23:59");
        JsonObject items20 = new JsonObject();
        items20.addProperty("from", "12:00");
        items20.addProperty("to", "23:59");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new UpdateCampaign(
            "b1dc9469-075b-4d47-aab1-8b97ded3fe86"
        )
                .endsAt("2021-09-25T13:53:31.000000Z")
                .priority(4029)
                .event("topup")
                .description("9N8hkxoSQFYDUU0HuG332kYdREQC39nZBUv4F8J7UzyDYEv7bctcmIqdmvTV8RBzp0gixsKZWoUeORL98QDv9TW3tonru5DxxR1kiR4daTST401zYU9O5bmxo5R8")
                .status("disabled")
                .pointExpiresAt("2021-12-03T15:45:24.000000Z")
                .pointExpiresInDays(7212)
                .setExclusive(true)
                .subject("all")
                .amountBasedPointRules(new Object[]{items,items2})
                .productBasedPointRules(new Object[]{items3,items4,items5,items6,items7,items8,items9,items10,items11,items12})
                .blacklistedProductRules(new Object[]{items13,items14,items15})
                .applicableDaysOfWeek(new Integer[]{3,0,0,3,4,1,5,3})
                .applicableTimeRanges(new Object[]{items16,items17,items18,items19,items20})
                .applicableShopIds(new String[]{"aad860f8-3ca1-4cde-92fb-5d82b3eac05e","757a7ed1-fd20-4a9f-9f95-1593d5af36a1","458ad14f-8819-4a60-b31f-e882be0574cf","b89422f8-f4ca-4679-8e28-a53a9bd28a69","6b74bc75-730a-4491-a106-a774b08c8733","bae993de-4f04-4ab0-af5f-338866e78052","3f1dbc06-17a8-45f3-8753-40ccce9c2a23","bf738611-db5f-4c60-a926-45a8c22edb34","10b24f0a-0e46-4816-94c1-15d756dd79de","fee124ea-6476-4b9a-a3ce-382feab35f22"})
                .minimumNumberOfProducts(7040)
                .minimumNumberOfAmount(2375)
                .minimumNumberForCombinationPurchase(9581)
                .existInEachProductGroups(true)
                .maxPointAmount(8654)
                .maxTotalPointAmount(8581)
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(1869645226);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test24() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("subject_more_than_or_equal", 1000);
        items.addProperty("subject_less_than", 5000);
        JsonObject items2 = new JsonObject();
        items2.addProperty("point_amount", 5);
        items2.addProperty("point_amount_unit", "percent");
        items2.addProperty("subject_more_than_or_equal", 1000);
        items2.addProperty("subject_less_than", 5000);
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("subject_more_than_or_equal", 1000);
        items3.addProperty("subject_less_than", 5000);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("subject_more_than_or_equal", 1000);
        items4.addProperty("subject_less_than", 5000);
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("subject_more_than_or_equal", 1000);
        items5.addProperty("subject_less_than", 5000);
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("subject_more_than_or_equal", 1000);
        items6.addProperty("subject_less_than", 5000);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("subject_more_than_or_equal", 1000);
        items7.addProperty("subject_less_than", 5000);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("subject_more_than_or_equal", 1000);
        items8.addProperty("subject_less_than", 5000);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("is_multiply_by_count", true);
        items9.addProperty("required_count", 2);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("classification_code", "c123");
        JsonObject items12 = new JsonObject();
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("classification_code", "c123");
        JsonObject items13 = new JsonObject();
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("classification_code", "c123");
        JsonObject items14 = new JsonObject();
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("classification_code", "c123");
        JsonObject items15 = new JsonObject();
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("classification_code", "c123");
        JsonObject items16 = new JsonObject();
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("classification_code", "c123");
        JsonObject items17 = new JsonObject();
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("classification_code", "c123");
        JsonObject items18 = new JsonObject();
        items18.addProperty("product_code", "4912345678904");
        items18.addProperty("classification_code", "c123");
        JsonObject items19 = new JsonObject();
        items19.addProperty("product_code", "4912345678904");
        items19.addProperty("classification_code", "c123");
        JsonObject items20 = new JsonObject();
        items20.addProperty("from", "12:00");
        items20.addProperty("to", "23:59");
        JsonObject items21 = new JsonObject();
        items21.addProperty("from", "12:00");
        items21.addProperty("to", "23:59");
        JsonObject items22 = new JsonObject();
        items22.addProperty("from", "12:00");
        items22.addProperty("to", "23:59");
        JsonObject items23 = new JsonObject();
        items23.addProperty("from", "12:00");
        items23.addProperty("to", "23:59");
        JsonObject items24 = new JsonObject();
        items24.addProperty("from", "12:00");
        items24.addProperty("to", "23:59");
        JsonObject items25 = new JsonObject();
        items25.addProperty("from", "12:00");
        items25.addProperty("to", "23:59");
        JsonObject items26 = new JsonObject();
        items26.addProperty("from", "12:00");
        items26.addProperty("to", "23:59");
        JsonObject items27 = new JsonObject();
        items27.addProperty("from", "12:00");
        items27.addProperty("to", "23:59");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new UpdateCampaign(
            "b1dc9469-075b-4d47-aab1-8b97ded3fe86"
        )
                .startsAt("2022-03-11T20:12:55.000000Z")
                .endsAt("2024-03-04T10:50:16.000000Z")
                .priority(1819)
                .event("topup")
                .description("MjoFiHLtN9Yqy7R5Sel4rqjqD6mB2gz0FIdNSbIrXOBo1I3rdkLB5vuU")
                .status("disabled")
                .pointExpiresAt("2023-04-17T05:00:28.000000Z")
                .pointExpiresInDays(6912)
                .setExclusive(true)
                .subject("money")
                .amountBasedPointRules(new Object[]{items,items2,items3,items4,items5,items6,items7,items8})
                .productBasedPointRules(new Object[]{items9,items10})
                .blacklistedProductRules(new Object[]{items11,items12,items13,items14,items15,items16,items17,items18,items19})
                .applicableDaysOfWeek(new Integer[]{4,3,3,6,6,2,4,3,2})
                .applicableTimeRanges(new Object[]{items20,items21,items22,items23,items24,items25,items26,items27})
                .applicableShopIds(new String[]{"bcea9165-c034-43ef-b341-bca1eaf31ab7","407f462f-c7c1-49f3-b4b7-7dc71bce209e","d4fac0de-4a5a-4460-8b03-cd7d9d4a64cb"})
                .minimumNumberOfProducts(391)
                .minimumNumberOfAmount(2150)
                .minimumNumberForCombinationPurchase(5757)
                .existInEachProductGroups(false)
                .maxPointAmount(2699)
                .maxTotalPointAmount(4642)
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(99696538);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test25() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("subject_more_than_or_equal", 1000);
        items.addProperty("subject_less_than", 5000);
        JsonObject items2 = new JsonObject();
        items2.addProperty("point_amount", 5);
        items2.addProperty("point_amount_unit", "percent");
        items2.addProperty("subject_more_than_or_equal", 1000);
        items2.addProperty("subject_less_than", 5000);
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("subject_more_than_or_equal", 1000);
        items3.addProperty("subject_less_than", 5000);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("subject_more_than_or_equal", 1000);
        items4.addProperty("subject_less_than", 5000);
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("is_multiply_by_count", true);
        items5.addProperty("required_count", 2);
        JsonObject items6 = new JsonObject();
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("classification_code", "c123");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("from", "12:00");
        items8.addProperty("to", "23:59");
        JsonObject items9 = new JsonObject();
        items9.addProperty("from", "12:00");
        items9.addProperty("to", "23:59");
        JsonObject items10 = new JsonObject();
        items10.addProperty("from", "12:00");
        items10.addProperty("to", "23:59");
        JsonObject items11 = new JsonObject();
        items11.addProperty("from", "12:00");
        items11.addProperty("to", "23:59");
        JsonObject items12 = new JsonObject();
        items12.addProperty("from", "12:00");
        items12.addProperty("to", "23:59");
        JsonObject items13 = new JsonObject();
        items13.addProperty("from", "12:00");
        items13.addProperty("to", "23:59");
        JsonObject items14 = new JsonObject();
        items14.addProperty("from", "12:00");
        items14.addProperty("to", "23:59");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new UpdateCampaign(
            "b1dc9469-075b-4d47-aab1-8b97ded3fe86"
        )
                .name("QbpvWdRIf0j2NcGpd9kTg7fbzWuGj28bjzoMkUfQZyG6ql9kvIc3ugQfVcwKEOAlMUYblAnOJUw5uY")
                .startsAt("2021-04-23T02:58:38.000000Z")
                .endsAt("2022-05-06T16:35:51.000000Z")
                .priority(2645)
                .event("external-transaction")
                .description("2LWIHcZ5Kh7Upt9fM2ThdFR4ZGmC3lYSdkRdIHlBo7iMGslQeLzTg9FCP6b")
                .status("disabled")
                .pointExpiresAt("2022-02-27T09:09:30.000000Z")
                .pointExpiresInDays(3006)
                .setExclusive(true)
                .subject("money")
                .amountBasedPointRules(new Object[]{items,items2,items3,items4})
                .productBasedPointRules(new Object[]{items5})
                .blacklistedProductRules(new Object[]{items6,items7})
                .applicableDaysOfWeek(new Integer[]{5,3,6,5,1})
                .applicableTimeRanges(new Object[]{items8,items9,items10,items11,items12,items13,items14})
                .applicableShopIds(new String[]{"5eed2a5a-33b0-4ff8-bc87-d7bd3bb16283","7cc65c22-1a01-4e6b-af9b-97354412ef2c","b20969ff-299f-47a4-b2a8-dbbf4edda3f4","b36db3d8-21e4-41df-a8eb-756aa2aaba43","619bcd0b-3c5a-4ab6-864b-c6de4440448f","d2a73794-8e15-4d10-9814-66ada42426eb","d47cf6e9-3e4d-46f8-b1eb-137f6d912f3d","07e56a48-f496-4f14-9456-ce3d7c629b86"})
                .minimumNumberOfProducts(9329)
                .minimumNumberOfAmount(2850)
                .minimumNumberForCombinationPurchase(531)
                .existInEachProductGroups(true)
                .maxPointAmount(3974)
                .maxTotalPointAmount(393)
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(467110137);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
}
