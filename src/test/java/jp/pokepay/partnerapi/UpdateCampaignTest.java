// DO NOT EDIT: File is generated by code generator.
package jp.pokepay.partnerapi;

import jp.pokepay.partnerapi.request.UpdateCampaign;
import jp.pokepay.partnerapi.request.Request;
import com.google.gson.JsonObject;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class UpdateCampaignTest {
    @Test
    void test0() throws ConnectionError, ProcessingError {
        Request request = new UpdateCampaign(
            "60426a39-a2a2-46ce-81b8-2ba4c472a9e8"
        );
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test1() throws ConnectionError, ProcessingError {
        Request request = new UpdateCampaign(
            "60426a39-a2a2-46ce-81b8-2ba4c472a9e8"
        )
                .budgetCapsAmount(1827247006);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test2() throws ConnectionError, ProcessingError {
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new UpdateCampaign(
            "60426a39-a2a2-46ce-81b8-2ba4c472a9e8"
        )
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(1019556332);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test3() throws ConnectionError, ProcessingError {
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new UpdateCampaign(
            "60426a39-a2a2-46ce-81b8-2ba4c472a9e8"
        )
                .maxTotalPointAmount(8352)
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(712591019);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test4() throws ConnectionError, ProcessingError {
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new UpdateCampaign(
            "60426a39-a2a2-46ce-81b8-2ba4c472a9e8"
        )
                .maxPointAmount(5025)
                .maxTotalPointAmount(3969)
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(981138288);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test5() throws ConnectionError, ProcessingError {
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new UpdateCampaign(
            "60426a39-a2a2-46ce-81b8-2ba4c472a9e8"
        )
                .existInEachProductGroups(true)
                .maxPointAmount(9684)
                .maxTotalPointAmount(9375)
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(1031147602);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test6() throws ConnectionError, ProcessingError {
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new UpdateCampaign(
            "60426a39-a2a2-46ce-81b8-2ba4c472a9e8"
        )
                .minimumNumberForCombinationPurchase(2340)
                .existInEachProductGroups(true)
                .maxPointAmount(1626)
                .maxTotalPointAmount(5953)
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(384433878);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test7() throws ConnectionError, ProcessingError {
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new UpdateCampaign(
            "60426a39-a2a2-46ce-81b8-2ba4c472a9e8"
        )
                .applicableShopIds(new String[]{"f934281f-712c-470b-8810-edf5defae4c7"})
                .minimumNumberForCombinationPurchase(1075)
                .existInEachProductGroups(false)
                .maxPointAmount(1754)
                .maxTotalPointAmount(997)
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(586908290);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test8() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new UpdateCampaign(
            "60426a39-a2a2-46ce-81b8-2ba4c472a9e8"
        )
                .applicableTimeRanges(new Object[]{items,items2,items3})
                .applicableShopIds(new String[]{"c07475ff-69d1-4d9f-a59a-b4c3fb061e0f","8287ffb3-d8dd-40b9-8160-fda2aedeae97","dfd8438c-4abb-4f6e-9a84-c942c72bd255","0a12ce76-c634-4e15-8746-702cf4e47138","8aa40edf-eede-4003-8bca-0ddd6539b922","85395937-f655-46af-97fa-ccf96ccd7806"})
                .minimumNumberForCombinationPurchase(4499)
                .existInEachProductGroups(true)
                .maxPointAmount(3600)
                .maxTotalPointAmount(7071)
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(2667324);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test9() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new UpdateCampaign(
            "60426a39-a2a2-46ce-81b8-2ba4c472a9e8"
        )
                .applicableDaysOfWeek(new Integer[]{3,1,5,6,4,1,2,3})
                .applicableTimeRanges(new Object[]{items})
                .applicableShopIds(new String[]{"dddd63af-fde3-486d-90c9-4571c3cdcfe4","c95b2ba7-3998-43ed-8076-001fc0eaa9a0","67fa75ba-82d4-473c-9638-899ef669e4d2","ffbbc042-f8fa-4aa3-991a-425ffa6bdd70","25556a15-a6de-4e08-b080-46e7eb6c87aa"})
                .minimumNumberForCombinationPurchase(618)
                .existInEachProductGroups(true)
                .maxPointAmount(8579)
                .maxTotalPointAmount(2970)
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(945599052);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test10() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("product_code", "4912345678904");
        items.addProperty("is_multiply_by_count", true);
        items.addProperty("required_count", 2);
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new UpdateCampaign(
            "60426a39-a2a2-46ce-81b8-2ba4c472a9e8"
        )
                .productBasedPointRules(new Object[]{items})
                .applicableDaysOfWeek(new Integer[]{5,3,3,5,2,2,4,1})
                .applicableTimeRanges(new Object[]{items2,items3,items4,items5,items6})
                .applicableShopIds(new String[]{"b51020a3-76ad-44d1-9f3e-7d4426219476","67d3e939-405b-4e54-8ed7-95b3ed4fd8df","002e5c04-762f-46f4-af97-f56eecab59f2","0c10f216-bbf5-44b5-843d-ac0159bd5f2e","0cd2aef8-9e78-4f9b-92a7-f78d8c1b9d97","d973c19d-9522-4edc-8731-d22eff86566b","95479d96-ef22-497d-88e9-aa5200c399b4","cd651564-4b61-44d4-9304-ed5456fd4db4","75d3759f-b13f-4830-b1fb-a893c52a265e"})
                .minimumNumberForCombinationPurchase(641)
                .existInEachProductGroups(true)
                .maxPointAmount(8666)
                .maxTotalPointAmount(3771)
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(1970190781);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test11() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("subject_more_than_or_equal", 1000);
        items.addProperty("subject_less_than", 5000);
        JsonObject items2 = new JsonObject();
        items2.addProperty("point_amount", 5);
        items2.addProperty("point_amount_unit", "percent");
        items2.addProperty("subject_more_than_or_equal", 1000);
        items2.addProperty("subject_less_than", 5000);
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("subject_more_than_or_equal", 1000);
        items3.addProperty("subject_less_than", 5000);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("subject_more_than_or_equal", 1000);
        items4.addProperty("subject_less_than", 5000);
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("subject_more_than_or_equal", 1000);
        items5.addProperty("subject_less_than", 5000);
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("subject_more_than_or_equal", 1000);
        items6.addProperty("subject_less_than", 5000);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("is_multiply_by_count", true);
        items7.addProperty("required_count", 2);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("is_multiply_by_count", true);
        items8.addProperty("required_count", 2);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("is_multiply_by_count", true);
        items9.addProperty("required_count", 2);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("is_multiply_by_count", true);
        items16.addProperty("required_count", 2);
        JsonObject items17 = new JsonObject();
        items17.addProperty("from", "12:00");
        items17.addProperty("to", "23:59");
        JsonObject items18 = new JsonObject();
        items18.addProperty("from", "12:00");
        items18.addProperty("to", "23:59");
        JsonObject items19 = new JsonObject();
        items19.addProperty("from", "12:00");
        items19.addProperty("to", "23:59");
        JsonObject items20 = new JsonObject();
        items20.addProperty("from", "12:00");
        items20.addProperty("to", "23:59");
        JsonObject items21 = new JsonObject();
        items21.addProperty("from", "12:00");
        items21.addProperty("to", "23:59");
        JsonObject items22 = new JsonObject();
        items22.addProperty("from", "12:00");
        items22.addProperty("to", "23:59");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new UpdateCampaign(
            "60426a39-a2a2-46ce-81b8-2ba4c472a9e8"
        )
                .amountBasedPointRules(new Object[]{items,items2,items3,items4,items5,items6})
                .productBasedPointRules(new Object[]{items7,items8,items9,items10,items11,items12,items13,items14,items15,items16})
                .applicableDaysOfWeek(new Integer[]{5,3,1,2,5,0})
                .applicableTimeRanges(new Object[]{items17,items18,items19,items20,items21,items22})
                .applicableShopIds(new String[]{"9472aaef-7889-4004-b503-169ce226f420","442ccffc-fa52-4cb8-a594-2c92aef5f4c8","bded2d5b-1c2b-49c4-a521-1549582c3172","09208be7-cd33-4a08-b83b-df143b10c829","a7cbdf55-307b-4944-9c69-60f828163ca1","2011ccde-7f52-47fb-825e-7ed14b48fd20","98228a9f-6d1f-4f95-93a1-d14fb04b8819"})
                .minimumNumberForCombinationPurchase(6753)
                .existInEachProductGroups(false)
                .maxPointAmount(3616)
                .maxTotalPointAmount(8953)
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(2007692491);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test12() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("subject_more_than_or_equal", 1000);
        items.addProperty("subject_less_than", 5000);
        JsonObject items2 = new JsonObject();
        items2.addProperty("point_amount", 5);
        items2.addProperty("point_amount_unit", "percent");
        items2.addProperty("subject_more_than_or_equal", 1000);
        items2.addProperty("subject_less_than", 5000);
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("subject_more_than_or_equal", 1000);
        items3.addProperty("subject_less_than", 5000);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("subject_more_than_or_equal", 1000);
        items4.addProperty("subject_less_than", 5000);
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("subject_more_than_or_equal", 1000);
        items5.addProperty("subject_less_than", 5000);
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("subject_more_than_or_equal", 1000);
        items6.addProperty("subject_less_than", 5000);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("subject_more_than_or_equal", 1000);
        items7.addProperty("subject_less_than", 5000);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("subject_more_than_or_equal", 1000);
        items8.addProperty("subject_less_than", 5000);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("subject_more_than_or_equal", 1000);
        items9.addProperty("subject_less_than", 5000);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("is_multiply_by_count", true);
        items16.addProperty("required_count", 2);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("is_multiply_by_count", true);
        items17.addProperty("required_count", 2);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("product_code", "4912345678904");
        items18.addProperty("is_multiply_by_count", true);
        items18.addProperty("required_count", 2);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("product_code", "4912345678904");
        items19.addProperty("is_multiply_by_count", true);
        items19.addProperty("required_count", 2);
        JsonObject items20 = new JsonObject();
        items20.addProperty("from", "12:00");
        items20.addProperty("to", "23:59");
        JsonObject items21 = new JsonObject();
        items21.addProperty("from", "12:00");
        items21.addProperty("to", "23:59");
        JsonObject items22 = new JsonObject();
        items22.addProperty("from", "12:00");
        items22.addProperty("to", "23:59");
        JsonObject items23 = new JsonObject();
        items23.addProperty("from", "12:00");
        items23.addProperty("to", "23:59");
        JsonObject items24 = new JsonObject();
        items24.addProperty("from", "12:00");
        items24.addProperty("to", "23:59");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new UpdateCampaign(
            "60426a39-a2a2-46ce-81b8-2ba4c472a9e8"
        )
                .subject("all")
                .amountBasedPointRules(new Object[]{items,items2,items3,items4,items5,items6,items7,items8,items9})
                .productBasedPointRules(new Object[]{items10,items11,items12,items13,items14,items15,items16,items17,items18,items19})
                .applicableDaysOfWeek(new Integer[]{2,1,1,6,4,3})
                .applicableTimeRanges(new Object[]{items20,items21,items22,items23,items24})
                .applicableShopIds(new String[]{"3ca2b36f-445f-4388-9206-17a809bf05f3"})
                .minimumNumberForCombinationPurchase(4360)
                .existInEachProductGroups(false)
                .maxPointAmount(205)
                .maxTotalPointAmount(1554)
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(1273944928);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test13() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("subject_more_than_or_equal", 1000);
        items.addProperty("subject_less_than", 5000);
        JsonObject items2 = new JsonObject();
        items2.addProperty("point_amount", 5);
        items2.addProperty("point_amount_unit", "percent");
        items2.addProperty("subject_more_than_or_equal", 1000);
        items2.addProperty("subject_less_than", 5000);
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("subject_more_than_or_equal", 1000);
        items3.addProperty("subject_less_than", 5000);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("subject_more_than_or_equal", 1000);
        items4.addProperty("subject_less_than", 5000);
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("subject_more_than_or_equal", 1000);
        items5.addProperty("subject_less_than", 5000);
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("subject_more_than_or_equal", 1000);
        items6.addProperty("subject_less_than", 5000);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("subject_more_than_or_equal", 1000);
        items7.addProperty("subject_less_than", 5000);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("is_multiply_by_count", true);
        items8.addProperty("required_count", 2);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("is_multiply_by_count", true);
        items9.addProperty("required_count", 2);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("is_multiply_by_count", true);
        items16.addProperty("required_count", 2);
        JsonObject items17 = new JsonObject();
        items17.addProperty("from", "12:00");
        items17.addProperty("to", "23:59");
        JsonObject items18 = new JsonObject();
        items18.addProperty("from", "12:00");
        items18.addProperty("to", "23:59");
        JsonObject items19 = new JsonObject();
        items19.addProperty("from", "12:00");
        items19.addProperty("to", "23:59");
        JsonObject items20 = new JsonObject();
        items20.addProperty("from", "12:00");
        items20.addProperty("to", "23:59");
        JsonObject items21 = new JsonObject();
        items21.addProperty("from", "12:00");
        items21.addProperty("to", "23:59");
        JsonObject items22 = new JsonObject();
        items22.addProperty("from", "12:00");
        items22.addProperty("to", "23:59");
        JsonObject items23 = new JsonObject();
        items23.addProperty("from", "12:00");
        items23.addProperty("to", "23:59");
        JsonObject items24 = new JsonObject();
        items24.addProperty("from", "12:00");
        items24.addProperty("to", "23:59");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new UpdateCampaign(
            "60426a39-a2a2-46ce-81b8-2ba4c472a9e8"
        )
                .setExclusive(true)
                .subject("all")
                .amountBasedPointRules(new Object[]{items,items2,items3,items4,items5,items6,items7})
                .productBasedPointRules(new Object[]{items8,items9,items10,items11,items12,items13,items14,items15,items16})
                .applicableDaysOfWeek(new Integer[]{2,6,6,4,1})
                .applicableTimeRanges(new Object[]{items17,items18,items19,items20,items21,items22,items23,items24})
                .applicableShopIds(new String[]{"944f2b9a-63a3-4bce-af22-1b7f000d4946","79e8a56c-c102-4cfd-8d84-85a9dc1fcc47","ffd9c668-871b-4acf-8037-b0cdc78f776a","57527f0a-d005-4fef-8d9f-45ae768bb684","cc5754a9-a046-48e9-884c-6ca252efadf4","0a61a44e-620d-4739-99bb-43f1a5f9db79","fbc3dfb7-0fa0-418d-92de-2ab5ad53f953"})
                .minimumNumberForCombinationPurchase(7142)
                .existInEachProductGroups(true)
                .maxPointAmount(1583)
                .maxTotalPointAmount(380)
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(758756205);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test14() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("subject_more_than_or_equal", 1000);
        items.addProperty("subject_less_than", 5000);
        JsonObject items2 = new JsonObject();
        items2.addProperty("point_amount", 5);
        items2.addProperty("point_amount_unit", "percent");
        items2.addProperty("subject_more_than_or_equal", 1000);
        items2.addProperty("subject_less_than", 5000);
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("subject_more_than_or_equal", 1000);
        items3.addProperty("subject_less_than", 5000);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("is_multiply_by_count", true);
        items4.addProperty("required_count", 2);
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("is_multiply_by_count", true);
        items5.addProperty("required_count", 2);
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("from", "12:00");
        items7.addProperty("to", "23:59");
        JsonObject items8 = new JsonObject();
        items8.addProperty("from", "12:00");
        items8.addProperty("to", "23:59");
        JsonObject items9 = new JsonObject();
        items9.addProperty("from", "12:00");
        items9.addProperty("to", "23:59");
        JsonObject items10 = new JsonObject();
        items10.addProperty("from", "12:00");
        items10.addProperty("to", "23:59");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new UpdateCampaign(
            "60426a39-a2a2-46ce-81b8-2ba4c472a9e8"
        )
                .pointExpiresInDays(4021)
                .setExclusive(true)
                .subject("money")
                .amountBasedPointRules(new Object[]{items,items2,items3})
                .productBasedPointRules(new Object[]{items4,items5})
                .applicableDaysOfWeek(new Integer[]{4,6})
                .applicableTimeRanges(new Object[]{items6,items7,items8,items9,items10})
                .applicableShopIds(new String[]{"9d8eff32-0a67-46be-aba9-107ac7504cab","61133e28-ac19-4e28-b046-45c994583ee4","fa490dce-6453-4da9-80e2-f47c7ebc6e9d"})
                .minimumNumberForCombinationPurchase(2461)
                .existInEachProductGroups(false)
                .maxPointAmount(2718)
                .maxTotalPointAmount(6131)
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(1008028717);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test15() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("subject_more_than_or_equal", 1000);
        items.addProperty("subject_less_than", 5000);
        JsonObject items2 = new JsonObject();
        items2.addProperty("point_amount", 5);
        items2.addProperty("point_amount_unit", "percent");
        items2.addProperty("subject_more_than_or_equal", 1000);
        items2.addProperty("subject_less_than", 5000);
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("is_multiply_by_count", true);
        items3.addProperty("required_count", 2);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("is_multiply_by_count", true);
        items4.addProperty("required_count", 2);
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("is_multiply_by_count", true);
        items5.addProperty("required_count", 2);
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("is_multiply_by_count", true);
        items6.addProperty("required_count", 2);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("is_multiply_by_count", true);
        items7.addProperty("required_count", 2);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("is_multiply_by_count", true);
        items8.addProperty("required_count", 2);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("is_multiply_by_count", true);
        items9.addProperty("required_count", 2);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("from", "12:00");
        items13.addProperty("to", "23:59");
        JsonObject items14 = new JsonObject();
        items14.addProperty("from", "12:00");
        items14.addProperty("to", "23:59");
        JsonObject items15 = new JsonObject();
        items15.addProperty("from", "12:00");
        items15.addProperty("to", "23:59");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new UpdateCampaign(
            "60426a39-a2a2-46ce-81b8-2ba4c472a9e8"
        )
                .pointExpiresAt("2023-04-13T09:18:16.000000Z")
                .pointExpiresInDays(7711)
                .setExclusive(true)
                .subject("all")
                .amountBasedPointRules(new Object[]{items,items2})
                .productBasedPointRules(new Object[]{items3,items4,items5,items6,items7,items8,items9,items10,items11,items12})
                .applicableDaysOfWeek(new Integer[]{3,0,0,0,2,2,6,4,4,0})
                .applicableTimeRanges(new Object[]{items13,items14,items15})
                .applicableShopIds(new String[]{"bfc5f093-73b5-4d99-b675-3f55f4a83851","a630f16c-daff-46c8-88d7-61bde20bf32c","a181a801-e19d-4c28-88e4-ef8b901c577b","66bc007e-3ce6-44ca-877c-e54ba04921ca","8b280d0c-f61f-4247-8acf-e45bf951b312"})
                .minimumNumberForCombinationPurchase(4454)
                .existInEachProductGroups(true)
                .maxPointAmount(1008)
                .maxTotalPointAmount(948)
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(1535860290);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test16() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("subject_more_than_or_equal", 1000);
        items.addProperty("subject_less_than", 5000);
        JsonObject items2 = new JsonObject();
        items2.addProperty("point_amount", 5);
        items2.addProperty("point_amount_unit", "percent");
        items2.addProperty("subject_more_than_or_equal", 1000);
        items2.addProperty("subject_less_than", 5000);
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("subject_more_than_or_equal", 1000);
        items3.addProperty("subject_less_than", 5000);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("subject_more_than_or_equal", 1000);
        items4.addProperty("subject_less_than", 5000);
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("subject_more_than_or_equal", 1000);
        items5.addProperty("subject_less_than", 5000);
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("is_multiply_by_count", true);
        items6.addProperty("required_count", 2);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("is_multiply_by_count", true);
        items7.addProperty("required_count", 2);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("is_multiply_by_count", true);
        items8.addProperty("required_count", 2);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("is_multiply_by_count", true);
        items9.addProperty("required_count", 2);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("from", "12:00");
        items14.addProperty("to", "23:59");
        JsonObject items15 = new JsonObject();
        items15.addProperty("from", "12:00");
        items15.addProperty("to", "23:59");
        JsonObject items16 = new JsonObject();
        items16.addProperty("from", "12:00");
        items16.addProperty("to", "23:59");
        JsonObject items17 = new JsonObject();
        items17.addProperty("from", "12:00");
        items17.addProperty("to", "23:59");
        JsonObject items18 = new JsonObject();
        items18.addProperty("from", "12:00");
        items18.addProperty("to", "23:59");
        JsonObject items19 = new JsonObject();
        items19.addProperty("from", "12:00");
        items19.addProperty("to", "23:59");
        JsonObject items20 = new JsonObject();
        items20.addProperty("from", "12:00");
        items20.addProperty("to", "23:59");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new UpdateCampaign(
            "60426a39-a2a2-46ce-81b8-2ba4c472a9e8"
        )
                .status("disabled")
                .pointExpiresAt("2021-07-26T18:15:19.000000Z")
                .pointExpiresInDays(1584)
                .setExclusive(false)
                .subject("all")
                .amountBasedPointRules(new Object[]{items,items2,items3,items4,items5})
                .productBasedPointRules(new Object[]{items6,items7,items8,items9,items10,items11,items12,items13})
                .applicableDaysOfWeek(new Integer[]{6,6,2,0,3,3,5,3})
                .applicableTimeRanges(new Object[]{items14,items15,items16,items17,items18,items19,items20})
                .applicableShopIds(new String[]{"a9d5b496-d67c-46f7-8a7d-122105f13f99","9eec184d-c5d1-4662-9ef0-4903b4deb376","cc61a1d7-3f64-4b8c-9218-e0db50c9a915","109928c9-01be-4ee6-b0ea-619488a621b2","c6ff9025-3d2d-414e-a347-9789832241f0","74610764-1bb9-4e3a-abd4-6b3c53261b99"})
                .minimumNumberForCombinationPurchase(9576)
                .existInEachProductGroups(false)
                .maxPointAmount(8807)
                .maxTotalPointAmount(5129)
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(1983410747);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test17() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("subject_more_than_or_equal", 1000);
        items.addProperty("subject_less_than", 5000);
        JsonObject items2 = new JsonObject();
        items2.addProperty("point_amount", 5);
        items2.addProperty("point_amount_unit", "percent");
        items2.addProperty("subject_more_than_or_equal", 1000);
        items2.addProperty("subject_less_than", 5000);
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("subject_more_than_or_equal", 1000);
        items3.addProperty("subject_less_than", 5000);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("subject_more_than_or_equal", 1000);
        items4.addProperty("subject_less_than", 5000);
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("is_multiply_by_count", true);
        items5.addProperty("required_count", 2);
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("is_multiply_by_count", true);
        items6.addProperty("required_count", 2);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("is_multiply_by_count", true);
        items7.addProperty("required_count", 2);
        JsonObject items8 = new JsonObject();
        items8.addProperty("from", "12:00");
        items8.addProperty("to", "23:59");
        JsonObject items9 = new JsonObject();
        items9.addProperty("from", "12:00");
        items9.addProperty("to", "23:59");
        JsonObject items10 = new JsonObject();
        items10.addProperty("from", "12:00");
        items10.addProperty("to", "23:59");
        JsonObject items11 = new JsonObject();
        items11.addProperty("from", "12:00");
        items11.addProperty("to", "23:59");
        JsonObject items12 = new JsonObject();
        items12.addProperty("from", "12:00");
        items12.addProperty("to", "23:59");
        JsonObject items13 = new JsonObject();
        items13.addProperty("from", "12:00");
        items13.addProperty("to", "23:59");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new UpdateCampaign(
            "60426a39-a2a2-46ce-81b8-2ba4c472a9e8"
        )
                .description("bzWuGj28bjzoMkUfQZyG6ql9kvIc3ugQfVcwKEOAlMUYblAnOJUw5uYgLUj2LWIHcZ5Kh7Upt9fM2ThdFR4ZGmC3lYSdkRdIHlBo7iMGslQeLzTg9FCP6boJkANEW")
                .status("enabled")
                .pointExpiresAt("2024-01-15T11:19:12.000000Z")
                .pointExpiresInDays(8185)
                .setExclusive(true)
                .subject("all")
                .amountBasedPointRules(new Object[]{items,items2,items3,items4})
                .productBasedPointRules(new Object[]{items5,items6,items7})
                .applicableDaysOfWeek(new Integer[]{3,3})
                .applicableTimeRanges(new Object[]{items8,items9,items10,items11,items12,items13})
                .applicableShopIds(new String[]{"be4482f2-19a8-4bbf-b4d8-21e429fa81df","ff911128-3feb-456a-830b-3c5a614a3ab6","29cb2e06-054b-46de-8f94-8e15e0a7ed10","03f1cb58-9114-46ad-abe9-3e4db23386f8","db6524b1-25eb-437f-bd48-f496da81ff14"})
                .minimumNumberForCombinationPurchase(2005)
                .existInEachProductGroups(true)
                .maxPointAmount(3646)
                .maxTotalPointAmount(7047)
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(1013151459);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test18() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("subject_more_than_or_equal", 1000);
        items.addProperty("subject_less_than", 5000);
        JsonObject items2 = new JsonObject();
        items2.addProperty("point_amount", 5);
        items2.addProperty("point_amount_unit", "percent");
        items2.addProperty("subject_more_than_or_equal", 1000);
        items2.addProperty("subject_less_than", 5000);
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("subject_more_than_or_equal", 1000);
        items3.addProperty("subject_less_than", 5000);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("subject_more_than_or_equal", 1000);
        items4.addProperty("subject_less_than", 5000);
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("is_multiply_by_count", true);
        items5.addProperty("required_count", 2);
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("is_multiply_by_count", true);
        items6.addProperty("required_count", 2);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("is_multiply_by_count", true);
        items7.addProperty("required_count", 2);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("is_multiply_by_count", true);
        items8.addProperty("required_count", 2);
        JsonObject items9 = new JsonObject();
        items9.addProperty("from", "12:00");
        items9.addProperty("to", "23:59");
        JsonObject items10 = new JsonObject();
        items10.addProperty("from", "12:00");
        items10.addProperty("to", "23:59");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new UpdateCampaign(
            "60426a39-a2a2-46ce-81b8-2ba4c472a9e8"
        )
                .event("topup")
                .description("Rx79qoFTViWGk7rsKgu2ihoMxDsfU3TC1A")
                .status("enabled")
                .pointExpiresAt("2023-07-09T08:30:48.000000Z")
                .pointExpiresInDays(9175)
                .setExclusive(false)
                .subject("money")
                .amountBasedPointRules(new Object[]{items,items2,items3,items4})
                .productBasedPointRules(new Object[]{items5,items6,items7,items8})
                .applicableDaysOfWeek(new Integer[]{1,5,4,6,4,0,0,6,3,6})
                .applicableTimeRanges(new Object[]{items9,items10})
                .applicableShopIds(new String[]{"4209664d-71f4-4131-8e17-970797eeb9ce","b4debd2e-9988-44de-bca4-ebfbdf4dde86","366f3ad4-f330-4692-97cc-595bfb320709","65140396-a9d3-45ee-979b-28f984eaa320","b57a6fcc-cc43-4549-a9e1-10531e325c6d","e449f5f8-c302-4da1-8f19-28e959b4c261","86f68ee2-d2f9-4f81-832c-b146b6aec9bd"})
                .minimumNumberForCombinationPurchase(8359)
                .existInEachProductGroups(false)
                .maxPointAmount(1987)
                .maxTotalPointAmount(7704)
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(1377059414);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test19() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("subject_more_than_or_equal", 1000);
        items.addProperty("subject_less_than", 5000);
        JsonObject items2 = new JsonObject();
        items2.addProperty("point_amount", 5);
        items2.addProperty("point_amount_unit", "percent");
        items2.addProperty("subject_more_than_or_equal", 1000);
        items2.addProperty("subject_less_than", 5000);
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("subject_more_than_or_equal", 1000);
        items3.addProperty("subject_less_than", 5000);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("subject_more_than_or_equal", 1000);
        items4.addProperty("subject_less_than", 5000);
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("subject_more_than_or_equal", 1000);
        items5.addProperty("subject_less_than", 5000);
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("subject_more_than_or_equal", 1000);
        items6.addProperty("subject_less_than", 5000);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("subject_more_than_or_equal", 1000);
        items7.addProperty("subject_less_than", 5000);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("subject_more_than_or_equal", 1000);
        items8.addProperty("subject_less_than", 5000);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("subject_more_than_or_equal", 1000);
        items9.addProperty("subject_less_than", 5000);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("subject_more_than_or_equal", 1000);
        items10.addProperty("subject_less_than", 5000);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("is_multiply_by_count", true);
        items16.addProperty("required_count", 2);
        JsonObject items17 = new JsonObject();
        items17.addProperty("from", "12:00");
        items17.addProperty("to", "23:59");
        JsonObject items18 = new JsonObject();
        items18.addProperty("from", "12:00");
        items18.addProperty("to", "23:59");
        JsonObject items19 = new JsonObject();
        items19.addProperty("from", "12:00");
        items19.addProperty("to", "23:59");
        JsonObject items20 = new JsonObject();
        items20.addProperty("from", "12:00");
        items20.addProperty("to", "23:59");
        JsonObject items21 = new JsonObject();
        items21.addProperty("from", "12:00");
        items21.addProperty("to", "23:59");
        JsonObject items22 = new JsonObject();
        items22.addProperty("from", "12:00");
        items22.addProperty("to", "23:59");
        JsonObject items23 = new JsonObject();
        items23.addProperty("from", "12:00");
        items23.addProperty("to", "23:59");
        JsonObject items24 = new JsonObject();
        items24.addProperty("from", "12:00");
        items24.addProperty("to", "23:59");
        JsonObject items25 = new JsonObject();
        items25.addProperty("from", "12:00");
        items25.addProperty("to", "23:59");
        JsonObject items26 = new JsonObject();
        items26.addProperty("from", "12:00");
        items26.addProperty("to", "23:59");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new UpdateCampaign(
            "60426a39-a2a2-46ce-81b8-2ba4c472a9e8"
        )
                .priority(3198)
                .event("payment")
                .description("wMvzRhZdC9PIbxRIokrSMcAe6DLpfhwjho9qAj035em2B0e1zQxL4LWrEkUrKUADYaUMS4V1xY0z")
                .status("enabled")
                .pointExpiresAt("2021-09-09T22:47:13.000000Z")
                .pointExpiresInDays(8459)
                .setExclusive(false)
                .subject("money")
                .amountBasedPointRules(new Object[]{items,items2,items3,items4,items5,items6,items7,items8,items9,items10})
                .productBasedPointRules(new Object[]{items11,items12,items13,items14,items15,items16})
                .applicableDaysOfWeek(new Integer[]{2,1})
                .applicableTimeRanges(new Object[]{items17,items18,items19,items20,items21,items22,items23,items24,items25,items26})
                .applicableShopIds(new String[]{"5b0a0651-0022-4737-b75b-702fbcc88cc2","167e148a-f60d-4028-b971-afe9e382d27b","ac0c702a-f3fa-4bab-8656-cfd1e7757485","c6ef7a6f-5b16-4007-a53e-d10e90a9d33a","f1fdb986-0a32-4cdc-a006-f6d824e8e2bd"})
                .minimumNumberForCombinationPurchase(8762)
                .existInEachProductGroups(true)
                .maxPointAmount(3842)
                .maxTotalPointAmount(2335)
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(1928834827);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test20() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("subject_more_than_or_equal", 1000);
        items.addProperty("subject_less_than", 5000);
        JsonObject items2 = new JsonObject();
        items2.addProperty("point_amount", 5);
        items2.addProperty("point_amount_unit", "percent");
        items2.addProperty("product_code", "4912345678904");
        items2.addProperty("is_multiply_by_count", true);
        items2.addProperty("required_count", 2);
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("is_multiply_by_count", true);
        items3.addProperty("required_count", 2);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("is_multiply_by_count", true);
        items4.addProperty("required_count", 2);
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("is_multiply_by_count", true);
        items5.addProperty("required_count", 2);
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("from", "12:00");
        items7.addProperty("to", "23:59");
        JsonObject items8 = new JsonObject();
        items8.addProperty("from", "12:00");
        items8.addProperty("to", "23:59");
        JsonObject items9 = new JsonObject();
        items9.addProperty("from", "12:00");
        items9.addProperty("to", "23:59");
        JsonObject items10 = new JsonObject();
        items10.addProperty("from", "12:00");
        items10.addProperty("to", "23:59");
        JsonObject items11 = new JsonObject();
        items11.addProperty("from", "12:00");
        items11.addProperty("to", "23:59");
        JsonObject items12 = new JsonObject();
        items12.addProperty("from", "12:00");
        items12.addProperty("to", "23:59");
        JsonObject items13 = new JsonObject();
        items13.addProperty("from", "12:00");
        items13.addProperty("to", "23:59");
        JsonObject items14 = new JsonObject();
        items14.addProperty("from", "12:00");
        items14.addProperty("to", "23:59");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new UpdateCampaign(
            "60426a39-a2a2-46ce-81b8-2ba4c472a9e8"
        )
                .endsAt("2023-09-01T15:24:58.000000Z")
                .priority(105)
                .event("payment")
                .description("LVlycfdA0sn1Jp9ctBvXrxjspmUg2Jofbfd8lI7ca3oyQQIsUl3rCM2ZMpE4WDor4IADTH")
                .status("enabled")
                .pointExpiresAt("2023-07-17T21:45:47.000000Z")
                .pointExpiresInDays(9056)
                .setExclusive(true)
                .subject("money")
                .amountBasedPointRules(new Object[]{items})
                .productBasedPointRules(new Object[]{items2,items3,items4,items5})
                .applicableDaysOfWeek(new Integer[]{2})
                .applicableTimeRanges(new Object[]{items6,items7,items8,items9,items10,items11,items12,items13,items14})
                .applicableShopIds(new String[]{"98824c24-130e-49f3-bed7-bfe264b39175","1aac2b3b-f01e-4795-a807-7c6e8a28f4e2","fe882e92-953f-4649-9546-57bbd3e5dc6c","784790ff-bb28-4966-8076-ca6ffc993de2","f10e83a4-adcf-4220-9f9b-0b94919b3ce3","0321583a-4e5d-44ec-86d8-244b2aca5de6"})
                .minimumNumberForCombinationPurchase(4727)
                .existInEachProductGroups(false)
                .maxPointAmount(4370)
                .maxTotalPointAmount(6752)
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(853454565);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test21() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("subject_more_than_or_equal", 1000);
        items.addProperty("subject_less_than", 5000);
        JsonObject items2 = new JsonObject();
        items2.addProperty("point_amount", 5);
        items2.addProperty("point_amount_unit", "percent");
        items2.addProperty("subject_more_than_or_equal", 1000);
        items2.addProperty("subject_less_than", 5000);
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("subject_more_than_or_equal", 1000);
        items3.addProperty("subject_less_than", 5000);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("subject_more_than_or_equal", 1000);
        items4.addProperty("subject_less_than", 5000);
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("subject_more_than_or_equal", 1000);
        items5.addProperty("subject_less_than", 5000);
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("is_multiply_by_count", true);
        items6.addProperty("required_count", 2);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("is_multiply_by_count", true);
        items7.addProperty("required_count", 2);
        JsonObject items8 = new JsonObject();
        items8.addProperty("from", "12:00");
        items8.addProperty("to", "23:59");
        JsonObject items9 = new JsonObject();
        items9.addProperty("from", "12:00");
        items9.addProperty("to", "23:59");
        JsonObject items10 = new JsonObject();
        items10.addProperty("from", "12:00");
        items10.addProperty("to", "23:59");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new UpdateCampaign(
            "60426a39-a2a2-46ce-81b8-2ba4c472a9e8"
        )
                .startsAt("2022-02-08T07:54:57.000000Z")
                .endsAt("2020-09-07T11:07:21.000000Z")
                .priority(6831)
                .event("topup")
                .description("3hjtD1VYnThEQOLtlkRPIAeI3C1kLwoSJ0t0xwzgZ3SAsjpAuPQwOMExC1w6ifl9ZUstqj7jJ1Xazd0M0QE8si7WktomTSIs3sss0bSZ1cR5rMDg0iBD")
                .status("enabled")
                .pointExpiresAt("2023-04-07T15:17:38.000000Z")
                .pointExpiresInDays(9523)
                .setExclusive(false)
                .subject("money")
                .amountBasedPointRules(new Object[]{items,items2,items3,items4,items5})
                .productBasedPointRules(new Object[]{items6,items7})
                .applicableDaysOfWeek(new Integer[]{4,5,1,2,0,1,6})
                .applicableTimeRanges(new Object[]{items8,items9,items10})
                .applicableShopIds(new String[]{"3d504807-f481-4765-a859-1e493ffa0d5a","11327ae2-dcbf-427c-8d68-ee363a41cf25","1e3e25cd-b710-462f-a6bf-f1a5becf2803"})
                .minimumNumberForCombinationPurchase(956)
                .existInEachProductGroups(false)
                .maxPointAmount(1195)
                .maxTotalPointAmount(5716)
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(1065507945);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test22() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("subject_more_than_or_equal", 1000);
        items.addProperty("subject_less_than", 5000);
        JsonObject items2 = new JsonObject();
        items2.addProperty("point_amount", 5);
        items2.addProperty("point_amount_unit", "percent");
        items2.addProperty("subject_more_than_or_equal", 1000);
        items2.addProperty("subject_less_than", 5000);
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("is_multiply_by_count", true);
        items3.addProperty("required_count", 2);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("is_multiply_by_count", true);
        items4.addProperty("required_count", 2);
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("is_multiply_by_count", true);
        items5.addProperty("required_count", 2);
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("is_multiply_by_count", true);
        items6.addProperty("required_count", 2);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("is_multiply_by_count", true);
        items7.addProperty("required_count", 2);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("is_multiply_by_count", true);
        items8.addProperty("required_count", 2);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("is_multiply_by_count", true);
        items9.addProperty("required_count", 2);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("from", "12:00");
        items11.addProperty("to", "23:59");
        JsonObject items12 = new JsonObject();
        items12.addProperty("from", "12:00");
        items12.addProperty("to", "23:59");
        JsonObject items13 = new JsonObject();
        items13.addProperty("from", "12:00");
        items13.addProperty("to", "23:59");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        Request request = new UpdateCampaign(
            "60426a39-a2a2-46ce-81b8-2ba4c472a9e8"
        )
                .name("8D4Ev7O7TGT70LQ2epxhXvfJrqwCwzvGv5tXB9341AdQSvr2jD2CPBEg6qDXhSH8ha")
                .startsAt("2020-08-30T01:31:18.000000Z")
                .endsAt("2023-01-24T22:16:42.000000Z")
                .priority(132)
                .event("payment")
                .description("0sDTnM")
                .status("enabled")
                .pointExpiresAt("2023-09-05T03:26:52.000000Z")
                .pointExpiresInDays(5501)
                .setExclusive(true)
                .subject("money")
                .amountBasedPointRules(new Object[]{items,items2})
                .productBasedPointRules(new Object[]{items3,items4,items5,items6,items7,items8,items9,items10})
                .applicableDaysOfWeek(new Integer[]{4,0,2,5,3,4,5})
                .applicableTimeRanges(new Object[]{items11,items12,items13})
                .applicableShopIds(new String[]{"038ae224-1e11-4ec3-a480-679b5f9bb9b8","3ff61aca-7aa0-405a-a31b-9df1690d0316","87a1b3c9-e163-4b19-b15a-d62993f765c2","fe70eb32-1f6e-4c7b-ab3e-941e87943882","4492bd68-41ad-4777-b5d6-c2f5a680676e","91621e6e-e6a4-4ee8-b239-6b1ac96133ac"})
                .minimumNumberForCombinationPurchase(6654)
                .existInEachProductGroups(false)
                .maxPointAmount(7890)
                .maxTotalPointAmount(3579)
                .applicableAccountMetadata(applicable_account_metadata)
                .budgetCapsAmount(286258961);
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
}
