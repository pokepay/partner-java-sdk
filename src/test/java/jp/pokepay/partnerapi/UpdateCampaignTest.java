// DO NOT EDIT: File is generated by code generator.
package jp.pokepay.partnerapi;

import jp.pokepay.partnerapi.request.UpdateCampaign;
import jp.pokepay.partnerapi.request.Request;
import com.google.gson.JsonObject;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class UpdateCampaignTest {
    @Test
    void test0() throws ConnectionError, ProcessingError {
        Request request = new UpdateCampaign(
            "a48b494b-0a2b-4862-9036-ca01c57b3836"
        )
                .applicableShopIds(new String[]{"1d0d1f1a-8697-4b1b-bd13-03f9e2bd1d61","e64eafe6-112b-4358-9464-0a92795c4f6b","c59b7022-8179-45f5-ac16-dbaf1496877a"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test1() throws ConnectionError, ProcessingError {
        Request request = new UpdateCampaign(
            "a48b494b-0a2b-4862-9036-ca01c57b3836"
        )
                .applicableShopIds(new String[]{"22ca2888-7c1c-4994-bb65-6c970a46b686","723d2312-c766-4e4c-9880-7f062b52cb11","845662ae-6b1e-43f2-a8ec-0fee5700497f","9d313573-d9a9-4edc-a5a8-229d0e2486c8","7cf140f0-2d28-4dd8-a5e0-6ecdb79dea0f","9f16b732-6099-4759-93d8-ca025fb922e9"})
                .name("BptErKk8TqFhI23aFggzDuo1QBLhoaWcTysjqf2NLxNJJBXFzn7SMV4F4Se6b0P9GdLbtDADJFOwv19ckjRdJjFLAsc3wFquBfvqAdUlnD8LOQTwsqyARfbHQ2mBa7unFbunFnTDDByY1kE2sVoweGMxdMkkjFpFx65nd1qxypmMun31U4ntQhH7xS19r24aULeDf4KAhSNgGkPEs2b5ETqPFf4OjvVSRXsgylgd2kV86OKIdSfJ");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test2() throws ConnectionError, ProcessingError {
        Request request = new UpdateCampaign(
            "a48b494b-0a2b-4862-9036-ca01c57b3836"
        )
                .applicableShopIds(new String[]{"cdc1f0c7-9915-4c15-9fea-6c6434a63cde","fdf5d33b-3cd8-407a-b815-6e0a949ad282","4bc06e41-2d72-4032-b427-472e293642ee","d47740c6-42e2-4b82-bfe2-f1500b439574"})
                .startsAt("2022-07-08T09:41:58.000000+09:00")
                .name("GVRQI75Kb7sUoUCfBA7Y96FY7kITVw5mZEepsULdWBGpW5p3cIiy2KJNbleL7l56zFCA8t0ZwR9U3zS6TFtcF82z28AELjprVFZuLmUCJRRrJHErZtJomU");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test3() throws ConnectionError, ProcessingError {
        Request request = new UpdateCampaign(
            "a48b494b-0a2b-4862-9036-ca01c57b3836"
        )
                .applicableShopIds(new String[]{"956a6668-630b-429b-bfce-b5f2daabb6b4"})
                .endsAt("2021-09-02T04:23:18.000000+09:00")
                .startsAt("2022-01-09T13:31:00.000000+09:00")
                .name("suYci7dLPuyS9MD5OLpr2kHe3F45VgI8rernB3PrMVE4BlCXyikVj1FTIwfngCOk81eA6YB2suuNzOv8QbeXh3lN7agb");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test4() throws ConnectionError, ProcessingError {
        Request request = new UpdateCampaign(
            "a48b494b-0a2b-4862-9036-ca01c57b3836"
        )
                .applicableShopIds(new String[]{"5dc5b5b7-5c8c-4f51-b75e-90c4b10816df","c429cb2e-08e2-44ab-ae57-7765ec94c03a","87f969df-badf-48c8-97a9-786756211a60","03ce9c43-0b35-40f6-ae57-bdaf5caa9e0c","638382ff-6b16-4b96-8414-241b5e5ef596"})
                .priority(3205)
                .endsAt("2024-07-18T18:31:13.000000+09:00")
                .startsAt("2024-05-24T05:03:55.000000+09:00")
                .name("fOZ7");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test5() throws ConnectionError, ProcessingError {
        Request request = new UpdateCampaign(
            "a48b494b-0a2b-4862-9036-ca01c57b3836"
        )
                .applicableShopIds(new String[]{"a0403ffa-b223-4eb1-ac1d-bfb464cf7aee","5ec538bb-d7e8-4987-b5c2-d3b83ee6b8a4","7e94a864-01dc-4cbf-86d7-2e6001e1d7e0","52c2fb1b-aac7-4585-8d46-6401da912d59"})
                .event("external-transaction")
                .priority(946)
                .endsAt("2023-07-18T11:20:10.000000+09:00")
                .startsAt("2023-12-26T13:07:12.000000+09:00")
                .name("Y7Y03CLDnFbKjnIySxiO8Dq6tFlm6KuKXgf5drxUZ5gINeIqTEKbWhxHfRqackHQWkDTLFeM7lm0WlQL836FIvmSGKODLS7CUH3vhbfihXkPOTh890XN0EKhkYIH7a");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test6() throws ConnectionError, ProcessingError {
        Request request = new UpdateCampaign(
            "a48b494b-0a2b-4862-9036-ca01c57b3836"
        )
                .applicableShopIds(new String[]{"ab4961f1-4547-4195-a39f-b8331917fd37","2c846515-be84-4f97-a0fe-1483f2120a27","1990ef49-ac0d-456b-9288-b9629c353792","14002055-807b-442d-9164-4a96270e2aa1","7c109b7e-463c-492f-9657-9245b40fd8e0"})
                .description("lqbsRDobYAtlHxVaF4yuPBoF2CjrQYotKtYwozMARQUKmzvznY498mXWjF8URQoM1Dxn5VJ34xowBsWwTBOt9t48IWVqGQC9zZYzp3rMSGDmdJRDl1bgsBJdjwPNM81g1UsMSEFpwq0a3CgLVsriuPtWa3JpMsbNB3wXGnmH5yJiQZTkWCKMYktq8Riz7v7vIrXwuk")
                .event("external-transaction")
                .priority(4597)
                .endsAt("2024-04-26T07:37:56.000000+09:00")
                .startsAt("2020-04-18T15:43:42.000000+09:00")
                .name("DK9Bx");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test7() throws ConnectionError, ProcessingError {
        Request request = new UpdateCampaign(
            "a48b494b-0a2b-4862-9036-ca01c57b3836"
        )
                .applicableShopIds(new String[]{"da8b6756-6a6c-4d77-8d99-7f539cf97904"})
                .status("enabled")
                .description("Eyymr0YEwSs577HKGxIsD9KgqZCY")
                .event("payment")
                .priority(4594)
                .endsAt("2021-12-10T00:46:22.000000+09:00")
                .startsAt("2020-09-17T19:47:49.000000+09:00")
                .name("cw7QrxAzhTLbVm56I8ja7U88M6cj9XoJ2L9a6zBSY1NGxi76mX6AQPF93FEUOqxTM3Tuv8sVfnJsAt0AJTO3jIb7XE9yTAdNpXiw0qUcRgjYfI55yR9cDHXDP7w8fkiBenDLVqxz3mMVVWDk0ZXA2lxLo9eh71Ux16jafsowB24d1PuYNWNbGN84GwSfNDyLUvqW51zFwinFz2HzsIlqd0");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test8() throws ConnectionError, ProcessingError {
        Request request = new UpdateCampaign(
            "a48b494b-0a2b-4862-9036-ca01c57b3836"
        )
                .applicableShopIds(new String[]{"5c7711c0-4244-4969-8dd0-984c0c62a966","973ec19d-ee9e-40b1-84c3-b6e534302dc9","8e0f12be-27c6-4c95-848b-9710f784e58d"})
                .pointExpiresAt("2021-07-21T08:11:15.000000+09:00")
                .status("enabled")
                .description("HUbfOJNSu5yhDQAgGVIjJ0iDuAPyYyhPwymu2TjbcwZRP1lf2EUp2HMI3whwtf6WC0X")
                .event("topup")
                .priority(7341)
                .endsAt("2024-08-13T03:27:32.000000+09:00")
                .startsAt("2021-05-30T23:26:54.000000+09:00")
                .name("XwZ7WXCeZAYhLFr8fyo9nyAVpycwtCpidFgTR1QI5FNjwIJsFTwcKB8LJQvbjXnwQotL9PUx1PtI7kFso9tkdOJ35xTTDOTrE39GIJ5FJ6ZbTuaunJLdAjPt6N080w8Ehukd92KH1gQtpiRtY");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test9() throws ConnectionError, ProcessingError {
        Request request = new UpdateCampaign(
            "a48b494b-0a2b-4862-9036-ca01c57b3836"
        )
                .applicableShopIds(new String[]{"9ab0c17f-8a55-472f-bf9d-9984ddbc1e04","cf22686f-940d-4bca-9699-adbabf9e631f","ad95289e-62df-4b07-9bf8-f1b1816bb2d6","05bcdcdb-6080-46af-aa72-fdb8d71b1aca","9fcb44b6-1972-4288-ad56-4459bf47ad28","dee72bc8-fa6f-4fa8-a833-c65507ae8266","97a85830-3fe4-4d7a-84a2-41bebc2d7ebe","42bec485-df85-4d02-8276-19ee36b8b606","2a22b398-5904-40f1-ae6f-45aa00f08cc0","b142e334-bdd0-4eb4-aa84-8cd47017ee0b"})
                .pointExpiresInDays(3039)
                .pointExpiresAt("2020-06-07T01:50:21.000000+09:00")
                .status("enabled")
                .description("47KuRuyGHt6AlFs1TfKDmlq2hit00LAgSSfl4FMqi5YMhFSuyRcDD334XI6FEVpzdlxeRGzn1SP0IxLdy4dH82AA6iwraN7eggBeqClso7RNFFfhumTvCj66IRV7UMlV8Pi9P53IdUEkZO")
                .event("topup")
                .priority(8559)
                .endsAt("2023-08-20T12:54:44.000000+09:00")
                .startsAt("2020-11-09T11:18:29.000000+09:00")
                .name("BrzoOIhQtubtf5Ch5Ly89YetwzvtUJXy9CEZn6Vgc7sSsXq9ivh1FHiOcNoTv7tgD");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test10() throws ConnectionError, ProcessingError {
        Request request = new UpdateCampaign(
            "a48b494b-0a2b-4862-9036-ca01c57b3836"
        )
                .applicableShopIds(new String[]{"ac68cf93-aca4-4468-84d7-9442f208befb","f426b726-a181-408e-8702-7c88870f711e","713320e8-3491-4dac-95f1-e7a834c885d0"})
                .setExclusive(false)
                .pointExpiresInDays(9789)
                .pointExpiresAt("2022-02-13T21:11:59.000000+09:00")
                .status("enabled")
                .description("D2hONUj4PR16a5c1wknt8utVkpjH3SqYoWqdGEtP6qTbFs65L6V4XhIyqJ9GrdGK7cF4cyvh8bCW")
                .event("payment")
                .priority(4864)
                .endsAt("2021-03-23T00:42:48.000000+09:00")
                .startsAt("2024-06-15T04:35:12.000000+09:00")
                .name("4HrXLgQhuQ1fnLdXzq4acJIi05MSKEGCY8VJ2Qyph4KVFNuEQwNVCZUzcKhorDg3B2DSdFiZ4fhLAADaOQDQbzagVZ4NchQz1wT");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test11() throws ConnectionError, ProcessingError {
        Request request = new UpdateCampaign(
            "a48b494b-0a2b-4862-9036-ca01c57b3836"
        )
                .applicableShopIds(new String[]{"a880bd02-9f49-4824-b485-0cd741730aa3","b1e2e061-8b9a-4b7b-97b2-af07694864cf","17078eb2-c34f-4d0b-b2cf-a243b59d28ba","fb4420b3-8426-4e9a-82ef-4a92d03e7c34"})
                .subject("all")
                .setExclusive(false)
                .pointExpiresInDays(4077)
                .pointExpiresAt("2022-12-30T12:51:44.000000+09:00")
                .status("enabled")
                .description("FPZCBYSwDdxJzrrZp9NrCZwQY9iQJjOASQRJIMhXwJmAFx7kQ40o06uag48Fec9KKBQf2hbTt9NdHrws3ndbYjapJDovu7ySiVf9IoI33JfuFDek1vEyUSRJSX1cVBmly1L4uwOfSKmQvpjj4lNiWUevemv88MtCxCbwWH6H6iV2ooIJij6Vl5Yl")
                .event("external-transaction")
                .priority(9162)
                .endsAt("2020-05-25T21:20:07.000000+09:00")
                .startsAt("2021-01-31T17:23:08.000000+09:00")
                .name("vKE");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test12() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("subject_more_than_or_equal", 1000);
        items.addProperty("subject_less_than", 5000);
        Request request = new UpdateCampaign(
            "a48b494b-0a2b-4862-9036-ca01c57b3836"
        )
                .applicableShopIds(new String[]{"d62dfccf-9e84-45b4-b2b2-6426e742a82e","9c9dcdc3-ad50-4609-815d-ea33e87e1140","33417209-dab0-4a89-a11e-c9f823f23963","6f85e406-f52f-4197-8c4c-06bbca079c61","71fb336b-048e-4416-84bc-5f8d342ffbaf","7254f94d-8a45-4390-9a32-1baed1882fd9","7e5637ee-fa0e-4dda-88e2-66ad99174bb1"})
                .amountBasedPointRules(new Object[]{items})
                .subject("all")
                .setExclusive(true)
                .pointExpiresInDays(9066)
                .pointExpiresAt("2023-11-15T08:24:33.000000+09:00")
                .status("disabled")
                .description("IPcKGyGmU3gEkdmm")
                .event("topup")
                .priority(943)
                .endsAt("2020-08-19T16:05:58.000000+09:00")
                .startsAt("2021-02-27T03:04:12.000000+09:00")
                .name("Or2kdY99ZgYLlCfeTbUAKal");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test13() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("product_code", "4912345678904");
        items.addProperty("is_multiply_by_count", true);
        items.addProperty("required_count", 2);
        JsonObject items2 = new JsonObject();
        items2.addProperty("point_amount", 5);
        items2.addProperty("point_amount_unit", "percent");
        items2.addProperty("product_code", "4912345678904");
        items2.addProperty("is_multiply_by_count", true);
        items2.addProperty("required_count", 2);
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("is_multiply_by_count", true);
        items3.addProperty("required_count", 2);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("is_multiply_by_count", true);
        items4.addProperty("required_count", 2);
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("is_multiply_by_count", true);
        items5.addProperty("required_count", 2);
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("is_multiply_by_count", true);
        items6.addProperty("required_count", 2);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("is_multiply_by_count", true);
        items7.addProperty("required_count", 2);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("is_multiply_by_count", true);
        items8.addProperty("required_count", 2);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("is_multiply_by_count", true);
        items9.addProperty("required_count", 2);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("subject_more_than_or_equal", 1000);
        items10.addProperty("subject_less_than", 5000);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("subject_more_than_or_equal", 1000);
        items11.addProperty("subject_less_than", 5000);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("subject_more_than_or_equal", 1000);
        items12.addProperty("subject_less_than", 5000);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("subject_more_than_or_equal", 1000);
        items13.addProperty("subject_less_than", 5000);
        Request request = new UpdateCampaign(
            "a48b494b-0a2b-4862-9036-ca01c57b3836"
        )
                .applicableShopIds(new String[]{"f397c1a5-d555-494f-841a-1330076f46b8","7a99d62b-0a85-441d-a0d8-530adade3536","433cf5be-0896-43d6-95a3-81a175ced345","63c90a5c-729f-4842-9961-368a5d717de5","be9e2fbb-0b04-48f1-bbed-db15de9ef5e7","afc2fca3-101c-41be-a6c7-e2e9dbb8cb5a","fd881b1d-11d8-4551-839e-331c0a2ec407","e18b6847-e743-49bd-b823-2f76e2a5ad56","626bac05-0e22-428a-9dda-9c55ac441be3","2a65fcbf-0d72-4a21-9f3f-3d2997f80e49"})
                .productBasedPointRules(new Object[]{items,items2,items3,items4,items5,items6,items7,items8,items9})
                .amountBasedPointRules(new Object[]{items10,items11,items12,items13})
                .subject("money")
                .setExclusive(true)
                .pointExpiresInDays(9339)
                .pointExpiresAt("2024-03-01T10:33:53.000000+09:00")
                .status("enabled")
                .description("5oNKK5gbaNkD5CqYV9wtEPCnfKxra8Jyj7faOD3EBJ7eMvW7Gs4RU4ReJFX0OZwNhR2mkVozPrZtcCxyA8sli3OH19jBIcdPp15euIx")
                .event("topup")
                .priority(6004)
                .endsAt("2020-12-11T18:24:23.000000+09:00")
                .startsAt("2023-06-15T01:28:33.000000+09:00")
                .name("pHuiR4b63VbVMBZdj2IsmLLJq78PFz1JRlCgQ0knw5pvMa36VGZe4Yl6y4beQ0hcGld5T7e3l9duw1YEMuiJQUZVDnO7YpzPputtStAjf73SC36IpmvMwJ6");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test14() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("product_code", "4912345678904");
        items.addProperty("classification_code", "c123");
        JsonObject items2 = new JsonObject();
        items2.addProperty("product_code", "4912345678904");
        items2.addProperty("classification_code", "c123");
        JsonObject items3 = new JsonObject();
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("classification_code", "c123");
        JsonObject items4 = new JsonObject();
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("classification_code", "c123");
        JsonObject items5 = new JsonObject();
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("classification_code", "c123");
        JsonObject items6 = new JsonObject();
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("classification_code", "c123");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("is_multiply_by_count", true);
        items9.addProperty("required_count", 2);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("is_multiply_by_count", true);
        items16.addProperty("required_count", 2);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("subject_more_than_or_equal", 1000);
        items17.addProperty("subject_less_than", 5000);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("subject_more_than_or_equal", 1000);
        items18.addProperty("subject_less_than", 5000);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("subject_more_than_or_equal", 1000);
        items19.addProperty("subject_less_than", 5000);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("subject_more_than_or_equal", 1000);
        items20.addProperty("subject_less_than", 5000);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("subject_more_than_or_equal", 1000);
        items21.addProperty("subject_less_than", 5000);
        JsonObject items22 = new JsonObject();
        items22.addProperty("point_amount", 5);
        items22.addProperty("point_amount_unit", "percent");
        items22.addProperty("subject_more_than_or_equal", 1000);
        items22.addProperty("subject_less_than", 5000);
        JsonObject items23 = new JsonObject();
        items23.addProperty("point_amount", 5);
        items23.addProperty("point_amount_unit", "percent");
        items23.addProperty("subject_more_than_or_equal", 1000);
        items23.addProperty("subject_less_than", 5000);
        JsonObject items24 = new JsonObject();
        items24.addProperty("point_amount", 5);
        items24.addProperty("point_amount_unit", "percent");
        items24.addProperty("subject_more_than_or_equal", 1000);
        items24.addProperty("subject_less_than", 5000);
        Request request = new UpdateCampaign(
            "a48b494b-0a2b-4862-9036-ca01c57b3836"
        )
                .applicableShopIds(new String[]{"996e7fd7-1e6d-4c64-89b0-e32236e7550c","f5d3c82b-1c4c-46af-b430-2ec4f5d56077","4da95f1b-0272-4b50-a995-089b8eb4e3b3","42626c76-3628-4fde-877e-b7fea86f69fa","3b563728-4574-4433-978b-d102239becb8","c71425ab-978a-4a22-91b7-56068fd5981e","a10c0e8c-58db-42cd-baaa-ebc87dd16dc9","ad075c7b-87fe-4d2b-8ee4-b0daefd31e08"})
                .blacklistedProductRules(new Object[]{items,items2,items3,items4,items5,items6,items7,items8})
                .productBasedPointRules(new Object[]{items9,items10,items11,items12,items13,items14,items15,items16})
                .amountBasedPointRules(new Object[]{items17,items18,items19,items20,items21,items22,items23,items24})
                .subject("money")
                .setExclusive(true)
                .pointExpiresInDays(7170)
                .pointExpiresAt("2021-11-22T07:22:25.000000+09:00")
                .status("disabled")
                .description("Xjdi9zLhaJF")
                .event("payment")
                .priority(5522)
                .endsAt("2022-12-21T08:00:35.000000+09:00")
                .startsAt("2023-01-18T03:26:38.000000+09:00")
                .name("XBXUD6wthnLaRyY4Vd71bFw4ODJfReodKxr");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test15() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("product_code", "4912345678904");
        items.addProperty("classification_code", "c123");
        JsonObject items2 = new JsonObject();
        items2.addProperty("product_code", "4912345678904");
        items2.addProperty("classification_code", "c123");
        JsonObject items3 = new JsonObject();
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("classification_code", "c123");
        JsonObject items4 = new JsonObject();
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("classification_code", "c123");
        JsonObject items5 = new JsonObject();
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("classification_code", "c123");
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("is_multiply_by_count", true);
        items6.addProperty("required_count", 2);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("is_multiply_by_count", true);
        items7.addProperty("required_count", 2);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("is_multiply_by_count", true);
        items8.addProperty("required_count", 2);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("is_multiply_by_count", true);
        items9.addProperty("required_count", 2);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("subject_more_than_or_equal", 1000);
        items11.addProperty("subject_less_than", 5000);
        Request request = new UpdateCampaign(
            "a48b494b-0a2b-4862-9036-ca01c57b3836"
        )
                .applicableShopIds(new String[]{"41f435b7-5289-4161-88ca-681b4cfdf488","5c14877b-89e0-47d4-81b3-36fc6650ac06","4d6c0ab5-e678-412d-8d9c-8539b0b71a23","bf77910c-c14d-4f51-b9d0-8c73ba538ce4","8795aec5-bb62-4c0f-bbd5-d63c472baf88","de31e167-53f6-4e16-82c8-fd9e1161c58c"})
                .applicableDaysOfWeek(new Integer[]{4,6})
                .blacklistedProductRules(new Object[]{items,items2,items3,items4,items5})
                .productBasedPointRules(new Object[]{items6,items7,items8,items9,items10})
                .amountBasedPointRules(new Object[]{items11})
                .subject("all")
                .setExclusive(true)
                .pointExpiresInDays(4425)
                .pointExpiresAt("2023-04-03T04:26:34.000000+09:00")
                .status("disabled")
                .description("mpRfzaDDGJmVQFxxpRkajrCuxIK4D82VVLev93ZPmkBRy3CkaybN1u3vNWFknDSLdHs1noVrXg6nGZsEwBNOsm6CPnPaPwMe1AFqjMbUGJJvAaTmYeuqtyBI4TFsirEye9iJBLV6UpPggHgOSBa2x70oTwkLUod0IsPQ7rK7")
                .event("external-transaction")
                .priority(1142)
                .endsAt("2021-03-24T19:37:20.000000+09:00")
                .startsAt("2021-08-31T21:47:41.000000+09:00")
                .name("6LEGzRvxDcRa6USwZ654gPz8FV7GM9VqMVv2KkOvOcqNeBA1jHh6rZzKEquclo7KTG4RilfuwTgK6yAHH8HWEIfWbgyf9RYxB3h02bGiUUNmkHdSsEVlSDQ85n8i62xx5we0Aon3pXfPuwmV6Zj3Du0YtHJD22EpR1q96757HTPxArpAQoWwFkSJRucPBbNCdbvYaSjmdkGPjqTkPWdqTYnNo4xoCbne88btqYTFuFbuu");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test16() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("from", "12:00");
        items7.addProperty("to", "23:59");
        JsonObject items8 = new JsonObject();
        items8.addProperty("from", "12:00");
        items8.addProperty("to", "23:59");
        JsonObject items9 = new JsonObject();
        items9.addProperty("from", "12:00");
        items9.addProperty("to", "23:59");
        JsonObject items10 = new JsonObject();
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("classification_code", "c123");
        JsonObject items11 = new JsonObject();
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("classification_code", "c123");
        JsonObject items12 = new JsonObject();
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("classification_code", "c123");
        JsonObject items13 = new JsonObject();
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("classification_code", "c123");
        JsonObject items14 = new JsonObject();
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("classification_code", "c123");
        JsonObject items15 = new JsonObject();
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("classification_code", "c123");
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("is_multiply_by_count", true);
        items16.addProperty("required_count", 2);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("is_multiply_by_count", true);
        items17.addProperty("required_count", 2);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("subject_more_than_or_equal", 1000);
        items18.addProperty("subject_less_than", 5000);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("subject_more_than_or_equal", 1000);
        items19.addProperty("subject_less_than", 5000);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("subject_more_than_or_equal", 1000);
        items20.addProperty("subject_less_than", 5000);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("subject_more_than_or_equal", 1000);
        items21.addProperty("subject_less_than", 5000);
        JsonObject items22 = new JsonObject();
        items22.addProperty("point_amount", 5);
        items22.addProperty("point_amount_unit", "percent");
        items22.addProperty("subject_more_than_or_equal", 1000);
        items22.addProperty("subject_less_than", 5000);
        JsonObject items23 = new JsonObject();
        items23.addProperty("point_amount", 5);
        items23.addProperty("point_amount_unit", "percent");
        items23.addProperty("subject_more_than_or_equal", 1000);
        items23.addProperty("subject_less_than", 5000);
        JsonObject items24 = new JsonObject();
        items24.addProperty("point_amount", 5);
        items24.addProperty("point_amount_unit", "percent");
        items24.addProperty("subject_more_than_or_equal", 1000);
        items24.addProperty("subject_less_than", 5000);
        Request request = new UpdateCampaign(
            "a48b494b-0a2b-4862-9036-ca01c57b3836"
        )
                .applicableShopIds(new String[]{"34449ac8-540b-4c18-b23d-2ce25e9a3de7","e876b278-1d60-4df5-a547-190383476209","81681b9d-8b50-4b5a-9622-cd700ef60d4e","04b4169b-bdee-4bf8-b912-ecb8f2553de2","06fe112e-de75-4ac1-bc7e-65758b22588e","036d932c-bdb7-46d7-aa39-de1b48e5e1ba","6030394b-e05b-451c-88f3-13384a058485"})
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5,items6,items7,items8,items9})
                .applicableDaysOfWeek(new Integer[]{2,0,2})
                .blacklistedProductRules(new Object[]{items10,items11,items12,items13,items14,items15})
                .productBasedPointRules(new Object[]{items16,items17})
                .amountBasedPointRules(new Object[]{items18,items19,items20,items21,items22,items23,items24})
                .subject("all")
                .setExclusive(true)
                .pointExpiresInDays(8622)
                .pointExpiresAt("2021-11-28T17:31:00.000000+09:00")
                .status("disabled")
                .description("kWtXNn50Ilx4yFlhmw6AR")
                .event("external-transaction")
                .priority(6768)
                .endsAt("2022-12-27T19:26:59.000000+09:00")
                .startsAt("2023-12-19T22:49:29.000000+09:00")
                .name("OUUGANd1tGgUZhFWBaIfF25sYMKIWYgWJZS75YQTxx4GqdfHjVzjqV9TTc570nH8SgvnKqci2hZ2QRx82K0qVfJiqGHWIesnHqfarVGtrR32oO");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test17() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("classification_code", "c123");
        JsonObject items5 = new JsonObject();
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("classification_code", "c123");
        JsonObject items6 = new JsonObject();
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("classification_code", "c123");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("subject_more_than_or_equal", 1000);
        items15.addProperty("subject_less_than", 5000);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("subject_more_than_or_equal", 1000);
        items16.addProperty("subject_less_than", 5000);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("subject_more_than_or_equal", 1000);
        items17.addProperty("subject_less_than", 5000);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("subject_more_than_or_equal", 1000);
        items18.addProperty("subject_less_than", 5000);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("subject_more_than_or_equal", 1000);
        items19.addProperty("subject_less_than", 5000);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("subject_more_than_or_equal", 1000);
        items20.addProperty("subject_less_than", 5000);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("subject_more_than_or_equal", 1000);
        items21.addProperty("subject_less_than", 5000);
        JsonObject items22 = new JsonObject();
        items22.addProperty("point_amount", 5);
        items22.addProperty("point_amount_unit", "percent");
        items22.addProperty("subject_more_than_or_equal", 1000);
        items22.addProperty("subject_less_than", 5000);
        JsonObject items23 = new JsonObject();
        items23.addProperty("point_amount", 5);
        items23.addProperty("point_amount_unit", "percent");
        items23.addProperty("subject_more_than_or_equal", 1000);
        items23.addProperty("subject_less_than", 5000);
        JsonObject items24 = new JsonObject();
        items24.addProperty("point_amount", 5);
        items24.addProperty("point_amount_unit", "percent");
        items24.addProperty("subject_more_than_or_equal", 1000);
        items24.addProperty("subject_less_than", 5000);
        Request request = new UpdateCampaign(
            "a48b494b-0a2b-4862-9036-ca01c57b3836"
        )
                .applicableShopIds(new String[]{"92ca78fb-a973-404f-9f5c-844ae12a8052","d23abf45-e887-4317-9dd6-347da5db6d37","54d92c51-b863-4f33-b489-8c1d9151cfd9"})
                .minimumNumberOfProducts(8123)
                .applicableTimeRanges(new Object[]{items,items2,items3})
                .applicableDaysOfWeek(new Integer[]{3,1,5,4,5,6,1,6,2,4})
                .blacklistedProductRules(new Object[]{items4,items5,items6,items7,items8,items9})
                .productBasedPointRules(new Object[]{items10,items11,items12,items13,items14})
                .amountBasedPointRules(new Object[]{items15,items16,items17,items18,items19,items20,items21,items22,items23,items24})
                .subject("money")
                .setExclusive(true)
                .pointExpiresInDays(8362)
                .pointExpiresAt("2020-03-08T14:56:22.000000+09:00")
                .status("enabled")
                .description("FZZ2CuhGeLGst5IK8umZHlKGuauHyuSWKfZ7dNf7MrJ6dK6ahKwIBuGedPp9j5aUQjWRzXbTNPFf8wsWGSRwmw2ZVYGKsTtHIEvErthVl2irYSP28cOqITvrYwVfkf3L6R")
                .event("topup")
                .priority(6560)
                .endsAt("2021-11-21T03:20:58.000000+09:00")
                .startsAt("2021-11-19T09:47:35.000000+09:00")
                .name("OinJocPm8e4mCAaJGgE917wiKzDVDD9duiD1VUZTyvqQY2ZGv");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test18() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("classification_code", "c123");
        JsonObject items4 = new JsonObject();
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("classification_code", "c123");
        JsonObject items5 = new JsonObject();
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("classification_code", "c123");
        JsonObject items6 = new JsonObject();
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("classification_code", "c123");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("is_multiply_by_count", true);
        items9.addProperty("required_count", 2);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("subject_more_than_or_equal", 1000);
        items11.addProperty("subject_less_than", 5000);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("subject_more_than_or_equal", 1000);
        items12.addProperty("subject_less_than", 5000);
        Request request = new UpdateCampaign(
            "a48b494b-0a2b-4862-9036-ca01c57b3836"
        )
                .applicableShopIds(new String[]{"09d9830e-c554-47dc-8301-dc0f1e2e52f9","419ca407-8006-4c83-ace3-7de2f73e6b06","90545cb0-5a74-436e-8468-138ae27c9433","030a4eb0-f0c0-4204-b452-f992a0e86dc6"})
                .minimumNumberOfAmount(5037)
                .minimumNumberOfProducts(5669)
                .applicableTimeRanges(new Object[]{items,items2})
                .applicableDaysOfWeek(new Integer[]{6,6,5,5,1,4,5})
                .blacklistedProductRules(new Object[]{items3,items4,items5,items6,items7,items8})
                .productBasedPointRules(new Object[]{items9,items10})
                .amountBasedPointRules(new Object[]{items11,items12})
                .subject("money")
                .setExclusive(false)
                .pointExpiresInDays(5397)
                .pointExpiresAt("2022-12-01T02:09:58.000000+09:00")
                .status("disabled")
                .description("f484PHB5nD83TukTKlVm9ioqN3kTQQ1ksEimjVfSeSW0S95pByfcgP1qbRjRUCHRV")
                .event("topup")
                .priority(8441)
                .endsAt("2023-09-04T22:07:49.000000+09:00")
                .startsAt("2021-01-08T05:28:44.000000+09:00")
                .name("rMWzHvTF9V2U4VNcGeCdM81RAvyVL1VHWvM9YUmG4ClaqJyHP6GDkCrFVFGltasgcJY2t8twec8rU86LdQiScaxxF8zZ8uU7me5zM7lW1ZusqwCkyXnBPj");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test19() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("classification_code", "c123");
        JsonObject items5 = new JsonObject();
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("classification_code", "c123");
        JsonObject items6 = new JsonObject();
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("classification_code", "c123");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("classification_code", "c123");
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("is_multiply_by_count", true);
        items16.addProperty("required_count", 2);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("is_multiply_by_count", true);
        items17.addProperty("required_count", 2);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("subject_more_than_or_equal", 1000);
        items18.addProperty("subject_less_than", 5000);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("subject_more_than_or_equal", 1000);
        items19.addProperty("subject_less_than", 5000);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("subject_more_than_or_equal", 1000);
        items20.addProperty("subject_less_than", 5000);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("subject_more_than_or_equal", 1000);
        items21.addProperty("subject_less_than", 5000);
        JsonObject items22 = new JsonObject();
        items22.addProperty("point_amount", 5);
        items22.addProperty("point_amount_unit", "percent");
        items22.addProperty("subject_more_than_or_equal", 1000);
        items22.addProperty("subject_less_than", 5000);
        JsonObject items23 = new JsonObject();
        items23.addProperty("point_amount", 5);
        items23.addProperty("point_amount_unit", "percent");
        items23.addProperty("subject_more_than_or_equal", 1000);
        items23.addProperty("subject_less_than", 5000);
        Request request = new UpdateCampaign(
            "a48b494b-0a2b-4862-9036-ca01c57b3836"
        )
                .applicableShopIds(new String[]{"34726bde-b12a-44e5-a3ba-0ecc1665937f","6e977871-fd25-4de8-9ed0-9a2125b19c5d","cab4984b-7aef-44c6-b854-0e1cc908dc2c"})
                .minimumNumberForCombinationPurchase(4192)
                .minimumNumberOfAmount(164)
                .minimumNumberOfProducts(7380)
                .applicableTimeRanges(new Object[]{items,items2,items3})
                .applicableDaysOfWeek(new Integer[]{1,0,5})
                .blacklistedProductRules(new Object[]{items4,items5,items6,items7,items8,items9,items10})
                .productBasedPointRules(new Object[]{items11,items12,items13,items14,items15,items16,items17})
                .amountBasedPointRules(new Object[]{items18,items19,items20,items21,items22,items23})
                .subject("money")
                .setExclusive(true)
                .pointExpiresInDays(8609)
                .pointExpiresAt("2021-05-01T00:04:50.000000+09:00")
                .status("enabled")
                .description("nHY4ndF")
                .event("external-transaction")
                .priority(5917)
                .endsAt("2024-06-25T14:06:55.000000+09:00")
                .startsAt("2021-07-02T15:08:44.000000+09:00")
                .name("7A5hmjvHaPvnpQZj3ZQEnZkLJNB3SxcxNeZLAfXBtxO8L2aPbhswdOpqKbk9A6GiDvMXWlHtEjrOBuLNc5dgQAbBuR84EL8QuAUtaJFrlvl2JoOURhlqvIdPtKG2buZ2NPftNkqdcAYwC0hb433z1wtIBA3s3JNIZlmkCw9EelLbvnd9KtjtiEv5eWmTVeitRPDNVcGt78f");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test20() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("from", "12:00");
        items7.addProperty("to", "23:59");
        JsonObject items8 = new JsonObject();
        items8.addProperty("from", "12:00");
        items8.addProperty("to", "23:59");
        JsonObject items9 = new JsonObject();
        items9.addProperty("from", "12:00");
        items9.addProperty("to", "23:59");
        JsonObject items10 = new JsonObject();
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("classification_code", "c123");
        JsonObject items11 = new JsonObject();
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("classification_code", "c123");
        JsonObject items12 = new JsonObject();
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("classification_code", "c123");
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("is_multiply_by_count", true);
        items16.addProperty("required_count", 2);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("is_multiply_by_count", true);
        items17.addProperty("required_count", 2);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("product_code", "4912345678904");
        items18.addProperty("is_multiply_by_count", true);
        items18.addProperty("required_count", 2);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("product_code", "4912345678904");
        items19.addProperty("is_multiply_by_count", true);
        items19.addProperty("required_count", 2);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("subject_more_than_or_equal", 1000);
        items20.addProperty("subject_less_than", 5000);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("subject_more_than_or_equal", 1000);
        items21.addProperty("subject_less_than", 5000);
        JsonObject items22 = new JsonObject();
        items22.addProperty("point_amount", 5);
        items22.addProperty("point_amount_unit", "percent");
        items22.addProperty("subject_more_than_or_equal", 1000);
        items22.addProperty("subject_less_than", 5000);
        JsonObject items23 = new JsonObject();
        items23.addProperty("point_amount", 5);
        items23.addProperty("point_amount_unit", "percent");
        items23.addProperty("subject_more_than_or_equal", 1000);
        items23.addProperty("subject_less_than", 5000);
        Request request = new UpdateCampaign(
            "a48b494b-0a2b-4862-9036-ca01c57b3836"
        )
                .applicableShopIds(new String[]{"572eec58-a31d-4377-bf66-29ac37d7d75f","c527a4d0-399d-40aa-8649-b0617912fe39","56ec732d-dca9-4bbe-bf02-146b153da187"})
                .existInEachProductGroups(true)
                .minimumNumberForCombinationPurchase(5919)
                .minimumNumberOfAmount(8586)
                .minimumNumberOfProducts(8637)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5,items6,items7,items8,items9})
                .applicableDaysOfWeek(new Integer[]{6})
                .blacklistedProductRules(new Object[]{items10,items11,items12})
                .productBasedPointRules(new Object[]{items13,items14,items15,items16,items17,items18,items19})
                .amountBasedPointRules(new Object[]{items20,items21,items22,items23})
                .subject("all")
                .setExclusive(true)
                .pointExpiresInDays(1553)
                .pointExpiresAt("2023-01-05T17:31:02.000000+09:00")
                .status("enabled")
                .description("r5Zhlj6Q3eAN314DGq8Z4FkMYdwBhB4oyvtmVPLLYVy9qM1tBeEXzjadYOBUJFok7h2WV3iJCs8R3uEOVGSNUspQEMXeHr7WHHWvSaO59RF1sDr3bNuQL2HTPQXepTJqMLYnvPHFUKCfapqGOSegyAlP4nVWguQ7qlPMowowiU0iUt3R4Sr")
                .event("topup")
                .priority(5320)
                .endsAt("2021-08-12T02:11:56.000000+09:00")
                .startsAt("2023-08-06T20:17:29.000000+09:00")
                .name("4vpn3ywEG2uuLGaJFBBTi7kwT0auuAidGFymER8mzB7GrO5");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test21() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("product_code", "4912345678904");
        items2.addProperty("classification_code", "c123");
        JsonObject items3 = new JsonObject();
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("classification_code", "c123");
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("is_multiply_by_count", true);
        items4.addProperty("required_count", 2);
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("is_multiply_by_count", true);
        items5.addProperty("required_count", 2);
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("is_multiply_by_count", true);
        items6.addProperty("required_count", 2);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("is_multiply_by_count", true);
        items7.addProperty("required_count", 2);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("is_multiply_by_count", true);
        items8.addProperty("required_count", 2);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("is_multiply_by_count", true);
        items9.addProperty("required_count", 2);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("subject_more_than_or_equal", 1000);
        items11.addProperty("subject_less_than", 5000);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("subject_more_than_or_equal", 1000);
        items12.addProperty("subject_less_than", 5000);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("subject_more_than_or_equal", 1000);
        items13.addProperty("subject_less_than", 5000);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("subject_more_than_or_equal", 1000);
        items14.addProperty("subject_less_than", 5000);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("subject_more_than_or_equal", 1000);
        items15.addProperty("subject_less_than", 5000);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("subject_more_than_or_equal", 1000);
        items16.addProperty("subject_less_than", 5000);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("subject_more_than_or_equal", 1000);
        items17.addProperty("subject_less_than", 5000);
        Request request = new UpdateCampaign(
            "a48b494b-0a2b-4862-9036-ca01c57b3836"
        )
                .applicableShopIds(new String[]{"515b823c-c289-4d88-b295-d996ff2a4524","7ddb3af6-bf4c-4145-8312-428e007d7980","b4f998d9-ae7c-4bbc-b891-eae146ba66b6","6bc3a933-c169-4dd5-9b17-1799affbdb66","77a1686e-1ed4-41b9-8379-12c5d72f96d3","558d85de-f824-4b8c-af4d-49ba5a76a492"})
                .maxPointAmount(3386)
                .existInEachProductGroups(true)
                .minimumNumberForCombinationPurchase(8256)
                .minimumNumberOfAmount(7745)
                .minimumNumberOfProducts(4266)
                .applicableTimeRanges(new Object[]{items})
                .applicableDaysOfWeek(new Integer[]{3,5,3,6,3,1,6})
                .blacklistedProductRules(new Object[]{items2,items3})
                .productBasedPointRules(new Object[]{items4,items5,items6,items7,items8,items9,items10})
                .amountBasedPointRules(new Object[]{items11,items12,items13,items14,items15,items16,items17})
                .subject("money")
                .setExclusive(false)
                .pointExpiresInDays(5233)
                .pointExpiresAt("2021-06-02T17:37:13.000000+09:00")
                .status("enabled")
                .description("oN")
                .event("topup")
                .priority(5561)
                .endsAt("2023-06-20T00:44:29.000000+09:00")
                .startsAt("2020-08-05T19:39:57.000000+09:00")
                .name("Luj8O7xym30eLHOrllOnvyHwAw4MFYZ1J8AKHMSu7t6RRg6C5oYx79TJaAETwGCCDh4zgpz82gFj3JsXxFeujC2ewWnbu4F4PIwIhQ3kjlr7EoD0CSmN13OaRwXTnhTX0zJMazYl");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test22() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("from", "12:00");
        items7.addProperty("to", "23:59");
        JsonObject items8 = new JsonObject();
        items8.addProperty("from", "12:00");
        items8.addProperty("to", "23:59");
        JsonObject items9 = new JsonObject();
        items9.addProperty("from", "12:00");
        items9.addProperty("to", "23:59");
        JsonObject items10 = new JsonObject();
        items10.addProperty("from", "12:00");
        items10.addProperty("to", "23:59");
        JsonObject items11 = new JsonObject();
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("classification_code", "c123");
        JsonObject items12 = new JsonObject();
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("classification_code", "c123");
        JsonObject items13 = new JsonObject();
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("classification_code", "c123");
        JsonObject items14 = new JsonObject();
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("classification_code", "c123");
        JsonObject items15 = new JsonObject();
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("classification_code", "c123");
        JsonObject items16 = new JsonObject();
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("classification_code", "c123");
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("is_multiply_by_count", true);
        items17.addProperty("required_count", 2);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("product_code", "4912345678904");
        items18.addProperty("is_multiply_by_count", true);
        items18.addProperty("required_count", 2);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("product_code", "4912345678904");
        items19.addProperty("is_multiply_by_count", true);
        items19.addProperty("required_count", 2);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("product_code", "4912345678904");
        items20.addProperty("is_multiply_by_count", true);
        items20.addProperty("required_count", 2);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("product_code", "4912345678904");
        items21.addProperty("is_multiply_by_count", true);
        items21.addProperty("required_count", 2);
        JsonObject items22 = new JsonObject();
        items22.addProperty("point_amount", 5);
        items22.addProperty("point_amount_unit", "percent");
        items22.addProperty("product_code", "4912345678904");
        items22.addProperty("is_multiply_by_count", true);
        items22.addProperty("required_count", 2);
        JsonObject items23 = new JsonObject();
        items23.addProperty("point_amount", 5);
        items23.addProperty("point_amount_unit", "percent");
        items23.addProperty("product_code", "4912345678904");
        items23.addProperty("is_multiply_by_count", true);
        items23.addProperty("required_count", 2);
        JsonObject items24 = new JsonObject();
        items24.addProperty("point_amount", 5);
        items24.addProperty("point_amount_unit", "percent");
        items24.addProperty("product_code", "4912345678904");
        items24.addProperty("is_multiply_by_count", true);
        items24.addProperty("required_count", 2);
        JsonObject items25 = new JsonObject();
        items25.addProperty("point_amount", 5);
        items25.addProperty("point_amount_unit", "percent");
        items25.addProperty("product_code", "4912345678904");
        items25.addProperty("is_multiply_by_count", true);
        items25.addProperty("required_count", 2);
        JsonObject items26 = new JsonObject();
        items26.addProperty("point_amount", 5);
        items26.addProperty("point_amount_unit", "percent");
        items26.addProperty("subject_more_than_or_equal", 1000);
        items26.addProperty("subject_less_than", 5000);
        JsonObject items27 = new JsonObject();
        items27.addProperty("point_amount", 5);
        items27.addProperty("point_amount_unit", "percent");
        items27.addProperty("subject_more_than_or_equal", 1000);
        items27.addProperty("subject_less_than", 5000);
        JsonObject items28 = new JsonObject();
        items28.addProperty("point_amount", 5);
        items28.addProperty("point_amount_unit", "percent");
        items28.addProperty("subject_more_than_or_equal", 1000);
        items28.addProperty("subject_less_than", 5000);
        JsonObject items29 = new JsonObject();
        items29.addProperty("point_amount", 5);
        items29.addProperty("point_amount_unit", "percent");
        items29.addProperty("subject_more_than_or_equal", 1000);
        items29.addProperty("subject_less_than", 5000);
        JsonObject items30 = new JsonObject();
        items30.addProperty("point_amount", 5);
        items30.addProperty("point_amount_unit", "percent");
        items30.addProperty("subject_more_than_or_equal", 1000);
        items30.addProperty("subject_less_than", 5000);
        Request request = new UpdateCampaign(
            "a48b494b-0a2b-4862-9036-ca01c57b3836"
        )
                .applicableShopIds(new String[]{"04fdac6a-0245-43e7-8ce5-f11a5bf94988","792f4129-7aa9-40d8-b3e4-f4dbcca126af","cfbd7514-06d6-4e35-a3f2-45f0020b02c1","686643c9-d806-4208-b00c-dcc0690b3a34","6b9a97f0-d659-4d15-8030-77df2abe9566","24480644-6baf-4bca-820e-9511bd9a114f"})
                .maxTotalPointAmount(4890)
                .maxPointAmount(8446)
                .existInEachProductGroups(false)
                .minimumNumberForCombinationPurchase(9596)
                .minimumNumberOfAmount(7325)
                .minimumNumberOfProducts(3257)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5,items6,items7,items8,items9,items10})
                .applicableDaysOfWeek(new Integer[]{5,5,4,5,3,5})
                .blacklistedProductRules(new Object[]{items11,items12,items13,items14,items15,items16})
                .productBasedPointRules(new Object[]{items17,items18,items19,items20,items21,items22,items23,items24,items25})
                .amountBasedPointRules(new Object[]{items26,items27,items28,items29,items30})
                .subject("money")
                .setExclusive(false)
                .pointExpiresInDays(1887)
                .pointExpiresAt("2021-11-26T12:08:11.000000+09:00")
                .status("enabled")
                .description("OFa16J7QVHZJ7w3sPPB5q4KMO0NatryH")
                .event("payment")
                .priority(1576)
                .endsAt("2021-09-12T09:12:36.000000+09:00")
                .startsAt("2024-06-10T04:52:02.000000+09:00")
                .name("uDUnohOvJDzop21jZfizhCPdNNeARwNAb2Ga3SoJwDKx0CtcZoGwbcwLnt057HY5AZb54zhj6E");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test23() throws ConnectionError, ProcessingError {
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("classification_code", "c123");
        JsonObject items5 = new JsonObject();
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("classification_code", "c123");
        JsonObject items6 = new JsonObject();
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("classification_code", "c123");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("is_multiply_by_count", true);
        items8.addProperty("required_count", 2);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("is_multiply_by_count", true);
        items9.addProperty("required_count", 2);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("subject_more_than_or_equal", 1000);
        items14.addProperty("subject_less_than", 5000);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("subject_more_than_or_equal", 1000);
        items15.addProperty("subject_less_than", 5000);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("subject_more_than_or_equal", 1000);
        items16.addProperty("subject_less_than", 5000);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("subject_more_than_or_equal", 1000);
        items17.addProperty("subject_less_than", 5000);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("subject_more_than_or_equal", 1000);
        items18.addProperty("subject_less_than", 5000);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("subject_more_than_or_equal", 1000);
        items19.addProperty("subject_less_than", 5000);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("subject_more_than_or_equal", 1000);
        items20.addProperty("subject_less_than", 5000);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("subject_more_than_or_equal", 1000);
        items21.addProperty("subject_less_than", 5000);
        Request request = new UpdateCampaign(
            "a48b494b-0a2b-4862-9036-ca01c57b3836"
        )
                .applicableShopIds(new String[]{"c725bb6d-258d-4816-a49d-edcc2841b7f0","b8cd5e13-cab4-47f7-8028-df2f8b7f0326","341e9068-907a-47c4-9f86-e68c2fe5227b","5593b5e9-0843-4a24-b1b1-7b575724a704","38d639cf-3aa8-4202-8db5-e8ffad4eabb2"})
                .applicableAccountMetadata(applicable_account_metadata)
                .maxTotalPointAmount(5489)
                .maxPointAmount(390)
                .existInEachProductGroups(true)
                .minimumNumberForCombinationPurchase(8102)
                .minimumNumberOfAmount(6718)
                .minimumNumberOfProducts(2141)
                .applicableTimeRanges(new Object[]{items,items2,items3})
                .applicableDaysOfWeek(new Integer[]{4,5,0,0,5,3})
                .blacklistedProductRules(new Object[]{items4,items5,items6,items7})
                .productBasedPointRules(new Object[]{items8,items9,items10,items11,items12,items13})
                .amountBasedPointRules(new Object[]{items14,items15,items16,items17,items18,items19,items20,items21})
                .subject("all")
                .setExclusive(true)
                .pointExpiresInDays(8904)
                .pointExpiresAt("2021-11-05T03:15:42.000000+09:00")
                .status("enabled")
                .description("SVqSoAuU9v0eX")
                .event("external-transaction")
                .priority(7421)
                .endsAt("2021-06-08T17:30:46.000000+09:00")
                .startsAt("2022-01-18T14:05:49.000000+09:00")
                .name("IFJebAGtGitTK3QRDePs1BvACOhxcg1ci5EB29hCowaOjPhu5aMMCyLc6GIHHvBryDoy0F50yY4lbJmBOYcdCxRAkubthZMlGdCyfSSVljIFtEXzpMqx82gpUSiN9eU0UkFAdWhYUNTKPHKfAv7CwlZCl6UezIKWw3804HG1BumNS4RSELE1QFpP8HCAZNf9rKY8PVpiqsqjtNVtIJ8");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test24() throws ConnectionError, ProcessingError {
        JsonObject applicable_transaction_metadata = new JsonObject();
        applicable_transaction_metadata.addProperty("key", "rank");
        applicable_transaction_metadata.addProperty("value", "bronze");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("is_multiply_by_count", true);
        items8.addProperty("required_count", 2);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("is_multiply_by_count", true);
        items9.addProperty("required_count", 2);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("is_multiply_by_count", true);
        items16.addProperty("required_count", 2);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("is_multiply_by_count", true);
        items17.addProperty("required_count", 2);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("subject_more_than_or_equal", 1000);
        items18.addProperty("subject_less_than", 5000);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("subject_more_than_or_equal", 1000);
        items19.addProperty("subject_less_than", 5000);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("subject_more_than_or_equal", 1000);
        items20.addProperty("subject_less_than", 5000);
        Request request = new UpdateCampaign(
            "a48b494b-0a2b-4862-9036-ca01c57b3836"
        )
                .applicableShopIds(new String[]{"4529b506-3768-4e0c-b9c0-ef5248d7d0f1","0a576b1d-e0ee-44ec-aae9-bd951f961efb","d11b6c42-f314-450f-8e63-8ec5fc2ce8e1","3e152cba-de0a-4f17-af3a-2f29400f6a82","51c4194b-2268-4fa2-95f6-620209f51945"})
                .applicableTransactionMetadata(applicable_transaction_metadata)
                .applicableAccountMetadata(applicable_account_metadata)
                .maxTotalPointAmount(8227)
                .maxPointAmount(4184)
                .existInEachProductGroups(false)
                .minimumNumberForCombinationPurchase(5390)
                .minimumNumberOfAmount(8688)
                .minimumNumberOfProducts(8560)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5,items6})
                .applicableDaysOfWeek(new Integer[]{0,4,6,2,3,3,1,3})
                .blacklistedProductRules(new Object[]{items7})
                .productBasedPointRules(new Object[]{items8,items9,items10,items11,items12,items13,items14,items15,items16,items17})
                .amountBasedPointRules(new Object[]{items18,items19,items20})
                .subject("money")
                .setExclusive(false)
                .pointExpiresInDays(7783)
                .pointExpiresAt("2023-05-11T16:15:44.000000+09:00")
                .status("disabled")
                .description("xqqqrLzOtj6pcWEkV6")
                .event("external-transaction")
                .priority(4274)
                .endsAt("2020-05-09T05:47:02.000000+09:00")
                .startsAt("2020-07-16T07:17:07.000000+09:00")
                .name("zkOz9ayYxZde9ABT6gfq8JCor7vGcrSp2mpDj4GXg7o1hjQ2h15doP7AyzPdX63IhYlHiCVftLOvNNNV3Hcr3ae3YdDA0n71OzWU6qlzt8pZHbY4OdPDUHotMmDmH7Zx0yQJpgSYi6Yl1Vyce2Qcup6mwBospKvw73NR3Bh7nNXLF8N0upFLhzYbra78poNVieB0UCL6kwjp87Z4a9petASGQxy1d");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test25() throws ConnectionError, ProcessingError {
        JsonObject applicable_transaction_metadata = new JsonObject();
        applicable_transaction_metadata.addProperty("key", "rank");
        applicable_transaction_metadata.addProperty("value", "bronze");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("product_code", "4912345678904");
        items2.addProperty("classification_code", "c123");
        JsonObject items3 = new JsonObject();
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("classification_code", "c123");
        JsonObject items4 = new JsonObject();
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("classification_code", "c123");
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("is_multiply_by_count", true);
        items5.addProperty("required_count", 2);
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("is_multiply_by_count", true);
        items6.addProperty("required_count", 2);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("is_multiply_by_count", true);
        items7.addProperty("required_count", 2);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("is_multiply_by_count", true);
        items8.addProperty("required_count", 2);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("is_multiply_by_count", true);
        items9.addProperty("required_count", 2);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("subject_more_than_or_equal", 1000);
        items15.addProperty("subject_less_than", 5000);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("subject_more_than_or_equal", 1000);
        items16.addProperty("subject_less_than", 5000);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("subject_more_than_or_equal", 1000);
        items17.addProperty("subject_less_than", 5000);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("subject_more_than_or_equal", 1000);
        items18.addProperty("subject_less_than", 5000);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("subject_more_than_or_equal", 1000);
        items19.addProperty("subject_less_than", 5000);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("subject_more_than_or_equal", 1000);
        items20.addProperty("subject_less_than", 5000);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("subject_more_than_or_equal", 1000);
        items21.addProperty("subject_less_than", 5000);
        JsonObject items22 = new JsonObject();
        items22.addProperty("point_amount", 5);
        items22.addProperty("point_amount_unit", "percent");
        items22.addProperty("subject_more_than_or_equal", 1000);
        items22.addProperty("subject_less_than", 5000);
        Request request = new UpdateCampaign(
            "a48b494b-0a2b-4862-9036-ca01c57b3836"
        )
                .applicableShopIds(new String[]{"bfc949d1-e574-4ab4-ba04-f122256367f6","a72bf006-629c-4d4b-a3a6-c0df1b08b720","e1d0a778-c90e-43af-bf0e-abcf2fc06855"})
                .budgetCapsAmount(1553160991)
                .applicableTransactionMetadata(applicable_transaction_metadata)
                .applicableAccountMetadata(applicable_account_metadata)
                .maxTotalPointAmount(5869)
                .maxPointAmount(5606)
                .existInEachProductGroups(true)
                .minimumNumberForCombinationPurchase(6057)
                .minimumNumberOfAmount(7929)
                .minimumNumberOfProducts(8246)
                .applicableTimeRanges(new Object[]{items})
                .applicableDaysOfWeek(new Integer[]{2,5,0,0,5,5,4})
                .blacklistedProductRules(new Object[]{items2,items3,items4})
                .productBasedPointRules(new Object[]{items5,items6,items7,items8,items9,items10,items11,items12,items13,items14})
                .amountBasedPointRules(new Object[]{items15,items16,items17,items18,items19,items20,items21,items22})
                .subject("money")
                .setExclusive(false)
                .pointExpiresInDays(6799)
                .pointExpiresAt("2021-12-21T02:47:11.000000+09:00")
                .status("enabled")
                .description("WGqaFMmZiFv981JO2BT5lq97IUJYC5bgNjVt6YWRZbvDKPmUS3hJExTjWIW1HQqyaPA7d15dzr7ogU5QQF4Ea1gB5lSBrcGKBjWce4YbynjTYTkr3zWCfgHacilKubaUneeWIAsxxZZz")
                .event("payment")
                .priority(7773)
                .endsAt("2021-08-08T04:56:03.000000+09:00")
                .startsAt("2024-04-14T12:11:17.000000+09:00")
                .name("CmjPS9AVCrKPUmMyPUhqmZ6VtaVB6CSh5h50awTEvEg0VhMegy3EiVvcq5RxsYT8K59jpaptKJoEaHUDi54OXUfVoAhZR4ZOXYYF0zw09x0gencqHUvoFAzdtRbDcMIHxhlpwRmXxZgzllMZOdw3Tmm6TKb1GSoDRZW3sXyxqAtfhYvwLU2nKjLoNyUD5TSy7nT11jcaPprojQQD7E4uwEDEsdAfQ1fagSZ5us3yunqu3r3lMmvamk5nX");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test26() throws ConnectionError, ProcessingError {
        Request request = new UpdateCampaign(
            "a48b494b-0a2b-4862-9036-ca01c57b3836"
        )
                .blacklistedShopIds(new String[]{"f7280c77-dfbb-4643-a1ed-83f0db95eddf","b9f3ed5b-788e-4306-b282-6818f1617650","2eec8d5a-9809-4e53-8d0e-3a0e535428b0","692f79c4-53d5-4abf-8f38-0f136189a0cc","80c1b49b-d19a-4faf-9821-af813f26cd94","2e9136d3-a860-408d-8c22-c7b1026bcf59","e51bb83a-b1d3-453a-b8b0-a20d9a580d52","6dbf8291-aeb9-47a6-bbc6-d0acbe3b288e","465722ac-a1fd-47cb-a8e2-87332e5cff46","6bc94496-780d-48bd-803c-2af9b5e8e3cb"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test27() throws ConnectionError, ProcessingError {
        Request request = new UpdateCampaign(
            "a48b494b-0a2b-4862-9036-ca01c57b3836"
        )
                .blacklistedShopIds(new String[]{"88eec7ca-fcf2-4db5-9a82-aef68dafb486","eca9dc03-a731-45a5-ae56-31112530e24a"})
                .name("C0DJvUvpR8oFQU4CcB0nHyQAiIF489aXAGmbnZDl8EH9jH4ceWXsDd2Ag6rx2mAAM6edUYVHCOK1xPLFPixdeWsWmayxy2CnruRnXC0HUzBZXw1qRWCxXB889UfKZWmXEOmo92oreY4bNqwcdwBdCIXqdFGqPKBay90uTEPX1eA0fkUvJLCuVkSdGqDHe5M4yjlEf86w4joSoxTx");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test28() throws ConnectionError, ProcessingError {
        Request request = new UpdateCampaign(
            "a48b494b-0a2b-4862-9036-ca01c57b3836"
        )
                .blacklistedShopIds(new String[]{"4db39da3-9898-41fd-b82e-eba352ece7b2","d073433e-bdf1-4425-9b54-0f8b70d4b272","05ee23cb-45c9-4521-9a89-7f3fbfe68f33","fbba07e6-d927-4d65-8402-b9a8cca6991c","e2233499-b72e-4474-b8b0-c4cc277a6bdb","93d4e0f9-6b8c-4675-b311-e59498933ef8","b096d54a-c6d5-40ea-9762-8e69d6ec0af0"})
                .startsAt("2020-03-14T04:04:26.000000+09:00")
                .name("cnv6xce04WI49PnYF0sSwAF3jMsGO914kFRuFTN4pUyP5nQggm83hdc7mFRVG1tidM0aZdMJNOrzI55lT0EyOlpVhiqCs3uhxc7jaeDeqkHgRqMjuMYZr2pki8au8vkv4IGanF7NaixkZonSz7SRKDs9V2SJgVy0Ag0JIA5Oeuum41fBOubGatOQYcsoQ7Zi");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test29() throws ConnectionError, ProcessingError {
        Request request = new UpdateCampaign(
            "a48b494b-0a2b-4862-9036-ca01c57b3836"
        )
                .blacklistedShopIds(new String[]{"26278d55-3bc8-4ddd-8cf9-9b782ebadf8b","bc295d2f-cdbc-4efc-b160-e820fc779064","8cffa85b-1a3b-40d6-bf3d-442a6184c03c","a6722eac-d530-4095-84c8-4f4ad8f66ce4","88c6e2b2-dd17-4ad5-a272-adce44243206","7901ceeb-a904-47d4-86a8-fdda4457a98f","9cc5e7ba-56bf-45b2-9654-0bff028420ef"})
                .endsAt("2020-04-07T06:51:52.000000+09:00")
                .startsAt("2024-02-14T09:36:55.000000+09:00")
                .name("k72AbVGYH");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test30() throws ConnectionError, ProcessingError {
        Request request = new UpdateCampaign(
            "a48b494b-0a2b-4862-9036-ca01c57b3836"
        )
                .blacklistedShopIds(new String[]{"0fd88f49-8b13-4320-bc8b-bfe4944d9713","1cec2c7d-5f7b-4615-93e3-e072f07b0652","b1eaa750-061e-432d-be6a-8e8232dd59ce","3a0f9c8b-9da2-4223-a41a-f938d8c4eed3","8631ea8c-4d0b-4b91-b14a-7f987f681010","2c3ccb1a-addb-4cc5-821c-656f7d845d0a","07c2ee5c-31e3-4eb4-b05a-e2a3e8046bad","a127e9c8-7a07-4065-8bc6-4c70997313e6"})
                .priority(5574)
                .endsAt("2020-03-30T08:58:14.000000+09:00")
                .startsAt("2022-06-02T00:12:17.000000+09:00")
                .name("i3WlXdPxVJcVdztEH9Iabc8ATiehpjmjr2KHKgQWmWEROFKeDNC36k7kSMhHhmvv2UjjwBwHx2ATeuEUnMJZVfcCX3CSOZxB9qMIk7PlHqYICVa7WamX1EoMNwa");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test31() throws ConnectionError, ProcessingError {
        Request request = new UpdateCampaign(
            "a48b494b-0a2b-4862-9036-ca01c57b3836"
        )
                .blacklistedShopIds(new String[]{"2fa01027-3d7c-4bbe-a9de-1ca3120bbea3","43d958bb-be90-4fc8-9a7e-0db4928e438c","52783314-31cb-49db-9879-794ee05cca76","9b9b8574-bf6d-4c39-87fe-c8f5d2d127d7","3bc0e885-42dd-433d-85ee-2bea17cb0017","f28892fd-2f85-4e15-a5b2-e6bcb0ea3385","17e9d5bd-0298-4b39-8484-0057c36eb5cf"})
                .event("payment")
                .priority(3224)
                .endsAt("2022-08-28T11:53:49.000000+09:00")
                .startsAt("2023-05-08T23:39:52.000000+09:00")
                .name("c2vlviVf0NHTYVkwdDj1HX9JLmQAbjcx19VKrbnp7ypaSFFpNX1BumMDoetIFMGYNuM4MazENkNhnhQw38kIjkCP2a5I8tq1MPeKeo9TIaGBGRWgrKvDMZrlkVrQedXf4nckJKLdB5naeQlzPnxPFJdXckepo8UNXgLjFdXo7zjCd756Ey5gvTGSH9khZ5i9xVtjbwqgdjp1dKoBICD0M7TkBRhJdvHRhxwR");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test32() throws ConnectionError, ProcessingError {
        Request request = new UpdateCampaign(
            "a48b494b-0a2b-4862-9036-ca01c57b3836"
        )
                .blacklistedShopIds(new String[]{"6816cabe-5904-41aa-892d-3547511033d4","47579405-ec2b-4f5d-ba47-f62c11820468","3c2bef44-90a7-47a0-99fc-a26017f5b53d","0c5fae82-f40d-4780-9046-1afba30e176e","629af502-fff8-4a1b-8108-f7b030fbbe05","229c0e90-f900-4a7a-a3ec-fb096d1d28e3","64ff5db4-ffde-4280-a7d8-378121327771","38ae9522-65d3-40b1-a6f2-cc539f8c5da7","041b8fcf-430d-4bcf-8d09-6b9b22e65310"})
                .description("8a0j2vL5vzOiPchLnImc44NanTUgIetLzpGQylHJDY0OXM6irjxxPau")
                .event("topup")
                .priority(8603)
                .endsAt("2021-12-23T14:16:13.000000+09:00")
                .startsAt("2020-10-25T20:28:25.000000+09:00")
                .name("Ce9XNJObe3ohcYTxH7xYWgUItULAREeE8hs6wJo2kFUO9lvfIwJcoZNsyz");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test33() throws ConnectionError, ProcessingError {
        Request request = new UpdateCampaign(
            "a48b494b-0a2b-4862-9036-ca01c57b3836"
        )
                .blacklistedShopIds(new String[]{"1fd6413d-2ebd-40bd-9ef8-6a842a3f89f8","5cbd0726-619d-425b-acd4-44a489d0866a","f4e15367-a9a7-43c0-bfc9-a997bd511b16","1a85ec1b-5a7b-4364-90ca-2f6e1a13e516","90799d77-cde3-427f-88e3-ef447cfbe6f7","4947267e-8dcd-442c-81bb-d791298ba6ac","7dd42dca-3146-4968-92cb-e34472a2fe9b","dd219464-3e12-4bb4-8ad2-9b92efd117a4","7df669b1-1dd3-4887-b6ae-76f3b06ce9db"})
                .status("disabled")
                .description("PLlB3z7xfzbEoxgMpa9i2IBuyroc4VovcEjso5NguxlAYmeAhHaspmj3VVG13YZwWT1RAqXJHkNbwTXoM0OjLvkhJNpU1MbhbsvkEz3BJFffrpI25JAJLbhaiTIGQlZjizJzR02aeLVSuKKOURYJbxufgOuOhuxii8KX0Y6lyhYECW9ggIZuW1UjwKH")
                .event("external-transaction")
                .priority(9667)
                .endsAt("2024-03-09T14:34:28.000000+09:00")
                .startsAt("2021-03-07T19:32:59.000000+09:00")
                .name("SLeU0h0sYI3fjldq5aNNiDR5PIKTpHmqmFUQB4Ue");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test34() throws ConnectionError, ProcessingError {
        Request request = new UpdateCampaign(
            "a48b494b-0a2b-4862-9036-ca01c57b3836"
        )
                .blacklistedShopIds(new String[]{"a70d724f-fb27-4449-b14b-d8567d0ebdc4","1141e3ea-adc4-443a-9609-0efe9f8cacaf","7d835f66-f17d-462f-bdcf-7d49fde80f0c","b5e4332d-1207-4bee-98e7-c6d49d861de1"})
                .pointExpiresAt("2022-02-24T15:44:09.000000+09:00")
                .status("enabled")
                .description("qp3g0tGyaVQU4XRxM6n")
                .event("payment")
                .priority(7351)
                .endsAt("2022-11-22T18:06:03.000000+09:00")
                .startsAt("2020-11-06T07:16:24.000000+09:00")
                .name("HfEtgqnwKMF4PnuG9iwCLLp5eN76E6walmuK0MdLlhR8rPjEW7JggusNrh05SlVwhnLFjiZFx8LnkwfeOSVvInHBXgCwkFHDOngfuYXdOnERkdkOnPVhOrryIaI797EELA0tDa7lmbAt6WnzeIkBaTBJ");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test35() throws ConnectionError, ProcessingError {
        Request request = new UpdateCampaign(
            "a48b494b-0a2b-4862-9036-ca01c57b3836"
        )
                .blacklistedShopIds(new String[]{"8eb53e1c-fc9f-498d-9ecb-dc706204948b","80e74436-15be-47ac-8891-d5496f3509ff","70ab6c2c-188f-4199-a525-c6956191975c","ca5309f5-40c9-47b8-b14d-0f66775940ee","08ec8c75-3280-4eaf-854e-0f4477c27ed0","8efc40fd-6eeb-4a61-b3da-dcc3317a8b33","1eb978d7-c433-46da-a632-99b553dd9b95","89c26fcd-1b6c-44a8-a27e-5c4ae95ed7a0","1980d8fc-387c-4815-ad54-8bc1b1d7e5df","241429b5-6226-4468-9006-92e889f813b5"})
                .pointExpiresInDays(3862)
                .pointExpiresAt("2022-12-22T09:21:29.000000+09:00")
                .status("disabled")
                .description("64KSGYXPtGEcYtiPgKicPjHiWgm")
                .event("topup")
                .priority(394)
                .endsAt("2021-08-18T01:21:16.000000+09:00")
                .startsAt("2022-02-20T21:12:19.000000+09:00")
                .name("dS7hkp1o58HLjnoN6m9C1eoucK1BQu5OvZYncHO9TYHrH72Ru1Te5YaoxiEvoNUMSZYMgHoz2Lo7L0o7JuIVnr1PYCL31iEuEeY2kMqRmeuZgxvVxMdKwtxIifXBMANXEP3nrs4lBqgUsv7THcpnkk0tfkXfJNy2wKEGPSwz1Hd0fkI4mCITaM3CXvjOgSfty4hMraJa1ubk8z0AvjG8A5APf7B8F");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test36() throws ConnectionError, ProcessingError {
        Request request = new UpdateCampaign(
            "a48b494b-0a2b-4862-9036-ca01c57b3836"
        )
                .blacklistedShopIds(new String[]{"be742c66-91fa-4a2f-806d-7354082d70cd","0e21ed31-261d-4e88-a619-55bd000ee03a","012d3ce8-abb1-49c3-bc35-fd203e1cfd6c"})
                .setExclusive(false)
                .pointExpiresInDays(343)
                .pointExpiresAt("2021-07-14T08:55:55.000000+09:00")
                .status("disabled")
                .description("755joLms248R6GgWcBbARINDdRvTmrc7Zr4eYO8YyjvwsLl7F7xEwtUKyg5TJfLGy")
                .event("external-transaction")
                .priority(93)
                .endsAt("2020-02-18T16:37:50.000000+09:00")
                .startsAt("2023-07-20T07:58:33.000000+09:00")
                .name("SoX3edhU41Zi4ChfZocafQ6LBvBZLEstjAg8tFRz5pKghvh9zEEsRfVerSjHbSZhetdaFiTdCEBgHYGP30etP1vRf6w9OVLDgkLJ1ylyOA8DXpRbyLgqG13WYF");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test37() throws ConnectionError, ProcessingError {
        Request request = new UpdateCampaign(
            "a48b494b-0a2b-4862-9036-ca01c57b3836"
        )
                .blacklistedShopIds(new String[]{"30217434-c104-4b7f-8a02-5ca56e7595c9","6fc3a407-64d4-4932-ad62-0d39cb45bbfa","dc06c488-1c21-4dde-a5fb-ac41b3d6cd9e"})
                .subject("money")
                .setExclusive(false)
                .pointExpiresInDays(525)
                .pointExpiresAt("2022-10-01T12:35:54.000000+09:00")
                .status("disabled")
                .description("J4AywDwkOto5cbDKM26guqor6CjfAZELSIlC9mXULwmMVE6slpTpt6OEKBXoYCBXZ39aqNlWBD4qg0aFNfZ8EobR44zEwgfsiAywvXthe9rh5GETQ5fZSqofasba7hXWcchjqW2")
                .event("payment")
                .priority(7319)
                .endsAt("2020-03-23T11:08:13.000000+09:00")
                .startsAt("2021-03-17T07:58:37.000000+09:00")
                .name("6DUBz8YvWwdVZpHhqq6Txi0mr8JeTcpuFA987TcE70XwewwUgSmq0P6FtwLSzBBdvvLdxptAKin0MxlEselg8GvPJUECnunyuNejIIAI62ggaVBCgged0So6c8obrdoDgf3qQ67WBqwnLAApJckXPc8vILccUquc52lYDGB59mKutvHN0A8DxiVEXIAAVTCttLNKds3qsF");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test38() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("subject_more_than_or_equal", 1000);
        items.addProperty("subject_less_than", 5000);
        JsonObject items2 = new JsonObject();
        items2.addProperty("point_amount", 5);
        items2.addProperty("point_amount_unit", "percent");
        items2.addProperty("subject_more_than_or_equal", 1000);
        items2.addProperty("subject_less_than", 5000);
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("subject_more_than_or_equal", 1000);
        items3.addProperty("subject_less_than", 5000);
        Request request = new UpdateCampaign(
            "a48b494b-0a2b-4862-9036-ca01c57b3836"
        )
                .blacklistedShopIds(new String[]{"ee96eda6-d829-4998-b400-9e4b99e5e9f0","31493e64-f681-4179-863b-8df570e0aac8","fc6b7d9f-01d1-44e4-87c9-aaf9ed2acec1","1bcda698-aab3-4926-8c89-9053cc9c5823","4188b091-e0a4-47c3-bf25-1d7579e599fc","0525edeb-3176-4b72-b58f-11dbc8bcc97f","a3cc9b9b-7e59-4909-a595-45fa6ae44f21","da50352e-ec3e-4e1d-a5a6-4a8bfac0ef22","e2615aca-1bad-4ef5-a9ab-7d482bbad104","3b99f0c5-4294-42dc-ba9b-d3f990da490a"})
                .amountBasedPointRules(new Object[]{items,items2,items3})
                .subject("money")
                .setExclusive(false)
                .pointExpiresInDays(5669)
                .pointExpiresAt("2021-10-24T20:37:27.000000+09:00")
                .status("enabled")
                .description("ZnBns9eqcHTvpJcNaG9Dc7UPJ0IbA5uN4dHcnLh67FPmv1AIlchObDQKidQa8qcnTGFAQ2CjkrR11iZWSDT2DWsp1fmhZ6FQzCuUqZuKzxrj2NqMxQezsFM48vPNxV2WUH6xUmU8ty7iFbZxjh0qmwU8nYFDUm9t49g")
                .event("topup")
                .priority(95)
                .endsAt("2022-03-10T14:45:51.000000+09:00")
                .startsAt("2021-08-12T08:20:05.000000+09:00")
                .name("AQhg8FgBjhXShfPvVNNsOxDevaWF6R2tRAYYv48wei1sRLEbLFKRmd2");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test39() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("product_code", "4912345678904");
        items.addProperty("is_multiply_by_count", true);
        items.addProperty("required_count", 2);
        JsonObject items2 = new JsonObject();
        items2.addProperty("point_amount", 5);
        items2.addProperty("point_amount_unit", "percent");
        items2.addProperty("product_code", "4912345678904");
        items2.addProperty("is_multiply_by_count", true);
        items2.addProperty("required_count", 2);
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("is_multiply_by_count", true);
        items3.addProperty("required_count", 2);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("is_multiply_by_count", true);
        items4.addProperty("required_count", 2);
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("is_multiply_by_count", true);
        items5.addProperty("required_count", 2);
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("is_multiply_by_count", true);
        items6.addProperty("required_count", 2);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("is_multiply_by_count", true);
        items7.addProperty("required_count", 2);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("is_multiply_by_count", true);
        items8.addProperty("required_count", 2);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("is_multiply_by_count", true);
        items9.addProperty("required_count", 2);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("subject_more_than_or_equal", 1000);
        items11.addProperty("subject_less_than", 5000);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("subject_more_than_or_equal", 1000);
        items12.addProperty("subject_less_than", 5000);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("subject_more_than_or_equal", 1000);
        items13.addProperty("subject_less_than", 5000);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("subject_more_than_or_equal", 1000);
        items14.addProperty("subject_less_than", 5000);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("subject_more_than_or_equal", 1000);
        items15.addProperty("subject_less_than", 5000);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("subject_more_than_or_equal", 1000);
        items16.addProperty("subject_less_than", 5000);
        Request request = new UpdateCampaign(
            "a48b494b-0a2b-4862-9036-ca01c57b3836"
        )
                .blacklistedShopIds(new String[]{"30baebb6-b86e-41ba-9331-3a9006333c4c","3701ea6d-173c-4fcc-b272-bb9ee24dd4ca","a6f52950-d9bc-4a5c-8f7a-7052614b2e6a"})
                .productBasedPointRules(new Object[]{items,items2,items3,items4,items5,items6,items7,items8,items9,items10})
                .amountBasedPointRules(new Object[]{items11,items12,items13,items14,items15,items16})
                .subject("money")
                .setExclusive(true)
                .pointExpiresInDays(6509)
                .pointExpiresAt("2022-10-30T18:55:29.000000+09:00")
                .status("enabled")
                .description("ZnRnb7zX6ASGqR24giWAuUZT6JyBVkOG6mudiEOymgtdo5tLys6BcLkQuPbi4GX6BCB66RqL74DRL9rES9t")
                .event("payment")
                .priority(3261)
                .endsAt("2021-12-23T22:11:15.000000+09:00")
                .startsAt("2021-03-12T11:10:53.000000+09:00")
                .name("hc2Oz7eES6qIoUBk");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test40() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("product_code", "4912345678904");
        items.addProperty("classification_code", "c123");
        JsonObject items2 = new JsonObject();
        items2.addProperty("product_code", "4912345678904");
        items2.addProperty("classification_code", "c123");
        JsonObject items3 = new JsonObject();
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("classification_code", "c123");
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("is_multiply_by_count", true);
        items4.addProperty("required_count", 2);
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("is_multiply_by_count", true);
        items5.addProperty("required_count", 2);
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("subject_more_than_or_equal", 1000);
        items6.addProperty("subject_less_than", 5000);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("subject_more_than_or_equal", 1000);
        items7.addProperty("subject_less_than", 5000);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("subject_more_than_or_equal", 1000);
        items8.addProperty("subject_less_than", 5000);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("subject_more_than_or_equal", 1000);
        items9.addProperty("subject_less_than", 5000);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("subject_more_than_or_equal", 1000);
        items10.addProperty("subject_less_than", 5000);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("subject_more_than_or_equal", 1000);
        items11.addProperty("subject_less_than", 5000);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("subject_more_than_or_equal", 1000);
        items12.addProperty("subject_less_than", 5000);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("subject_more_than_or_equal", 1000);
        items13.addProperty("subject_less_than", 5000);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("subject_more_than_or_equal", 1000);
        items14.addProperty("subject_less_than", 5000);
        Request request = new UpdateCampaign(
            "a48b494b-0a2b-4862-9036-ca01c57b3836"
        )
                .blacklistedShopIds(new String[]{"3be49b2e-7348-468d-afb8-b607ee468359","20792894-dfb9-4072-9a30-a47a230eb30d","2c3b351f-4ba0-4da9-a7f6-58b51588621f","539bb889-5835-4ef5-92d5-a213d9ad74d7"})
                .blacklistedProductRules(new Object[]{items,items2,items3})
                .productBasedPointRules(new Object[]{items4,items5})
                .amountBasedPointRules(new Object[]{items6,items7,items8,items9,items10,items11,items12,items13,items14})
                .subject("money")
                .setExclusive(false)
                .pointExpiresInDays(2189)
                .pointExpiresAt("2020-10-15T15:46:01.000000+09:00")
                .status("disabled")
                .description("3LYvI431uQzwlaWgJQNUlEgwQnWG1f5MLqdTur64rTiAa8GY8FQt2Rj3HpcuBJD8gOUbsi5Ak6j5KXruniuHu3tzpcwNzlM9r0gk")
                .event("external-transaction")
                .priority(1372)
                .endsAt("2023-02-17T23:35:31.000000+09:00")
                .startsAt("2020-12-24T22:51:02.000000+09:00")
                .name("1oFkkYTRgBTeXuV96AnIaxlDesQWpPWROpXVqHlZL3NPs4i9REiJtBHPwut0i1ClvttEIW4WiKD4kPucyoLXTeXnbsucX4");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test41() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("product_code", "4912345678904");
        items.addProperty("classification_code", "c123");
        JsonObject items2 = new JsonObject();
        items2.addProperty("product_code", "4912345678904");
        items2.addProperty("classification_code", "c123");
        JsonObject items3 = new JsonObject();
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("classification_code", "c123");
        JsonObject items4 = new JsonObject();
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("classification_code", "c123");
        JsonObject items5 = new JsonObject();
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("classification_code", "c123");
        JsonObject items6 = new JsonObject();
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("classification_code", "c123");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("is_multiply_by_count", true);
        items16.addProperty("required_count", 2);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("is_multiply_by_count", true);
        items17.addProperty("required_count", 2);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("product_code", "4912345678904");
        items18.addProperty("is_multiply_by_count", true);
        items18.addProperty("required_count", 2);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("subject_more_than_or_equal", 1000);
        items19.addProperty("subject_less_than", 5000);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("subject_more_than_or_equal", 1000);
        items20.addProperty("subject_less_than", 5000);
        Request request = new UpdateCampaign(
            "a48b494b-0a2b-4862-9036-ca01c57b3836"
        )
                .blacklistedShopIds(new String[]{"b1aaa974-91ec-44b0-b125-9205c20dbb5a","303e61ca-9bb5-45cd-9ed2-c37a6be9d8fd","f21929b6-db35-4e51-9162-3891a7430f0c","e8f917e9-630d-4db9-bc80-cd4cc6169037","007fcc6c-2d29-440a-8d4c-4fee52607a53","3b269cfb-00ca-4b7e-8e68-606bf08095fc","a19f4268-5ba4-4b73-b163-fc091db5ff43","16a792db-0793-4ecc-aad0-746978ac4674"})
                .applicableDaysOfWeek(new Integer[]{1})
                .blacklistedProductRules(new Object[]{items,items2,items3,items4,items5,items6,items7,items8,items9})
                .productBasedPointRules(new Object[]{items10,items11,items12,items13,items14,items15,items16,items17,items18})
                .amountBasedPointRules(new Object[]{items19,items20})
                .subject("money")
                .setExclusive(true)
                .pointExpiresInDays(7160)
                .pointExpiresAt("2023-11-08T04:15:58.000000+09:00")
                .status("enabled")
                .description("UbEjymFEOFGT")
                .event("external-transaction")
                .priority(4081)
                .endsAt("2021-05-12T04:55:12.000000+09:00")
                .startsAt("2022-10-09T16:13:42.000000+09:00")
                .name("uU62xYwfP7FgjG3Gpj8ltCQuaGXfOYseD11ewnagC2UqWscd4sBF6BK5hwAML1u6rwIwmrfRyOc6BQ9z");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test42() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("classification_code", "c123");
        JsonObject items5 = new JsonObject();
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("classification_code", "c123");
        JsonObject items6 = new JsonObject();
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("classification_code", "c123");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("is_multiply_by_count", true);
        items9.addProperty("required_count", 2);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("subject_more_than_or_equal", 1000);
        items14.addProperty("subject_less_than", 5000);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("subject_more_than_or_equal", 1000);
        items15.addProperty("subject_less_than", 5000);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("subject_more_than_or_equal", 1000);
        items16.addProperty("subject_less_than", 5000);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("subject_more_than_or_equal", 1000);
        items17.addProperty("subject_less_than", 5000);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("subject_more_than_or_equal", 1000);
        items18.addProperty("subject_less_than", 5000);
        Request request = new UpdateCampaign(
            "a48b494b-0a2b-4862-9036-ca01c57b3836"
        )
                .blacklistedShopIds(new String[]{"8718ca55-e794-424b-93a4-947a09ffba1d","658e1f7b-0a14-486a-9cd4-0612927870b8","e6e93dc4-a620-40da-87cb-f26dc02f320f","7d34b280-0bf4-49ef-8df6-dc408687278c","3ce993ae-701b-416f-9017-18475b75bd35","8eafdd47-ff6c-412b-a417-b654fca88260"})
                .applicableTimeRanges(new Object[]{items,items2,items3})
                .applicableDaysOfWeek(new Integer[]{1})
                .blacklistedProductRules(new Object[]{items4,items5,items6,items7,items8})
                .productBasedPointRules(new Object[]{items9,items10,items11,items12,items13})
                .amountBasedPointRules(new Object[]{items14,items15,items16,items17,items18})
                .subject("money")
                .setExclusive(false)
                .pointExpiresInDays(6678)
                .pointExpiresAt("2023-03-06T23:38:33.000000+09:00")
                .status("disabled")
                .description("AX0HVyvFAsKe56j07D3qikduvd4T8lPnvr54BQFv1VePP5fKv7nFos7evju5wpYw5pRravTTG0U5W9Jtzqz5CJ40CP8VB4sqv1l8FzWQygvfOBWhW52qWb3s6JMgLJVkFOGYKUtNgwR73H8hurhPLaQJgVpIoH")
                .event("payment")
                .priority(7056)
                .endsAt("2024-03-18T14:52:58.000000+09:00")
                .startsAt("2024-02-24T11:48:13.000000+09:00")
                .name("OyVriCiTQLa3ONK18igV4RImbTloYynkECbCJKpntYj3jHzcLe7NxNVmHG4AskecxdTB6iRKbRH4OfBIOEG2mWlLpsXzTYgoEwy07zGYGse86QVmAIAzpaTLGhHYXIQJEdy9MnDc");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test43() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("product_code", "4912345678904");
        items2.addProperty("classification_code", "c123");
        JsonObject items3 = new JsonObject();
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("classification_code", "c123");
        JsonObject items4 = new JsonObject();
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("classification_code", "c123");
        JsonObject items5 = new JsonObject();
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("classification_code", "c123");
        JsonObject items6 = new JsonObject();
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("classification_code", "c123");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("is_multiply_by_count", true);
        items9.addProperty("required_count", 2);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("subject_more_than_or_equal", 1000);
        items13.addProperty("subject_less_than", 5000);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("subject_more_than_or_equal", 1000);
        items14.addProperty("subject_less_than", 5000);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("subject_more_than_or_equal", 1000);
        items15.addProperty("subject_less_than", 5000);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("subject_more_than_or_equal", 1000);
        items16.addProperty("subject_less_than", 5000);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("subject_more_than_or_equal", 1000);
        items17.addProperty("subject_less_than", 5000);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("subject_more_than_or_equal", 1000);
        items18.addProperty("subject_less_than", 5000);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("subject_more_than_or_equal", 1000);
        items19.addProperty("subject_less_than", 5000);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("subject_more_than_or_equal", 1000);
        items20.addProperty("subject_less_than", 5000);
        Request request = new UpdateCampaign(
            "a48b494b-0a2b-4862-9036-ca01c57b3836"
        )
                .blacklistedShopIds(new String[]{"bf610425-f032-4e51-b1bf-63e0f53bb463","91692855-9d93-4b77-b494-c6af773871a7","84e14b01-4e3a-4dc3-8a26-f16a76b81bc8","14573f16-e199-4bc2-a50c-95268b87f45b"})
                .minimumNumberOfProducts(2223)
                .applicableTimeRanges(new Object[]{items})
                .applicableDaysOfWeek(new Integer[]{3,5})
                .blacklistedProductRules(new Object[]{items2,items3,items4,items5,items6,items7,items8})
                .productBasedPointRules(new Object[]{items9,items10,items11,items12})
                .amountBasedPointRules(new Object[]{items13,items14,items15,items16,items17,items18,items19,items20})
                .subject("money")
                .setExclusive(true)
                .pointExpiresInDays(5174)
                .pointExpiresAt("2022-06-10T10:44:27.000000+09:00")
                .status("disabled")
                .description("k4CcOlPrxYagWz0TMEPLciI")
                .event("payment")
                .priority(5813)
                .endsAt("2023-11-12T23:46:20.000000+09:00")
                .startsAt("2021-05-27T19:28:41.000000+09:00")
                .name("eU3rkLg8oQcgQvhw2nCELU157HI5uZBsN7n32UZzk5q6rZMFHJek2Mlt6lX12hmATOqiBQnOlrVQtTAjEXWZGVQDPyGTiOkZsJ5k7sKbMwOkQ8GEUiAVFsuYGnbm3fBmPhFEgirzAg7PesPoPDqriEUbzCuD");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test44() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("from", "12:00");
        items7.addProperty("to", "23:59");
        JsonObject items8 = new JsonObject();
        items8.addProperty("from", "12:00");
        items8.addProperty("to", "23:59");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("classification_code", "c123");
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("is_multiply_by_count", true);
        items16.addProperty("required_count", 2);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("is_multiply_by_count", true);
        items17.addProperty("required_count", 2);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("product_code", "4912345678904");
        items18.addProperty("is_multiply_by_count", true);
        items18.addProperty("required_count", 2);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("product_code", "4912345678904");
        items19.addProperty("is_multiply_by_count", true);
        items19.addProperty("required_count", 2);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("subject_more_than_or_equal", 1000);
        items20.addProperty("subject_less_than", 5000);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("subject_more_than_or_equal", 1000);
        items21.addProperty("subject_less_than", 5000);
        JsonObject items22 = new JsonObject();
        items22.addProperty("point_amount", 5);
        items22.addProperty("point_amount_unit", "percent");
        items22.addProperty("subject_more_than_or_equal", 1000);
        items22.addProperty("subject_less_than", 5000);
        JsonObject items23 = new JsonObject();
        items23.addProperty("point_amount", 5);
        items23.addProperty("point_amount_unit", "percent");
        items23.addProperty("subject_more_than_or_equal", 1000);
        items23.addProperty("subject_less_than", 5000);
        JsonObject items24 = new JsonObject();
        items24.addProperty("point_amount", 5);
        items24.addProperty("point_amount_unit", "percent");
        items24.addProperty("subject_more_than_or_equal", 1000);
        items24.addProperty("subject_less_than", 5000);
        JsonObject items25 = new JsonObject();
        items25.addProperty("point_amount", 5);
        items25.addProperty("point_amount_unit", "percent");
        items25.addProperty("subject_more_than_or_equal", 1000);
        items25.addProperty("subject_less_than", 5000);
        JsonObject items26 = new JsonObject();
        items26.addProperty("point_amount", 5);
        items26.addProperty("point_amount_unit", "percent");
        items26.addProperty("subject_more_than_or_equal", 1000);
        items26.addProperty("subject_less_than", 5000);
        Request request = new UpdateCampaign(
            "a48b494b-0a2b-4862-9036-ca01c57b3836"
        )
                .blacklistedShopIds(new String[]{"9487fea9-6c23-4454-b051-24e518cdb41f","dc25cbbe-ab67-4798-a9f5-46663e907d73","4311941e-7fd1-4983-b9dd-c5f3afe40f98","b3561426-a6ec-4509-8a7d-3d7a91954e2a","1901f9a6-c38f-4fa9-8340-d96a3194dd7e","a05bc633-8a55-4c66-b107-1d2a020d2a9d","0085b98a-d41e-4520-a474-4ff20b6ae6d5","a23909f9-e804-427f-addd-f9f4b78757ba","1c9a8732-f523-493f-a419-648fa4047b09"})
                .minimumNumberOfAmount(1630)
                .minimumNumberOfProducts(6454)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5,items6,items7,items8})
                .applicableDaysOfWeek(new Integer[]{1,4,1,1,0,1,5,1,6,6})
                .blacklistedProductRules(new Object[]{items9,items10})
                .productBasedPointRules(new Object[]{items11,items12,items13,items14,items15,items16,items17,items18,items19})
                .amountBasedPointRules(new Object[]{items20,items21,items22,items23,items24,items25,items26})
                .subject("money")
                .setExclusive(false)
                .pointExpiresInDays(9499)
                .pointExpiresAt("2024-02-22T14:41:17.000000+09:00")
                .status("enabled")
                .description("2S47nDrzVWwnJkn8ta")
                .event("external-transaction")
                .priority(9012)
                .endsAt("2020-01-30T02:11:35.000000+09:00")
                .startsAt("2022-03-03T02:41:37.000000+09:00")
                .name("nFr1DWdU3DiWl2sgwRh9TtjBdDpvMIx6wThE7P3YhYxtd2t8AfyXZQSWpDmv1M9aHSyypqOBGofHLzii2RqSQy9Mpc0binctPIYewDIoHeCYa3yOrvx2GccFGznfjl5AHsZvTH1PlsX7Mc");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test45() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("classification_code", "c123");
        JsonObject items5 = new JsonObject();
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("classification_code", "c123");
        JsonObject items6 = new JsonObject();
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("classification_code", "c123");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("classification_code", "c123");
        JsonObject items11 = new JsonObject();
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("classification_code", "c123");
        JsonObject items12 = new JsonObject();
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("classification_code", "c123");
        JsonObject items13 = new JsonObject();
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("classification_code", "c123");
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("is_multiply_by_count", true);
        items16.addProperty("required_count", 2);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("is_multiply_by_count", true);
        items17.addProperty("required_count", 2);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("product_code", "4912345678904");
        items18.addProperty("is_multiply_by_count", true);
        items18.addProperty("required_count", 2);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("product_code", "4912345678904");
        items19.addProperty("is_multiply_by_count", true);
        items19.addProperty("required_count", 2);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("product_code", "4912345678904");
        items20.addProperty("is_multiply_by_count", true);
        items20.addProperty("required_count", 2);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("subject_more_than_or_equal", 1000);
        items21.addProperty("subject_less_than", 5000);
        JsonObject items22 = new JsonObject();
        items22.addProperty("point_amount", 5);
        items22.addProperty("point_amount_unit", "percent");
        items22.addProperty("subject_more_than_or_equal", 1000);
        items22.addProperty("subject_less_than", 5000);
        JsonObject items23 = new JsonObject();
        items23.addProperty("point_amount", 5);
        items23.addProperty("point_amount_unit", "percent");
        items23.addProperty("subject_more_than_or_equal", 1000);
        items23.addProperty("subject_less_than", 5000);
        JsonObject items24 = new JsonObject();
        items24.addProperty("point_amount", 5);
        items24.addProperty("point_amount_unit", "percent");
        items24.addProperty("subject_more_than_or_equal", 1000);
        items24.addProperty("subject_less_than", 5000);
        JsonObject items25 = new JsonObject();
        items25.addProperty("point_amount", 5);
        items25.addProperty("point_amount_unit", "percent");
        items25.addProperty("subject_more_than_or_equal", 1000);
        items25.addProperty("subject_less_than", 5000);
        JsonObject items26 = new JsonObject();
        items26.addProperty("point_amount", 5);
        items26.addProperty("point_amount_unit", "percent");
        items26.addProperty("subject_more_than_or_equal", 1000);
        items26.addProperty("subject_less_than", 5000);
        JsonObject items27 = new JsonObject();
        items27.addProperty("point_amount", 5);
        items27.addProperty("point_amount_unit", "percent");
        items27.addProperty("subject_more_than_or_equal", 1000);
        items27.addProperty("subject_less_than", 5000);
        JsonObject items28 = new JsonObject();
        items28.addProperty("point_amount", 5);
        items28.addProperty("point_amount_unit", "percent");
        items28.addProperty("subject_more_than_or_equal", 1000);
        items28.addProperty("subject_less_than", 5000);
        Request request = new UpdateCampaign(
            "a48b494b-0a2b-4862-9036-ca01c57b3836"
        )
                .blacklistedShopIds(new String[]{"8a2df92f-293e-429b-ac9d-c6f174f032d8","367d9fdb-3121-4102-85b3-6992f76d9ca3","f199f69e-ccc7-4da6-add8-4a2e7106c3d3","86a8e393-dd76-4716-b868-b295c5745e47"})
                .minimumNumberForCombinationPurchase(9758)
                .minimumNumberOfAmount(4202)
                .minimumNumberOfProducts(2345)
                .applicableTimeRanges(new Object[]{items,items2,items3})
                .applicableDaysOfWeek(new Integer[]{5,5})
                .blacklistedProductRules(new Object[]{items4,items5,items6,items7,items8,items9,items10,items11,items12,items13})
                .productBasedPointRules(new Object[]{items14,items15,items16,items17,items18,items19,items20})
                .amountBasedPointRules(new Object[]{items21,items22,items23,items24,items25,items26,items27,items28})
                .subject("all")
                .setExclusive(true)
                .pointExpiresInDays(2787)
                .pointExpiresAt("2021-01-12T20:28:45.000000+09:00")
                .status("enabled")
                .description("KzD7hLtM9o1pXE3r3vC5sk9d5THCqcZBAtokF8SAsn3sxgFytVgxBvHS22wC5vKdY7q10WLwcVR4u1LdkQoWsaF1U15oLV6p3381gnjhNNMOdiltbhC")
                .event("external-transaction")
                .priority(9919)
                .endsAt("2021-08-06T18:43:32.000000+09:00")
                .startsAt("2023-01-24T17:45:15.000000+09:00")
                .name("w82k1jGoGEaMVHmQzDmKpXySEoEiGLNAIXIA3UJmEjnZxkk6aRkYBhrP3HlBpVC4WWOF7oXfbDeiSKmNBIfv04fvBed5KXSTB7yAJvJvlRTv367uOCwrGjLRRZc3VKwiqFPzSBJCAHrRbsORO0jyZK0UZqewSEPRTm2EqE1JRMkjNIeHvpYuahSRFx8R1");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test46() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("classification_code", "c123");
        JsonObject items11 = new JsonObject();
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("classification_code", "c123");
        JsonObject items12 = new JsonObject();
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("classification_code", "c123");
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("subject_more_than_or_equal", 1000);
        items16.addProperty("subject_less_than", 5000);
        Request request = new UpdateCampaign(
            "a48b494b-0a2b-4862-9036-ca01c57b3836"
        )
                .blacklistedShopIds(new String[]{"2d0ce39a-1400-4fee-b4ca-8cf5576d70fd","28f86c0a-c1b9-4fa9-a92c-e72b25dd80f5","241d30ec-62c9-413b-a618-303940aa1f5f","e6dbc413-9aa6-4cff-8183-2294638a8e5a"})
                .existInEachProductGroups(false)
                .minimumNumberForCombinationPurchase(8874)
                .minimumNumberOfAmount(6023)
                .minimumNumberOfProducts(8589)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5,items6})
                .applicableDaysOfWeek(new Integer[]{6,0,0,2,6,0,0,3})
                .blacklistedProductRules(new Object[]{items7,items8,items9,items10,items11,items12})
                .productBasedPointRules(new Object[]{items13,items14,items15})
                .amountBasedPointRules(new Object[]{items16})
                .subject("all")
                .setExclusive(true)
                .pointExpiresInDays(6470)
                .pointExpiresAt("2021-11-09T11:10:37.000000+09:00")
                .status("enabled")
                .description("Do8MSxlVBFAVYA7EfqHWJhuwpH4QTtl4p8CiAif8PF8gUijf6")
                .event("payment")
                .priority(6079)
                .endsAt("2022-01-14T04:57:57.000000+09:00")
                .startsAt("2022-05-07T21:43:08.000000+09:00")
                .name("WVv59lGV6nMLjyDPItPiPSy9lQyu2lFPoqjT5iDlTkdh4OE631QjthAooQf9skMyiCzjb1aixMkBGH9DotzkklwvqF5VUoDhnHNXXJLpfsU");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test47() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("from", "12:00");
        items7.addProperty("to", "23:59");
        JsonObject items8 = new JsonObject();
        items8.addProperty("from", "12:00");
        items8.addProperty("to", "23:59");
        JsonObject items9 = new JsonObject();
        items9.addProperty("from", "12:00");
        items9.addProperty("to", "23:59");
        JsonObject items10 = new JsonObject();
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("classification_code", "c123");
        JsonObject items11 = new JsonObject();
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("classification_code", "c123");
        JsonObject items12 = new JsonObject();
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("classification_code", "c123");
        JsonObject items13 = new JsonObject();
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("classification_code", "c123");
        JsonObject items14 = new JsonObject();
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("classification_code", "c123");
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("is_multiply_by_count", true);
        items16.addProperty("required_count", 2);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("is_multiply_by_count", true);
        items17.addProperty("required_count", 2);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("product_code", "4912345678904");
        items18.addProperty("is_multiply_by_count", true);
        items18.addProperty("required_count", 2);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("product_code", "4912345678904");
        items19.addProperty("is_multiply_by_count", true);
        items19.addProperty("required_count", 2);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("product_code", "4912345678904");
        items20.addProperty("is_multiply_by_count", true);
        items20.addProperty("required_count", 2);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("product_code", "4912345678904");
        items21.addProperty("is_multiply_by_count", true);
        items21.addProperty("required_count", 2);
        JsonObject items22 = new JsonObject();
        items22.addProperty("point_amount", 5);
        items22.addProperty("point_amount_unit", "percent");
        items22.addProperty("product_code", "4912345678904");
        items22.addProperty("is_multiply_by_count", true);
        items22.addProperty("required_count", 2);
        JsonObject items23 = new JsonObject();
        items23.addProperty("point_amount", 5);
        items23.addProperty("point_amount_unit", "percent");
        items23.addProperty("subject_more_than_or_equal", 1000);
        items23.addProperty("subject_less_than", 5000);
        JsonObject items24 = new JsonObject();
        items24.addProperty("point_amount", 5);
        items24.addProperty("point_amount_unit", "percent");
        items24.addProperty("subject_more_than_or_equal", 1000);
        items24.addProperty("subject_less_than", 5000);
        JsonObject items25 = new JsonObject();
        items25.addProperty("point_amount", 5);
        items25.addProperty("point_amount_unit", "percent");
        items25.addProperty("subject_more_than_or_equal", 1000);
        items25.addProperty("subject_less_than", 5000);
        JsonObject items26 = new JsonObject();
        items26.addProperty("point_amount", 5);
        items26.addProperty("point_amount_unit", "percent");
        items26.addProperty("subject_more_than_or_equal", 1000);
        items26.addProperty("subject_less_than", 5000);
        JsonObject items27 = new JsonObject();
        items27.addProperty("point_amount", 5);
        items27.addProperty("point_amount_unit", "percent");
        items27.addProperty("subject_more_than_or_equal", 1000);
        items27.addProperty("subject_less_than", 5000);
        Request request = new UpdateCampaign(
            "a48b494b-0a2b-4862-9036-ca01c57b3836"
        )
                .blacklistedShopIds(new String[]{"56550e08-46a6-43c8-9e3e-2b34ba5d1f17","73aa6f8d-7f1f-4191-bdfc-466b43f7da52","40a9eb2e-e556-4d85-b54a-9402ea93ce60","5d7fa24a-34b2-45db-8116-2b0ad2980581","93053fdd-a78e-4283-a0af-b105a2a4ca63","d5505c72-aab4-48ac-ba81-46f94a836010","d41cb44d-1572-4727-90eb-b001cae5b48f","b247f1ae-27a6-4670-90f3-2c8e62bfeff2"})
                .maxPointAmount(3473)
                .existInEachProductGroups(true)
                .minimumNumberForCombinationPurchase(8351)
                .minimumNumberOfAmount(7494)
                .minimumNumberOfProducts(2856)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5,items6,items7,items8,items9})
                .applicableDaysOfWeek(new Integer[]{1,5,1,6,5,0,6,4,4})
                .blacklistedProductRules(new Object[]{items10,items11,items12,items13,items14})
                .productBasedPointRules(new Object[]{items15,items16,items17,items18,items19,items20,items21,items22})
                .amountBasedPointRules(new Object[]{items23,items24,items25,items26,items27})
                .subject("money")
                .setExclusive(true)
                .pointExpiresInDays(3684)
                .pointExpiresAt("2020-08-21T20:13:11.000000+09:00")
                .status("disabled")
                .description("wOGHTdU4pWyOiSAaNLSSHVNCkrOE5L7Vk2LmFM2pUUmX6ZI9sc2DcnWfYeGXAA7u9fPwZQsmRkmaiPOftkinyRkakIWpr4MHxSsQ7aLPhd6Thi0uWZIDXW71pDRTyucMuy1Qf4Uc7MtKiYYqyGtYSaJizFS4uSu0a4")
                .event("topup")
                .priority(7455)
                .endsAt("2022-08-26T16:29:35.000000+09:00")
                .startsAt("2022-02-14T02:40:20.000000+09:00")
                .name("DheHR1Y9G8IddeS02WVjxHoBaievFHKiCjkKESSuDI99sQ5rcnubgXbj3HLC54W5wdgFpGsHMDqa8QK");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test48() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("product_code", "4912345678904");
        items2.addProperty("classification_code", "c123");
        JsonObject items3 = new JsonObject();
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("classification_code", "c123");
        JsonObject items4 = new JsonObject();
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("classification_code", "c123");
        JsonObject items5 = new JsonObject();
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("classification_code", "c123");
        JsonObject items6 = new JsonObject();
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("classification_code", "c123");
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("is_multiply_by_count", true);
        items7.addProperty("required_count", 2);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("is_multiply_by_count", true);
        items8.addProperty("required_count", 2);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("is_multiply_by_count", true);
        items9.addProperty("required_count", 2);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("subject_more_than_or_equal", 1000);
        items10.addProperty("subject_less_than", 5000);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("subject_more_than_or_equal", 1000);
        items11.addProperty("subject_less_than", 5000);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("subject_more_than_or_equal", 1000);
        items12.addProperty("subject_less_than", 5000);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("subject_more_than_or_equal", 1000);
        items13.addProperty("subject_less_than", 5000);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("subject_more_than_or_equal", 1000);
        items14.addProperty("subject_less_than", 5000);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("subject_more_than_or_equal", 1000);
        items15.addProperty("subject_less_than", 5000);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("subject_more_than_or_equal", 1000);
        items16.addProperty("subject_less_than", 5000);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("subject_more_than_or_equal", 1000);
        items17.addProperty("subject_less_than", 5000);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("subject_more_than_or_equal", 1000);
        items18.addProperty("subject_less_than", 5000);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("subject_more_than_or_equal", 1000);
        items19.addProperty("subject_less_than", 5000);
        Request request = new UpdateCampaign(
            "a48b494b-0a2b-4862-9036-ca01c57b3836"
        )
                .blacklistedShopIds(new String[]{"20e333ce-cc8d-4d3d-ba64-5ace762ce22e","8743a32e-5da5-48b4-bb1d-f6cc1a47bcdc","4a3bb80d-76d0-433b-b181-2eea87af26b0","cba53393-a986-44e7-8502-443f9015f6ce","c0402201-8c27-4e74-a741-33a5ca548415","591dd113-6128-41e8-8dbb-1f4a92385bd3","f242963b-9355-42a6-afe3-d5816c7fc3f7","40c81ecd-aea9-440e-aa5c-e3f915186f68","e2ff863d-7239-4f3b-ac4a-e54d7dcdfda4","75c99210-275e-46ad-a552-0707a6b08644"})
                .maxTotalPointAmount(715)
                .maxPointAmount(2045)
                .existInEachProductGroups(false)
                .minimumNumberForCombinationPurchase(3625)
                .minimumNumberOfAmount(4420)
                .minimumNumberOfProducts(73)
                .applicableTimeRanges(new Object[]{items})
                .applicableDaysOfWeek(new Integer[]{4,4,1,3,0,1,2,4,5,4})
                .blacklistedProductRules(new Object[]{items2,items3,items4,items5,items6})
                .productBasedPointRules(new Object[]{items7,items8,items9})
                .amountBasedPointRules(new Object[]{items10,items11,items12,items13,items14,items15,items16,items17,items18,items19})
                .subject("all")
                .setExclusive(true)
                .pointExpiresInDays(5515)
                .pointExpiresAt("2022-01-02T10:59:54.000000+09:00")
                .status("disabled")
                .description("Mwst2qtdnU9vqrilrwpbaDbzDfERfmzLOtFaeUUSk9LyjfhPM7tXm9PED2J9VebLHCS0yOIdtJ7rS0yTvLZ0u64TuxCsw6VtGNJ4cZH4sNfhjXEodx0uJJATEG8b")
                .event("external-transaction")
                .priority(5496)
                .endsAt("2024-06-21T13:10:47.000000+09:00")
                .startsAt("2021-07-10T16:42:18.000000+09:00")
                .name("yoVJ2QSlnFvWai4kr");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test49() throws ConnectionError, ProcessingError {
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("classification_code", "c123");
        JsonObject items11 = new JsonObject();
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("classification_code", "c123");
        JsonObject items12 = new JsonObject();
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("classification_code", "c123");
        JsonObject items13 = new JsonObject();
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("classification_code", "c123");
        JsonObject items14 = new JsonObject();
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("classification_code", "c123");
        JsonObject items15 = new JsonObject();
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("classification_code", "c123");
        JsonObject items16 = new JsonObject();
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("classification_code", "c123");
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("is_multiply_by_count", true);
        items17.addProperty("required_count", 2);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("product_code", "4912345678904");
        items18.addProperty("is_multiply_by_count", true);
        items18.addProperty("required_count", 2);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("subject_more_than_or_equal", 1000);
        items19.addProperty("subject_less_than", 5000);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("subject_more_than_or_equal", 1000);
        items20.addProperty("subject_less_than", 5000);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("subject_more_than_or_equal", 1000);
        items21.addProperty("subject_less_than", 5000);
        Request request = new UpdateCampaign(
            "a48b494b-0a2b-4862-9036-ca01c57b3836"
        )
                .blacklistedShopIds(new String[]{"f61eebcc-7746-433e-9302-c771e58f8ceb","3e24560a-cb14-44c7-9164-9fe9b934240e","a458861d-92f8-47fd-8a8e-3dbf782fa874","13fb1ca1-c2fd-4731-b0f2-33f5c343e046","6059e2f2-6f8c-4f26-bc0d-33add0a40d11"})
                .applicableAccountMetadata(applicable_account_metadata)
                .maxTotalPointAmount(2640)
                .maxPointAmount(1255)
                .existInEachProductGroups(false)
                .minimumNumberForCombinationPurchase(999)
                .minimumNumberOfAmount(6867)
                .minimumNumberOfProducts(4079)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5,items6})
                .applicableDaysOfWeek(new Integer[]{0,1,1,0,5,1})
                .blacklistedProductRules(new Object[]{items7,items8,items9,items10,items11,items12,items13,items14,items15,items16})
                .productBasedPointRules(new Object[]{items17,items18})
                .amountBasedPointRules(new Object[]{items19,items20,items21})
                .subject("all")
                .setExclusive(false)
                .pointExpiresInDays(809)
                .pointExpiresAt("2024-02-02T04:38:55.000000+09:00")
                .status("enabled")
                .description("yRlitzqqFHgGCcgmymCCg8VWcbF1pNnXo96i52EeHFUi5eEJrdfW1bIOaSkdmA14JDKqLKhdyvUMGIQ1uYQIGYC0bGkSKlFJb")
                .event("payment")
                .priority(9543)
                .endsAt("2021-01-30T02:05:59.000000+09:00")
                .startsAt("2021-06-16T19:47:02.000000+09:00")
                .name("GVe");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test50() throws ConnectionError, ProcessingError {
        JsonObject applicable_transaction_metadata = new JsonObject();
        applicable_transaction_metadata.addProperty("key", "rank");
        applicable_transaction_metadata.addProperty("value", "bronze");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("from", "12:00");
        items7.addProperty("to", "23:59");
        JsonObject items8 = new JsonObject();
        items8.addProperty("from", "12:00");
        items8.addProperty("to", "23:59");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("classification_code", "c123");
        JsonObject items11 = new JsonObject();
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("classification_code", "c123");
        JsonObject items12 = new JsonObject();
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("classification_code", "c123");
        JsonObject items13 = new JsonObject();
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("classification_code", "c123");
        JsonObject items14 = new JsonObject();
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("classification_code", "c123");
        JsonObject items15 = new JsonObject();
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("classification_code", "c123");
        JsonObject items16 = new JsonObject();
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("classification_code", "c123");
        JsonObject items17 = new JsonObject();
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("classification_code", "c123");
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("product_code", "4912345678904");
        items18.addProperty("is_multiply_by_count", true);
        items18.addProperty("required_count", 2);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("product_code", "4912345678904");
        items19.addProperty("is_multiply_by_count", true);
        items19.addProperty("required_count", 2);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("product_code", "4912345678904");
        items20.addProperty("is_multiply_by_count", true);
        items20.addProperty("required_count", 2);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("product_code", "4912345678904");
        items21.addProperty("is_multiply_by_count", true);
        items21.addProperty("required_count", 2);
        JsonObject items22 = new JsonObject();
        items22.addProperty("point_amount", 5);
        items22.addProperty("point_amount_unit", "percent");
        items22.addProperty("product_code", "4912345678904");
        items22.addProperty("is_multiply_by_count", true);
        items22.addProperty("required_count", 2);
        JsonObject items23 = new JsonObject();
        items23.addProperty("point_amount", 5);
        items23.addProperty("point_amount_unit", "percent");
        items23.addProperty("product_code", "4912345678904");
        items23.addProperty("is_multiply_by_count", true);
        items23.addProperty("required_count", 2);
        JsonObject items24 = new JsonObject();
        items24.addProperty("point_amount", 5);
        items24.addProperty("point_amount_unit", "percent");
        items24.addProperty("product_code", "4912345678904");
        items24.addProperty("is_multiply_by_count", true);
        items24.addProperty("required_count", 2);
        JsonObject items25 = new JsonObject();
        items25.addProperty("point_amount", 5);
        items25.addProperty("point_amount_unit", "percent");
        items25.addProperty("product_code", "4912345678904");
        items25.addProperty("is_multiply_by_count", true);
        items25.addProperty("required_count", 2);
        JsonObject items26 = new JsonObject();
        items26.addProperty("point_amount", 5);
        items26.addProperty("point_amount_unit", "percent");
        items26.addProperty("product_code", "4912345678904");
        items26.addProperty("is_multiply_by_count", true);
        items26.addProperty("required_count", 2);
        JsonObject items27 = new JsonObject();
        items27.addProperty("point_amount", 5);
        items27.addProperty("point_amount_unit", "percent");
        items27.addProperty("product_code", "4912345678904");
        items27.addProperty("is_multiply_by_count", true);
        items27.addProperty("required_count", 2);
        JsonObject items28 = new JsonObject();
        items28.addProperty("point_amount", 5);
        items28.addProperty("point_amount_unit", "percent");
        items28.addProperty("subject_more_than_or_equal", 1000);
        items28.addProperty("subject_less_than", 5000);
        JsonObject items29 = new JsonObject();
        items29.addProperty("point_amount", 5);
        items29.addProperty("point_amount_unit", "percent");
        items29.addProperty("subject_more_than_or_equal", 1000);
        items29.addProperty("subject_less_than", 5000);
        JsonObject items30 = new JsonObject();
        items30.addProperty("point_amount", 5);
        items30.addProperty("point_amount_unit", "percent");
        items30.addProperty("subject_more_than_or_equal", 1000);
        items30.addProperty("subject_less_than", 5000);
        JsonObject items31 = new JsonObject();
        items31.addProperty("point_amount", 5);
        items31.addProperty("point_amount_unit", "percent");
        items31.addProperty("subject_more_than_or_equal", 1000);
        items31.addProperty("subject_less_than", 5000);
        JsonObject items32 = new JsonObject();
        items32.addProperty("point_amount", 5);
        items32.addProperty("point_amount_unit", "percent");
        items32.addProperty("subject_more_than_or_equal", 1000);
        items32.addProperty("subject_less_than", 5000);
        JsonObject items33 = new JsonObject();
        items33.addProperty("point_amount", 5);
        items33.addProperty("point_amount_unit", "percent");
        items33.addProperty("subject_more_than_or_equal", 1000);
        items33.addProperty("subject_less_than", 5000);
        JsonObject items34 = new JsonObject();
        items34.addProperty("point_amount", 5);
        items34.addProperty("point_amount_unit", "percent");
        items34.addProperty("subject_more_than_or_equal", 1000);
        items34.addProperty("subject_less_than", 5000);
        JsonObject items35 = new JsonObject();
        items35.addProperty("point_amount", 5);
        items35.addProperty("point_amount_unit", "percent");
        items35.addProperty("subject_more_than_or_equal", 1000);
        items35.addProperty("subject_less_than", 5000);
        JsonObject items36 = new JsonObject();
        items36.addProperty("point_amount", 5);
        items36.addProperty("point_amount_unit", "percent");
        items36.addProperty("subject_more_than_or_equal", 1000);
        items36.addProperty("subject_less_than", 5000);
        JsonObject items37 = new JsonObject();
        items37.addProperty("point_amount", 5);
        items37.addProperty("point_amount_unit", "percent");
        items37.addProperty("subject_more_than_or_equal", 1000);
        items37.addProperty("subject_less_than", 5000);
        Request request = new UpdateCampaign(
            "a48b494b-0a2b-4862-9036-ca01c57b3836"
        )
                .blacklistedShopIds(new String[]{"2c68b4c7-70f1-4639-97b8-f8d40091c4c3","97d6f21c-ccec-4b8f-824f-18a846c4e51b","171cfefe-e560-4cea-9bc1-3e63f586b5e9"})
                .applicableTransactionMetadata(applicable_transaction_metadata)
                .applicableAccountMetadata(applicable_account_metadata)
                .maxTotalPointAmount(117)
                .maxPointAmount(6452)
                .existInEachProductGroups(true)
                .minimumNumberForCombinationPurchase(3701)
                .minimumNumberOfAmount(4210)
                .minimumNumberOfProducts(3701)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5,items6,items7,items8})
                .applicableDaysOfWeek(new Integer[]{1,0,2,6,1})
                .blacklistedProductRules(new Object[]{items9,items10,items11,items12,items13,items14,items15,items16,items17})
                .productBasedPointRules(new Object[]{items18,items19,items20,items21,items22,items23,items24,items25,items26,items27})
                .amountBasedPointRules(new Object[]{items28,items29,items30,items31,items32,items33,items34,items35,items36,items37})
                .subject("all")
                .setExclusive(true)
                .pointExpiresInDays(2469)
                .pointExpiresAt("2024-01-29T10:40:56.000000+09:00")
                .status("enabled")
                .description("tMqAfAMwXma9eU3fE5dNEA2vyWrm5BgQ35PgoXhycq4KVBInj5HlIvwEfoHNUwb1RC5L57M1QYfEk7r")
                .event("topup")
                .priority(5945)
                .endsAt("2022-09-08T08:29:28.000000+09:00")
                .startsAt("2021-05-10T12:54:20.000000+09:00")
                .name("rGJyHjoJ1p1eQk4qJuG");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test51() throws ConnectionError, ProcessingError {
        JsonObject applicable_transaction_metadata = new JsonObject();
        applicable_transaction_metadata.addProperty("key", "rank");
        applicable_transaction_metadata.addProperty("value", "bronze");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("from", "12:00");
        items7.addProperty("to", "23:59");
        JsonObject items8 = new JsonObject();
        items8.addProperty("from", "12:00");
        items8.addProperty("to", "23:59");
        JsonObject items9 = new JsonObject();
        items9.addProperty("from", "12:00");
        items9.addProperty("to", "23:59");
        JsonObject items10 = new JsonObject();
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("classification_code", "c123");
        JsonObject items11 = new JsonObject();
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("classification_code", "c123");
        JsonObject items12 = new JsonObject();
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("classification_code", "c123");
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("is_multiply_by_count", true);
        items16.addProperty("required_count", 2);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("subject_more_than_or_equal", 1000);
        items17.addProperty("subject_less_than", 5000);
        Request request = new UpdateCampaign(
            "a48b494b-0a2b-4862-9036-ca01c57b3836"
        )
                .blacklistedShopIds(new String[]{"bc46e88d-352d-41e3-a217-4350b6eb4be7","3b01d6c5-37d6-49de-97a4-a3be078bf23f","73db1b30-dd6f-41e7-b381-3853f73ff3b5","12324d7e-99cc-4874-9d56-5271f9c457b8","326a325d-05ad-4063-8c72-01d177bb502e","23991295-6875-4c3b-b051-9bc1f021a217"})
                .budgetCapsAmount(930621140)
                .applicableTransactionMetadata(applicable_transaction_metadata)
                .applicableAccountMetadata(applicable_account_metadata)
                .maxTotalPointAmount(1252)
                .maxPointAmount(6063)
                .existInEachProductGroups(true)
                .minimumNumberForCombinationPurchase(9277)
                .minimumNumberOfAmount(3768)
                .minimumNumberOfProducts(8817)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5,items6,items7,items8,items9})
                .applicableDaysOfWeek(new Integer[]{6,6})
                .blacklistedProductRules(new Object[]{items10,items11,items12})
                .productBasedPointRules(new Object[]{items13,items14,items15,items16})
                .amountBasedPointRules(new Object[]{items17})
                .subject("money")
                .setExclusive(true)
                .pointExpiresInDays(4830)
                .pointExpiresAt("2021-08-10T05:55:17.000000+09:00")
                .status("disabled")
                .description("61HA8eTnM03O6rGrYJS27CLy108DZbtkfZpMhDGpJfYu5cOxfsA2Z6MwAXf2kEK4fqVBkSpprvLzJLT5mNEXDalgCvBASB770w8RatRoq9OcgbDn99CuLsYkxWUbQmrx72y69TrLcta9T7Apy0HFtqyaEDO8f3ELuS")
                .event("payment")
                .priority(6384)
                .endsAt("2024-05-04T09:06:49.000000+09:00")
                .startsAt("2022-01-05T07:26:22.000000+09:00")
                .name("ymhQSQaOGC5a3KEHp9WQIDnvV5tb8T9JGh1ciZPXc2yIpkHYQ29XfFRisbBkqo8hvgnXQCUbHVtikheW8QRACoXCRElkPanRygbSKO4bkemu2S9QScly6WGeUg");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
}
