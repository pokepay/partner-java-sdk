// DO NOT EDIT: File is generated by code generator.
package jp.pokepay.partnerapi;

import jp.pokepay.partnerapi.request.UpdateCampaign;
import jp.pokepay.partnerapi.request.Request;
import com.google.gson.JsonObject;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class UpdateCampaignTest {
    @Test
    void test0() throws ConnectionError, ProcessingError {
        Request request = new UpdateCampaign(
            "651b8291-64e3-477d-9712-e2ab96cd0d6c"
        )
                .applicableShopIds(new String[]{"201a1969-78aa-405f-9272-20f2c8525b2b","c9883fea-362f-4136-989e-1b24c370216d","92f100a0-437f-4bd8-84d9-54eff37a6571","a04274a7-1b56-4ec5-be9e-bc7f561e8376","e3a1bf5e-2bcb-4b76-a5ae-94f778977b33","7241d841-57e4-4ac5-b324-affbb550a20e","aeac5935-4568-4c47-a114-5f842f6464c4","5194a4cc-1089-4a7b-a075-819aeb378506","c213b519-fa61-4c53-bef0-74863e5ee907","559cc459-6d6c-46b1-9424-021d45703ac7"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test1() throws ConnectionError, ProcessingError {
        Request request = new UpdateCampaign(
            "651b8291-64e3-477d-9712-e2ab96cd0d6c"
        )
                .applicableShopIds(new String[]{"ec27c6fe-059a-4a24-82ba-180ac4dfcd13","f985c984-19e9-41f5-8567-5e834f78f167","c5501e17-c56c-430b-b82b-cd22f5516989","f7d3cc4a-6b10-454a-82c7-4792184ecaff","5e21c79d-ad74-4d30-bce4-7a2c8fca5be3","aef32150-c7e2-4019-a05c-c88f4dd576f4"})
                .name("c4uSkk26uSRwX6Rx7fOEoFSQiDYpTTgrywklVD4mELe2edQd6Mwu12UeT7ThuLLgJ9PT2zGkxOOzhTpPLn");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test2() throws ConnectionError, ProcessingError {
        Request request = new UpdateCampaign(
            "651b8291-64e3-477d-9712-e2ab96cd0d6c"
        )
                .applicableShopIds(new String[]{"483acffd-cfbf-4b3d-8c85-c451016291ae","7a0a289d-125c-447b-98e5-b9e14d9dd333","16d1250c-bae5-443e-9499-e527acb9f640","306fc1af-ccc2-45ec-90a3-b3b10963847a","01008ae1-e7fd-4e31-986e-2d3711d59dbd","f9e353c9-6e5b-4ce3-80bc-ba2113063257"})
                .startsAt("2023-09-14T01:59:29.000000Z")
                .name("MlrV1ey0F13qC7iArhwm76E35ql4X");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test3() throws ConnectionError, ProcessingError {
        Request request = new UpdateCampaign(
            "651b8291-64e3-477d-9712-e2ab96cd0d6c"
        )
                .applicableShopIds(new String[]{"6b54f766-9255-4615-a165-2bc0557be331","f47afcb4-61d7-4ede-988a-03629081e296","cdde2e74-fdb9-45b3-9f74-bf00327a6632","f81322b6-c1bb-440f-acfe-20be21e09007","d46ed64c-3ae9-4851-91c1-a787c42816ac","032dc94d-dc42-4ed9-ad78-c6b0bf371a35"})
                .endsAt("2022-12-06T01:23:38.000000Z")
                .startsAt("2022-09-02T03:49:21.000000Z")
                .name("BwLeryNecuIhUBXRQRCvkSHsmDbMU34aVyZLcCNEj4KngWmPwy7k0E27omWruIWs4TAGfq9ue8TvZwYbMntyIPzqAGarjc22UJafoQs8oM8ozozHv7pSUjn2vqwiu14DVHGOrsaIKsQ11QA0zf5QFhEcKjjKztGRK6K9KAPEUIedziHih60rhQZO78Ysa8FmX0ccAumcgyg4cqEaxSmm8kmOYz37PEcPNNiKvN5Ht8RLA9gh");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test4() throws ConnectionError, ProcessingError {
        Request request = new UpdateCampaign(
            "651b8291-64e3-477d-9712-e2ab96cd0d6c"
        )
                .applicableShopIds(new String[]{"fdcf6c13-1c86-4d5c-a518-18434304d6d4","9582de5b-88ab-4cca-83de-ff91296df797"})
                .priority(6098)
                .endsAt("2020-09-10T21:53:03.000000Z")
                .startsAt("2023-05-11T04:34:12.000000Z")
                .name("Xhb0oNXnX7lDuTKN6ygQ5h7kN0paU2HC64wcGrUcdcRO2Sa3zE9qA6JlqvTos7SrIAldP5taDahvoqIf3H7H22Xm9qyhmrKIzglEahNrgMO9grD73ccOw2h3Fa222nHBaN6510bAHdVRRVqtJb7GLA5jeThW5qr3yEd4dXuL0rYsAz43Mmx6hv0Ug3INp6i2B7flubMg8I3PFzXHSWu8");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test5() throws ConnectionError, ProcessingError {
        Request request = new UpdateCampaign(
            "651b8291-64e3-477d-9712-e2ab96cd0d6c"
        )
                .applicableShopIds(new String[]{"d5365c8b-e163-4569-af2b-de2dfaec44bc","98e228e8-4e71-4c57-be20-16f78e636ed7","8648f6cb-c1cc-4c49-83f3-56e748017178","06817d6f-7a92-44f8-85a1-f5dce51de9ab"})
                .event("topup")
                .priority(6681)
                .endsAt("2023-08-27T09:21:44.000000Z")
                .startsAt("2020-11-20T17:43:31.000000Z")
                .name("2441blMtSOZHoWLqvzthoXVcLebdhYmokN15vn0WBXfGwW2mMW1f9b8gICLPqqow4qG8fKRsijZT9ACbFh");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test6() throws ConnectionError, ProcessingError {
        Request request = new UpdateCampaign(
            "651b8291-64e3-477d-9712-e2ab96cd0d6c"
        )
                .applicableShopIds(new String[]{"7dd0ce91-f283-4553-ba22-f4629de2de29","d5a73d2a-6055-41ee-822f-8dbde68baa8b","67c00c97-03d8-4b08-9e20-7864a61202d1","4686d170-b28b-416d-9070-7b5c71ab0a8b"})
                .description("FqiJvOHOlQFLdxOm16oejI9dat1CLgQoRlzuyxB2QGrCPmQ415Et2SGqgy7Wowcm3CmFfxpyC")
                .event("topup")
                .priority(5744)
                .endsAt("2023-12-01T20:45:20.000000Z")
                .startsAt("2023-01-22T11:16:39.000000Z")
                .name("iVloAtynLsPgO9CFz87kImOLWynZ7sTqSkOWWDLZmiyY4qSDce16GC4wPtLkv3o4mk88yYjRj6ppJLnlec8JObXuRsPVeFJcsOCB9dZH0k0NKC7bYH6IQhPn4Xu22OkprhqhwvNpMEMbpSnLulsX8V7SnJwOTksCozm6o1k9oepRB7yq0Oa1SzxnfEtxAkEm7sWqtjzoUhtWxAFotkA3GwpJ6pUWjvsxF7sC23pAVbXivHZtrIAyP3B3n1m");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test7() throws ConnectionError, ProcessingError {
        Request request = new UpdateCampaign(
            "651b8291-64e3-477d-9712-e2ab96cd0d6c"
        )
                .applicableShopIds(new String[]{"8219900a-ff35-4db1-8208-6c6d4204ff94","09bea70e-f703-4550-829b-e2fb4ac21c2e","e9418e55-33dd-4bfe-b864-e33a43296e54","87b52509-7f44-4fa6-b796-4710c3fd01e2","16d23a3d-ebee-43a2-bb0f-f1d82d66b091"})
                .status("enabled")
                .description("r8l3hCw6Snm9mfcT5cLUh34lWYk1AXf6CZiEJmgnIHDOUd6m8h")
                .event("external-transaction")
                .priority(5511)
                .endsAt("2023-05-29T19:29:06.000000Z")
                .startsAt("2023-03-30T02:43:56.000000Z")
                .name("pqS572AEF2Ig4ikrPHEQKtfhnULfkSB8hVVRhZgs0ShDA1T4kxBhv1AOy0nxwzXXsopchwGQjGjB8p2sVlc1F7AjO7bJtO7Dnnc0m9rCGM5hvlyZ4zlX8tOl1gapEcvHpCxJHTvEJuFQd");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test8() throws ConnectionError, ProcessingError {
        Request request = new UpdateCampaign(
            "651b8291-64e3-477d-9712-e2ab96cd0d6c"
        )
                .applicableShopIds(new String[]{"8179b6eb-ff31-4230-9c4f-efb1d1bcf042","6663101b-13a4-495d-a90e-52826613c367"})
                .pointExpiresAt("2021-02-12T12:09:31.000000Z")
                .status("enabled")
                .description("vU99ROsTZK65zQOhilbvDcAlCpIpPo9knGna2qU0GmaUmeizgJ6BwqETnaq5BggeTTsTdXg3gtXl8b4nZOZsr1VPBj7ivp8ue6C3vcL7BXf3IHjK0XiCg0zcQRlonr1N4IocuK")
                .event("payment")
                .priority(8099)
                .endsAt("2021-06-04T04:52:57.000000Z")
                .startsAt("2023-10-26T09:20:26.000000Z")
                .name("1hdXC");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test9() throws ConnectionError, ProcessingError {
        Request request = new UpdateCampaign(
            "651b8291-64e3-477d-9712-e2ab96cd0d6c"
        )
                .applicableShopIds(new String[]{"ce9bd3f9-0ac1-404c-a84c-048ab60ec391","c6d5b424-268c-4c73-a4d0-91daedfb3cdc","d84eca09-7d2d-49b4-905c-99f8f8de07c5","8b8a0e95-b6da-425b-8261-974cd501af39","cc89b6dc-ef85-4e8c-a48a-f15c0593c167","7c402791-4bd0-4ba2-84dd-4f0cb1a42097","6c29d3ef-d045-470c-b5d0-d616df168c8f","7c26bc6e-854f-4660-9278-f0539e9e769f"})
                .pointExpiresInDays(6234)
                .pointExpiresAt("2020-02-10T10:51:05.000000Z")
                .status("enabled")
                .description("IBQUZMwQEKQp536z2WYA1sx132uYpl")
                .event("external-transaction")
                .priority(9745)
                .endsAt("2022-04-24T08:50:34.000000Z")
                .startsAt("2020-09-05T17:02:02.000000Z")
                .name("tFpjBFQy9bZmz7mGiFtXmRSje5IwYSIqDRQ8l1f3l8HQkQuvmK2Ptks2ZcRpli1kcYUjdKenDWjLTaaBosz7aBykLG1RzGMmx1hSkje9X0kmePd8GXi2");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test10() throws ConnectionError, ProcessingError {
        Request request = new UpdateCampaign(
            "651b8291-64e3-477d-9712-e2ab96cd0d6c"
        )
                .applicableShopIds(new String[]{"ca05f932-ed23-42ca-b7ab-ab3a2d0b9bb1","88e8f9e9-d3e4-4441-b894-78e39e4345d1","88ffbeb9-b0d2-4284-9b8b-685164b175e3","ab4472c1-fdb9-43b3-8526-ee8f1983136a"})
                .setExclusive(true)
                .pointExpiresInDays(7419)
                .pointExpiresAt("2021-08-22T22:07:08.000000Z")
                .status("enabled")
                .description("VE1oN8GZytUXsp14vePeJ")
                .event("external-transaction")
                .priority(7933)
                .endsAt("2022-09-08T05:55:52.000000Z")
                .startsAt("2021-05-01T18:01:55.000000Z")
                .name("1SmSe7z9uXJe9aRBNGFiXbom9IOMRvPLFSPNSfRkv8Et2jCeNHdXqCXUrpWRIEnGneOjH6PTi68jf1Ll0O4t8yu2YY3amcb");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test11() throws ConnectionError, ProcessingError {
        Request request = new UpdateCampaign(
            "651b8291-64e3-477d-9712-e2ab96cd0d6c"
        )
                .applicableShopIds(new String[]{"2cd7121d-8bd2-4e16-9646-6a19e77f4543"})
                .subject("all")
                .setExclusive(true)
                .pointExpiresInDays(7428)
                .pointExpiresAt("2020-08-10T07:46:38.000000Z")
                .status("disabled")
                .description("WEFlMAhGqMbfoqHBJlao6arWtW2Kf2i4")
                .event("topup")
                .priority(3913)
                .endsAt("2021-04-27T04:59:45.000000Z")
                .startsAt("2023-08-03T21:04:35.000000Z")
                .name("wQjuFWx2kNI9qHm3gWQVGMbEKu4AfuwweTMrw4f2dzO7lqy4kEKJ1Q7c8C0SZpOWKljojyXNatscwZjWuBesyFuc4sWKFJnLD7m3pQpjDhF5ByJUZoKtqULctVH6JYk9cBHdXfv4mxi0ybLSzTGhHvgOYEOxJ03xV3nSGPvtC19a5");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test12() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("subject_more_than_or_equal", 1000);
        items.addProperty("subject_less_than", 5000);
        Request request = new UpdateCampaign(
            "651b8291-64e3-477d-9712-e2ab96cd0d6c"
        )
                .applicableShopIds(new String[]{"45af3000-bd9c-4fdb-85f0-277948842199","4579f524-c4c2-4328-a31f-22e443c598e8","10e80104-025d-4066-84f4-aeddcf984e8d"})
                .amountBasedPointRules(new Object[]{items})
                .subject("all")
                .setExclusive(false)
                .pointExpiresInDays(4348)
                .pointExpiresAt("2023-04-11T03:47:25.000000Z")
                .status("enabled")
                .description("gxIW5ljI6yfgW8z")
                .event("external-transaction")
                .priority(1582)
                .endsAt("2024-07-02T19:52:32.000000Z")
                .startsAt("2023-06-26T13:57:53.000000Z")
                .name("ul3ISoLlGYqCoXoGAustVKiyGKg6I2c4vjJ0uuFNk5xEatUCGYnUIhqAnDQImUocNLmlkEs1s3oajWUDkbVb94dhcQmTjATi4FvTByqrSIzi26MGgpQ9DKPsTX2x6llLqyqxLBzmQKSHklP2GNjfKFk3xSPN2EauZcekm4uUHwCvLyAybYYI1PTnYt6AX3Z");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test13() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("product_code", "4912345678904");
        items.addProperty("is_multiply_by_count", true);
        items.addProperty("required_count", 2);
        JsonObject items2 = new JsonObject();
        items2.addProperty("point_amount", 5);
        items2.addProperty("point_amount_unit", "percent");
        items2.addProperty("product_code", "4912345678904");
        items2.addProperty("is_multiply_by_count", true);
        items2.addProperty("required_count", 2);
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("is_multiply_by_count", true);
        items3.addProperty("required_count", 2);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("is_multiply_by_count", true);
        items4.addProperty("required_count", 2);
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("is_multiply_by_count", true);
        items5.addProperty("required_count", 2);
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("is_multiply_by_count", true);
        items6.addProperty("required_count", 2);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("is_multiply_by_count", true);
        items7.addProperty("required_count", 2);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("is_multiply_by_count", true);
        items8.addProperty("required_count", 2);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("subject_more_than_or_equal", 1000);
        items9.addProperty("subject_less_than", 5000);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("subject_more_than_or_equal", 1000);
        items10.addProperty("subject_less_than", 5000);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("subject_more_than_or_equal", 1000);
        items11.addProperty("subject_less_than", 5000);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("subject_more_than_or_equal", 1000);
        items12.addProperty("subject_less_than", 5000);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("subject_more_than_or_equal", 1000);
        items13.addProperty("subject_less_than", 5000);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("subject_more_than_or_equal", 1000);
        items14.addProperty("subject_less_than", 5000);
        Request request = new UpdateCampaign(
            "651b8291-64e3-477d-9712-e2ab96cd0d6c"
        )
                .applicableShopIds(new String[]{"a8efe63b-a4f2-46dd-a7ad-14e1f13dc102"})
                .productBasedPointRules(new Object[]{items,items2,items3,items4,items5,items6,items7,items8})
                .amountBasedPointRules(new Object[]{items9,items10,items11,items12,items13,items14})
                .subject("money")
                .setExclusive(false)
                .pointExpiresInDays(3659)
                .pointExpiresAt("2021-06-17T19:14:20.000000Z")
                .status("enabled")
                .description("iLHRNzuSt")
                .event("topup")
                .priority(5260)
                .endsAt("2023-07-11T20:38:32.000000Z")
                .startsAt("2023-02-17T13:06:56.000000Z")
                .name("5");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test14() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("product_code", "4912345678904");
        items.addProperty("classification_code", "c123");
        JsonObject items2 = new JsonObject();
        items2.addProperty("product_code", "4912345678904");
        items2.addProperty("classification_code", "c123");
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("is_multiply_by_count", true);
        items3.addProperty("required_count", 2);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("is_multiply_by_count", true);
        items4.addProperty("required_count", 2);
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("is_multiply_by_count", true);
        items5.addProperty("required_count", 2);
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("is_multiply_by_count", true);
        items6.addProperty("required_count", 2);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("subject_more_than_or_equal", 1000);
        items7.addProperty("subject_less_than", 5000);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("subject_more_than_or_equal", 1000);
        items8.addProperty("subject_less_than", 5000);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("subject_more_than_or_equal", 1000);
        items9.addProperty("subject_less_than", 5000);
        Request request = new UpdateCampaign(
            "651b8291-64e3-477d-9712-e2ab96cd0d6c"
        )
                .applicableShopIds(new String[]{"0bf31cfc-88a3-4068-9afa-ea2fa03e4be6","afbfbe62-0ccd-4743-af0a-58b9f20c847c","5ebbc218-185d-45de-9ef1-3ebea6890c2d","6b64dc90-6012-49f9-a1c1-6ad23f31ddf8","00c07ff4-fd3e-485d-a15a-ffa16d2ad75f","3be3bc14-7df1-460f-bbfb-fe9a1b0d9ce7","f8d657dd-9a42-4235-a674-a7304a0ab4eb"})
                .blacklistedProductRules(new Object[]{items,items2})
                .productBasedPointRules(new Object[]{items3,items4,items5,items6})
                .amountBasedPointRules(new Object[]{items7,items8,items9})
                .subject("money")
                .setExclusive(true)
                .pointExpiresInDays(8956)
                .pointExpiresAt("2022-03-04T23:06:48.000000Z")
                .status("enabled")
                .description("S4r5kfrLJkZytv5gO2QqNTMBVQz08laq2biuqoxBaoCNpyYWsiSLe8XgZiLcB9lkuwUmt5gGSX2SbBRPaYeWynmUQkGZMrt25VWYHR7")
                .event("topup")
                .priority(4973)
                .endsAt("2021-02-15T13:07:43.000000Z")
                .startsAt("2021-11-28T01:04:01.000000Z")
                .name("YOuy85eAINi4DCh9E1piomvY0y0iLigYmahsEfLajE38CSizXaYXCbSM5b6xxCi9aS7pUn8sHDE4F3kcf0hrQ4a3rPgThS8KkZCOZQxeSP2z9qxNvFrLUe");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test15() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("product_code", "4912345678904");
        items.addProperty("classification_code", "c123");
        JsonObject items2 = new JsonObject();
        items2.addProperty("product_code", "4912345678904");
        items2.addProperty("classification_code", "c123");
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("is_multiply_by_count", true);
        items3.addProperty("required_count", 2);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("is_multiply_by_count", true);
        items4.addProperty("required_count", 2);
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("is_multiply_by_count", true);
        items5.addProperty("required_count", 2);
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("is_multiply_by_count", true);
        items6.addProperty("required_count", 2);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("is_multiply_by_count", true);
        items7.addProperty("required_count", 2);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("is_multiply_by_count", true);
        items8.addProperty("required_count", 2);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("subject_more_than_or_equal", 1000);
        items9.addProperty("subject_less_than", 5000);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("subject_more_than_or_equal", 1000);
        items10.addProperty("subject_less_than", 5000);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("subject_more_than_or_equal", 1000);
        items11.addProperty("subject_less_than", 5000);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("subject_more_than_or_equal", 1000);
        items12.addProperty("subject_less_than", 5000);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("subject_more_than_or_equal", 1000);
        items13.addProperty("subject_less_than", 5000);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("subject_more_than_or_equal", 1000);
        items14.addProperty("subject_less_than", 5000);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("subject_more_than_or_equal", 1000);
        items15.addProperty("subject_less_than", 5000);
        Request request = new UpdateCampaign(
            "651b8291-64e3-477d-9712-e2ab96cd0d6c"
        )
                .applicableShopIds(new String[]{"791e97e5-0acd-4a8c-b3e0-cae0a65b15a5","6fcd9095-8271-4b75-a419-c905a0c5ceb8","ea40e6eb-a11b-4c6e-bf2f-3cffd4bbd8e8"})
                .applicableDaysOfWeek(new Integer[]{2,0,0})
                .blacklistedProductRules(new Object[]{items,items2})
                .productBasedPointRules(new Object[]{items3,items4,items5,items6,items7,items8})
                .amountBasedPointRules(new Object[]{items9,items10,items11,items12,items13,items14,items15})
                .subject("money")
                .setExclusive(false)
                .pointExpiresInDays(2128)
                .pointExpiresAt("2024-10-10T07:55:01.000000Z")
                .status("enabled")
                .description("FHzOggogIb0heOl2hQPfOiPoRxRiCop5Q0A9gBKU33EhyGU9Sc7TWphUCFQOlhJCzSIu3L4oB0QKjjVXdg6wCnP4F0PUy8JyZq3ofPUU0rY2rRd10bnDEP")
                .event("topup")
                .priority(8523)
                .endsAt("2021-11-23T18:33:31.000000Z")
                .startsAt("2021-01-31T00:28:24.000000Z")
                .name("oSGRnM40Adb2lsHFBNfL0ieognilvSR4pMoCwkxpSpqKLDrvgRvBVvAYQP0NP5o8oIbQ6bcvTH9KRHlq0wqM01LRxPcYJN00R6J1knyJeLDqePaGS57qQUn9QotexnhecBro7jHBJHSTWFK0aJRYTfxgM2RajM6sQRgc1VEyXHMXBj8otEAcFy5ooXoXuzlRpCyCoZoaTfbTmVX0XqqL2DDCdNGv9QaNMmxX2S2fPh6fy135I5DGGggnvkdWrHa");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test16() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("classification_code", "c123");
        JsonObject items11 = new JsonObject();
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("classification_code", "c123");
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("subject_more_than_or_equal", 1000);
        items14.addProperty("subject_less_than", 5000);
        Request request = new UpdateCampaign(
            "651b8291-64e3-477d-9712-e2ab96cd0d6c"
        )
                .applicableShopIds(new String[]{"665bd1f0-f440-44bc-be41-b47706657b29","7e5efba8-b7db-48b5-9690-11c0d917747b","2ae873a8-83fc-4fe3-b00c-e8b7419c7243","01362a45-e437-431f-9ab8-5e4a8c007ea3"})
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5,items6})
                .applicableDaysOfWeek(new Integer[]{3,0,3,5,4,3})
                .blacklistedProductRules(new Object[]{items7,items8,items9,items10,items11})
                .productBasedPointRules(new Object[]{items12,items13})
                .amountBasedPointRules(new Object[]{items14})
                .subject("money")
                .setExclusive(true)
                .pointExpiresInDays(2497)
                .pointExpiresAt("2024-01-03T05:55:35.000000Z")
                .status("disabled")
                .description("rDoffEic8syvxPXUni2oM8QHA7lWY5GLHqITj0UgJwxmfaF0gGfgNlG67XOfGi887nNv1eh26ZZWkeJQym7n7CGmjd25iFSdny2rQSPU5tCjVy8COfDZrZRHs0hjVGtY7")
                .event("external-transaction")
                .priority(1092)
                .endsAt("2021-04-25T19:58:00.000000Z")
                .startsAt("2023-12-12T17:28:09.000000Z")
                .name("xM6iUcBW9LDUejJe4laTFkcJAyP9v3lR5fJ1SCFuFJVqCc62CsLVYKPyOwySSjaFxy00IGCXmzsObY8JjUm176PqMxSejYJwKQkQhcSsOlDNZZsSWHBkBrsiXhCnZzamORmWcssL2FF3HAzhtt18u7MooUueVWo8T9dRNvfu3qkwBDNVzugQpgEVipsMl1opS6XVL1");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test17() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("from", "12:00");
        items7.addProperty("to", "23:59");
        JsonObject items8 = new JsonObject();
        items8.addProperty("from", "12:00");
        items8.addProperty("to", "23:59");
        JsonObject items9 = new JsonObject();
        items9.addProperty("from", "12:00");
        items9.addProperty("to", "23:59");
        JsonObject items10 = new JsonObject();
        items10.addProperty("from", "12:00");
        items10.addProperty("to", "23:59");
        JsonObject items11 = new JsonObject();
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("classification_code", "c123");
        JsonObject items12 = new JsonObject();
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("classification_code", "c123");
        JsonObject items13 = new JsonObject();
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("classification_code", "c123");
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("is_multiply_by_count", true);
        items16.addProperty("required_count", 2);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("is_multiply_by_count", true);
        items17.addProperty("required_count", 2);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("product_code", "4912345678904");
        items18.addProperty("is_multiply_by_count", true);
        items18.addProperty("required_count", 2);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("product_code", "4912345678904");
        items19.addProperty("is_multiply_by_count", true);
        items19.addProperty("required_count", 2);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("product_code", "4912345678904");
        items20.addProperty("is_multiply_by_count", true);
        items20.addProperty("required_count", 2);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("subject_more_than_or_equal", 1000);
        items21.addProperty("subject_less_than", 5000);
        JsonObject items22 = new JsonObject();
        items22.addProperty("point_amount", 5);
        items22.addProperty("point_amount_unit", "percent");
        items22.addProperty("subject_more_than_or_equal", 1000);
        items22.addProperty("subject_less_than", 5000);
        JsonObject items23 = new JsonObject();
        items23.addProperty("point_amount", 5);
        items23.addProperty("point_amount_unit", "percent");
        items23.addProperty("subject_more_than_or_equal", 1000);
        items23.addProperty("subject_less_than", 5000);
        JsonObject items24 = new JsonObject();
        items24.addProperty("point_amount", 5);
        items24.addProperty("point_amount_unit", "percent");
        items24.addProperty("subject_more_than_or_equal", 1000);
        items24.addProperty("subject_less_than", 5000);
        JsonObject items25 = new JsonObject();
        items25.addProperty("point_amount", 5);
        items25.addProperty("point_amount_unit", "percent");
        items25.addProperty("subject_more_than_or_equal", 1000);
        items25.addProperty("subject_less_than", 5000);
        JsonObject items26 = new JsonObject();
        items26.addProperty("point_amount", 5);
        items26.addProperty("point_amount_unit", "percent");
        items26.addProperty("subject_more_than_or_equal", 1000);
        items26.addProperty("subject_less_than", 5000);
        JsonObject items27 = new JsonObject();
        items27.addProperty("point_amount", 5);
        items27.addProperty("point_amount_unit", "percent");
        items27.addProperty("subject_more_than_or_equal", 1000);
        items27.addProperty("subject_less_than", 5000);
        JsonObject items28 = new JsonObject();
        items28.addProperty("point_amount", 5);
        items28.addProperty("point_amount_unit", "percent");
        items28.addProperty("subject_more_than_or_equal", 1000);
        items28.addProperty("subject_less_than", 5000);
        JsonObject items29 = new JsonObject();
        items29.addProperty("point_amount", 5);
        items29.addProperty("point_amount_unit", "percent");
        items29.addProperty("subject_more_than_or_equal", 1000);
        items29.addProperty("subject_less_than", 5000);
        JsonObject items30 = new JsonObject();
        items30.addProperty("point_amount", 5);
        items30.addProperty("point_amount_unit", "percent");
        items30.addProperty("subject_more_than_or_equal", 1000);
        items30.addProperty("subject_less_than", 5000);
        Request request = new UpdateCampaign(
            "651b8291-64e3-477d-9712-e2ab96cd0d6c"
        )
                .applicableShopIds(new String[]{"19d1647b-ebd5-4d38-8e76-2ae67165ef7e","087097ad-1654-447e-8150-50e768378ea5","4c662b03-c8da-41d1-9d25-c092b6723f1b","191baaef-c3de-41aa-87c7-3ca684b65158","88781984-43ab-444c-a5dc-4fbaf39c77db"})
                .minimumNumberOfProducts(3555)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5,items6,items7,items8,items9,items10})
                .applicableDaysOfWeek(new Integer[]{0,4,5,5,6,4,6,2,2})
                .blacklistedProductRules(new Object[]{items11,items12,items13})
                .productBasedPointRules(new Object[]{items14,items15,items16,items17,items18,items19,items20})
                .amountBasedPointRules(new Object[]{items21,items22,items23,items24,items25,items26,items27,items28,items29,items30})
                .subject("all")
                .setExclusive(false)
                .pointExpiresInDays(7051)
                .pointExpiresAt("2023-09-27T07:08:06.000000Z")
                .status("disabled")
                .description("W")
                .event("topup")
                .priority(9103)
                .endsAt("2020-12-09T22:09:02.000000Z")
                .startsAt("2021-09-03T10:28:08.000000Z")
                .name("gkwbt7bycdIa6s2OiS448zYYuSerVgt5xpThqkxWuN4OkYmUnkAFHrW518DEhvGfJFhBLPIWgGXu2FRRBCtapsc2OJEtIYHTkPMCnHWRhGK3T2O4zTKZrpJNYtglnu99Onqaf5iTxaKHt4HXxpMz5eg3TFJnOMXlccrSM4NeRkShSKYnhr8JJ6rqJ58uKWhjJEVfg4kmmGr3fEZnBlmzkrtoyKm38BDyuj1U15iB0VVURHNCTBSk");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test18() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("classification_code", "c123");
        JsonObject items5 = new JsonObject();
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("classification_code", "c123");
        JsonObject items6 = new JsonObject();
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("classification_code", "c123");
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("is_multiply_by_count", true);
        items7.addProperty("required_count", 2);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("is_multiply_by_count", true);
        items8.addProperty("required_count", 2);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("is_multiply_by_count", true);
        items9.addProperty("required_count", 2);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("subject_more_than_or_equal", 1000);
        items14.addProperty("subject_less_than", 5000);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("subject_more_than_or_equal", 1000);
        items15.addProperty("subject_less_than", 5000);
        Request request = new UpdateCampaign(
            "651b8291-64e3-477d-9712-e2ab96cd0d6c"
        )
                .applicableShopIds(new String[]{"e1ef4e5b-98c3-4141-aa7d-dc9806f8574a","3d677403-3855-4052-9182-f52ebfd6c230","5bc8c0f8-aa63-4404-8e3b-a6fde5a8cf99","5ff1b2b8-f70f-44ae-b6b3-d492c66406d8","7402eac7-2d7f-4eef-b8bb-0ece2b8f2baa","73e14b94-6a24-4196-9fd9-7e4238bf9b20","4bda5afa-68d1-4946-b287-2bb6b6968aae"})
                .minimumNumberOfAmount(4947)
                .minimumNumberOfProducts(9626)
                .applicableTimeRanges(new Object[]{items,items2,items3})
                .applicableDaysOfWeek(new Integer[]{5})
                .blacklistedProductRules(new Object[]{items4,items5,items6})
                .productBasedPointRules(new Object[]{items7,items8,items9,items10,items11,items12,items13})
                .amountBasedPointRules(new Object[]{items14,items15})
                .subject("money")
                .setExclusive(true)
                .pointExpiresInDays(8694)
                .pointExpiresAt("2022-09-02T12:19:44.000000Z")
                .status("enabled")
                .description("k8mM7y90MUBMqpZFx6CyPOvMtoUIDYTTb9YLUK2ZY6omFZc6c5lAiaH7ksthq2")
                .event("payment")
                .priority(6282)
                .endsAt("2021-11-17T13:16:21.000000Z")
                .startsAt("2022-04-03T18:49:21.000000Z")
                .name("ISbJLQ2IGy7A4O5EuFDi3ep7E8KTwqzGZlqsrJTtHeL1jl3TaroJ97KS7PIYmqHtFEvZxOLgNEFPzTNAeMR2CvVgTRCY2rEPprVjpNe");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test19() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("classification_code", "c123");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("classification_code", "c123");
        JsonObject items11 = new JsonObject();
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("classification_code", "c123");
        JsonObject items12 = new JsonObject();
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("classification_code", "c123");
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("subject_more_than_or_equal", 1000);
        items15.addProperty("subject_less_than", 5000);
        Request request = new UpdateCampaign(
            "651b8291-64e3-477d-9712-e2ab96cd0d6c"
        )
                .applicableShopIds(new String[]{"ea40d6af-7b3f-4c08-9159-f70e61ca749a","4a5ab74a-0b58-4d44-863c-e9eed14e244e"})
                .minimumNumberForCombinationPurchase(283)
                .minimumNumberOfAmount(517)
                .minimumNumberOfProducts(1645)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5})
                .applicableDaysOfWeek(new Integer[]{3,4,5,4,2})
                .blacklistedProductRules(new Object[]{items6,items7,items8,items9,items10,items11,items12})
                .productBasedPointRules(new Object[]{items13,items14})
                .amountBasedPointRules(new Object[]{items15})
                .subject("money")
                .setExclusive(false)
                .pointExpiresInDays(2474)
                .pointExpiresAt("2024-02-17T17:44:31.000000Z")
                .status("disabled")
                .description("kSjhKrHXePF1aNsQcGEPe")
                .event("external-transaction")
                .priority(2179)
                .endsAt("2021-03-25T18:53:17.000000Z")
                .startsAt("2021-03-20T20:56:39.000000Z")
                .name("2hgvk3yuDeTC8XzXR9jncya31KgghsgYe3Tb");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test20() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("classification_code", "c123");
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("is_multiply_by_count", true);
        items16.addProperty("required_count", 2);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("subject_more_than_or_equal", 1000);
        items17.addProperty("subject_less_than", 5000);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("subject_more_than_or_equal", 1000);
        items18.addProperty("subject_less_than", 5000);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("subject_more_than_or_equal", 1000);
        items19.addProperty("subject_less_than", 5000);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("subject_more_than_or_equal", 1000);
        items20.addProperty("subject_less_than", 5000);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("subject_more_than_or_equal", 1000);
        items21.addProperty("subject_less_than", 5000);
        JsonObject items22 = new JsonObject();
        items22.addProperty("point_amount", 5);
        items22.addProperty("point_amount_unit", "percent");
        items22.addProperty("subject_more_than_or_equal", 1000);
        items22.addProperty("subject_less_than", 5000);
        JsonObject items23 = new JsonObject();
        items23.addProperty("point_amount", 5);
        items23.addProperty("point_amount_unit", "percent");
        items23.addProperty("subject_more_than_or_equal", 1000);
        items23.addProperty("subject_less_than", 5000);
        Request request = new UpdateCampaign(
            "651b8291-64e3-477d-9712-e2ab96cd0d6c"
        )
                .applicableShopIds(new String[]{"bd452a4a-a4dc-4f4e-89ba-cf32576de231","a22149e1-feb8-47e8-915a-267408c21dfc","977b3b6d-e535-492b-8273-8f5fd2ef37ef","2ecfa17d-cbb8-404d-9aa4-ec2cae65e87a"})
                .existInEachProductGroups(true)
                .minimumNumberForCombinationPurchase(7169)
                .minimumNumberOfAmount(8480)
                .minimumNumberOfProducts(3386)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5,items6})
                .applicableDaysOfWeek(new Integer[]{4,3,6,5,0,4,1,6})
                .blacklistedProductRules(new Object[]{items7,items8,items9,items10})
                .productBasedPointRules(new Object[]{items11,items12,items13,items14,items15,items16})
                .amountBasedPointRules(new Object[]{items17,items18,items19,items20,items21,items22,items23})
                .subject("all")
                .setExclusive(false)
                .pointExpiresInDays(933)
                .pointExpiresAt("2021-10-23T00:17:29.000000Z")
                .status("enabled")
                .description("hdalQqRPyTvG2tPeRbQcNODGa3Iheb")
                .event("payment")
                .priority(6052)
                .endsAt("2020-05-02T03:16:50.000000Z")
                .startsAt("2023-01-31T02:06:10.000000Z")
                .name("xi8kuGoSk8mm");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test21() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("product_code", "4912345678904");
        items2.addProperty("classification_code", "c123");
        JsonObject items3 = new JsonObject();
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("classification_code", "c123");
        JsonObject items4 = new JsonObject();
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("classification_code", "c123");
        JsonObject items5 = new JsonObject();
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("classification_code", "c123");
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("is_multiply_by_count", true);
        items6.addProperty("required_count", 2);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("is_multiply_by_count", true);
        items7.addProperty("required_count", 2);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("subject_more_than_or_equal", 1000);
        items8.addProperty("subject_less_than", 5000);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("subject_more_than_or_equal", 1000);
        items9.addProperty("subject_less_than", 5000);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("subject_more_than_or_equal", 1000);
        items10.addProperty("subject_less_than", 5000);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("subject_more_than_or_equal", 1000);
        items11.addProperty("subject_less_than", 5000);
        Request request = new UpdateCampaign(
            "651b8291-64e3-477d-9712-e2ab96cd0d6c"
        )
                .applicableShopIds(new String[]{"ad657cd0-bc17-4b81-be41-31c7e1574a3a","380985b5-1e54-455b-bbe1-5f9811272b0d","201963cf-54d3-4ea9-834a-cc24eafd9672","3cad24c6-4cf7-4c0f-9554-3a361170f0c9"})
                .maxPointAmount(9678)
                .existInEachProductGroups(false)
                .minimumNumberForCombinationPurchase(2514)
                .minimumNumberOfAmount(3114)
                .minimumNumberOfProducts(8416)
                .applicableTimeRanges(new Object[]{items})
                .applicableDaysOfWeek(new Integer[]{4,4})
                .blacklistedProductRules(new Object[]{items2,items3,items4,items5})
                .productBasedPointRules(new Object[]{items6,items7})
                .amountBasedPointRules(new Object[]{items8,items9,items10,items11})
                .subject("money")
                .setExclusive(false)
                .pointExpiresInDays(1367)
                .pointExpiresAt("2023-06-12T23:49:59.000000Z")
                .status("disabled")
                .description("vsCMKR5EbTWV4WWsRyRXgRYVg4CYuzSBW4stkoPc7UXRyRiV8Pax53IDmwuQOCWjbIPmFGWkh7DM")
                .event("external-transaction")
                .priority(4015)
                .endsAt("2020-07-01T14:25:53.000000Z")
                .startsAt("2023-05-21T06:48:20.000000Z")
                .name("Wi3zPKlO0ubMaaWt2sfRwBothNvTY3vFr4ELRXyBW70oqJ1JP1EYwzYF5YE8jQgUzmyBkd9RsSiJlXzLN5312aQsa3khCQuI0KxC45PIbfMDQsr0pTvhXVGg9hnQlyenzuwrO3gGQmGe09eXlKtPgqSA0ERaGz46vIiA4hbe1yI3CGp5lj6m5fgOCupwcIPxBzhbkfELKrUPd9GpW6Q9");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test22() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("product_code", "4912345678904");
        items2.addProperty("classification_code", "c123");
        JsonObject items3 = new JsonObject();
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("classification_code", "c123");
        JsonObject items4 = new JsonObject();
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("classification_code", "c123");
        JsonObject items5 = new JsonObject();
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("classification_code", "c123");
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("is_multiply_by_count", true);
        items6.addProperty("required_count", 2);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("is_multiply_by_count", true);
        items7.addProperty("required_count", 2);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("is_multiply_by_count", true);
        items8.addProperty("required_count", 2);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("is_multiply_by_count", true);
        items9.addProperty("required_count", 2);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("subject_more_than_or_equal", 1000);
        items11.addProperty("subject_less_than", 5000);
        Request request = new UpdateCampaign(
            "651b8291-64e3-477d-9712-e2ab96cd0d6c"
        )
                .applicableShopIds(new String[]{"42acff7f-c5af-4ed0-9857-8370aca60182","dc69a240-d8cc-49a1-9ebe-89bfab4db297","5066581b-f502-459e-ad0a-912d01504a0d"})
                .maxTotalPointAmount(839)
                .maxPointAmount(1358)
                .existInEachProductGroups(true)
                .minimumNumberForCombinationPurchase(8401)
                .minimumNumberOfAmount(9108)
                .minimumNumberOfProducts(7700)
                .applicableTimeRanges(new Object[]{items})
                .applicableDaysOfWeek(new Integer[]{6,1,4})
                .blacklistedProductRules(new Object[]{items2,items3,items4,items5})
                .productBasedPointRules(new Object[]{items6,items7,items8,items9,items10})
                .amountBasedPointRules(new Object[]{items11})
                .subject("all")
                .setExclusive(true)
                .pointExpiresInDays(2656)
                .pointExpiresAt("2020-03-09T16:28:30.000000Z")
                .status("disabled")
                .description("rjFKNHUPj8OaHLD3inc4333SWlp4s7jMjS5PtJzYsdA5qhl1QGqEwjgkrGn0uAn0iqI2b5rxtzGOZhKJMKwzvYsbBzTdo6bpAqcWNJrNTsv2Llex1ejGQ2ugzGxu81Sx50Yf2M71M8zENOSGlzUlDTz33P2rJ14YHcAJKWHCf11oIN1lhxfCtQo")
                .event("payment")
                .priority(1355)
                .endsAt("2022-03-07T14:25:07.000000Z")
                .startsAt("2021-11-08T00:38:06.000000Z")
                .name("Wzy38cC0E7gsSEITDei3yOkB642y5M6ZGKLNmOSXPLkVgGHidiNxSMbU65iFGAAyuGpPep5MlLDDmy5H5WNxLWXFOkEFZiHMkNkDC4XjAgnN");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test23() throws ConnectionError, ProcessingError {
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("classification_code", "c123");
        JsonObject items5 = new JsonObject();
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("classification_code", "c123");
        JsonObject items6 = new JsonObject();
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("classification_code", "c123");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("subject_more_than_or_equal", 1000);
        items16.addProperty("subject_less_than", 5000);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("subject_more_than_or_equal", 1000);
        items17.addProperty("subject_less_than", 5000);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("subject_more_than_or_equal", 1000);
        items18.addProperty("subject_less_than", 5000);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("subject_more_than_or_equal", 1000);
        items19.addProperty("subject_less_than", 5000);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("subject_more_than_or_equal", 1000);
        items20.addProperty("subject_less_than", 5000);
        Request request = new UpdateCampaign(
            "651b8291-64e3-477d-9712-e2ab96cd0d6c"
        )
                .applicableShopIds(new String[]{"548de50d-4dd0-481b-b954-6a98ef7f3761","414931f3-20a7-4cf1-b149-cc2caa3f61c6","e94e7191-01e5-4e78-8af8-9919c1e50648","aa68976f-2da4-46cf-bd73-a7147a409559","5ab17d17-8533-4ad8-932f-a7ed13f41ce6","8b3fff53-088f-412b-834d-e0cddb9a8ddb","33cdbec0-a8c9-4d07-b0dc-35059caf39e8","6a024150-328a-49fb-bc49-f9cf0c989163"})
                .applicableAccountMetadata(applicable_account_metadata)
                .maxTotalPointAmount(1905)
                .maxPointAmount(6824)
                .existInEachProductGroups(true)
                .minimumNumberForCombinationPurchase(1909)
                .minimumNumberOfAmount(1160)
                .minimumNumberOfProducts(8172)
                .applicableTimeRanges(new Object[]{items,items2,items3})
                .applicableDaysOfWeek(new Integer[]{5,3,6,6,6,0,6,5,1})
                .blacklistedProductRules(new Object[]{items4,items5,items6,items7,items8,items9})
                .productBasedPointRules(new Object[]{items10,items11,items12,items13,items14,items15})
                .amountBasedPointRules(new Object[]{items16,items17,items18,items19,items20})
                .subject("money")
                .setExclusive(true)
                .pointExpiresInDays(3296)
                .pointExpiresAt("2020-09-13T21:12:42.000000Z")
                .status("disabled")
                .description("epcLNjePvmbsJ6aAodX3l")
                .event("external-transaction")
                .priority(2387)
                .endsAt("2023-10-18T12:31:22.000000Z")
                .startsAt("2020-10-24T22:23:54.000000Z")
                .name("TfXuUhrzyKZN2IpvZDbUGNbf92zGejiy7b3srgm7LVnhxTyAZfZDkQ2r2xXuIalmcupP8PaFubqXmo0h47ayHi8sXxsnC42wCpyAiB");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test24() throws ConnectionError, ProcessingError {
        JsonObject applicable_transaction_metadata = new JsonObject();
        applicable_transaction_metadata.addProperty("key", "rank");
        applicable_transaction_metadata.addProperty("value", "bronze");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("classification_code", "c123");
        JsonObject items6 = new JsonObject();
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("classification_code", "c123");
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("is_multiply_by_count", true);
        items7.addProperty("required_count", 2);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("is_multiply_by_count", true);
        items8.addProperty("required_count", 2);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("is_multiply_by_count", true);
        items9.addProperty("required_count", 2);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("subject_more_than_or_equal", 1000);
        items16.addProperty("subject_less_than", 5000);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("subject_more_than_or_equal", 1000);
        items17.addProperty("subject_less_than", 5000);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("subject_more_than_or_equal", 1000);
        items18.addProperty("subject_less_than", 5000);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("subject_more_than_or_equal", 1000);
        items19.addProperty("subject_less_than", 5000);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("subject_more_than_or_equal", 1000);
        items20.addProperty("subject_less_than", 5000);
        Request request = new UpdateCampaign(
            "651b8291-64e3-477d-9712-e2ab96cd0d6c"
        )
                .applicableShopIds(new String[]{"fe324792-ddfe-466e-95fd-8c2c05c73622","a60dbc42-604c-469d-817d-e056cf36cb2f","5a0d7700-11b9-458f-b725-fdbe5209707e","59d32859-b0e6-40f4-8b29-cf54fb00a9be","d8200119-694d-43f0-88e8-78936ced7ea8","62f9d31d-4857-43de-8dd5-fbcb5a541abc","54ca7a33-7d99-411d-bcc0-53dc97515b91","3a58a4a3-0f0f-4b5e-9bae-03d33b971019","5b5e1a3e-c79a-490a-93c3-8e0cc560226d"})
                .applicableTransactionMetadata(applicable_transaction_metadata)
                .applicableAccountMetadata(applicable_account_metadata)
                .maxTotalPointAmount(2112)
                .maxPointAmount(7523)
                .existInEachProductGroups(false)
                .minimumNumberForCombinationPurchase(5593)
                .minimumNumberOfAmount(2306)
                .minimumNumberOfProducts(2160)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4})
                .applicableDaysOfWeek(new Integer[]{4,2,3})
                .blacklistedProductRules(new Object[]{items5,items6})
                .productBasedPointRules(new Object[]{items7,items8,items9,items10,items11,items12,items13,items14,items15})
                .amountBasedPointRules(new Object[]{items16,items17,items18,items19,items20})
                .subject("money")
                .setExclusive(false)
                .pointExpiresInDays(5043)
                .pointExpiresAt("2024-04-08T07:42:21.000000Z")
                .status("enabled")
                .description("HwTLkUG7zxtQPL0ebUOhv3B3t2DzpE8reI7vFyo7eM4dNHW25nKJ")
                .event("payment")
                .priority(4953)
                .endsAt("2022-10-28T17:56:15.000000Z")
                .startsAt("2022-09-07T01:00:52.000000Z")
                .name("zM004QSYdkecoFJzr3brOZ5f3RQvkhtySJKYRUQ3NzIgBoxko0Q38viglT3j7uK9FEO8wpTMbUo34OhjcbIFy00bHfPtADraHJBywFUVQhJIvCWpCXLp2gU");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test25() throws ConnectionError, ProcessingError {
        JsonObject applicable_transaction_metadata = new JsonObject();
        applicable_transaction_metadata.addProperty("key", "rank");
        applicable_transaction_metadata.addProperty("value", "bronze");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("classification_code", "c123");
        JsonObject items11 = new JsonObject();
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("classification_code", "c123");
        JsonObject items12 = new JsonObject();
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("classification_code", "c123");
        JsonObject items13 = new JsonObject();
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("classification_code", "c123");
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("is_multiply_by_count", true);
        items16.addProperty("required_count", 2);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("is_multiply_by_count", true);
        items17.addProperty("required_count", 2);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("product_code", "4912345678904");
        items18.addProperty("is_multiply_by_count", true);
        items18.addProperty("required_count", 2);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("product_code", "4912345678904");
        items19.addProperty("is_multiply_by_count", true);
        items19.addProperty("required_count", 2);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("product_code", "4912345678904");
        items20.addProperty("is_multiply_by_count", true);
        items20.addProperty("required_count", 2);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("subject_more_than_or_equal", 1000);
        items21.addProperty("subject_less_than", 5000);
        JsonObject items22 = new JsonObject();
        items22.addProperty("point_amount", 5);
        items22.addProperty("point_amount_unit", "percent");
        items22.addProperty("subject_more_than_or_equal", 1000);
        items22.addProperty("subject_less_than", 5000);
        JsonObject items23 = new JsonObject();
        items23.addProperty("point_amount", 5);
        items23.addProperty("point_amount_unit", "percent");
        items23.addProperty("subject_more_than_or_equal", 1000);
        items23.addProperty("subject_less_than", 5000);
        JsonObject items24 = new JsonObject();
        items24.addProperty("point_amount", 5);
        items24.addProperty("point_amount_unit", "percent");
        items24.addProperty("subject_more_than_or_equal", 1000);
        items24.addProperty("subject_less_than", 5000);
        JsonObject items25 = new JsonObject();
        items25.addProperty("point_amount", 5);
        items25.addProperty("point_amount_unit", "percent");
        items25.addProperty("subject_more_than_or_equal", 1000);
        items25.addProperty("subject_less_than", 5000);
        JsonObject items26 = new JsonObject();
        items26.addProperty("point_amount", 5);
        items26.addProperty("point_amount_unit", "percent");
        items26.addProperty("subject_more_than_or_equal", 1000);
        items26.addProperty("subject_less_than", 5000);
        JsonObject items27 = new JsonObject();
        items27.addProperty("point_amount", 5);
        items27.addProperty("point_amount_unit", "percent");
        items27.addProperty("subject_more_than_or_equal", 1000);
        items27.addProperty("subject_less_than", 5000);
        JsonObject items28 = new JsonObject();
        items28.addProperty("point_amount", 5);
        items28.addProperty("point_amount_unit", "percent");
        items28.addProperty("subject_more_than_or_equal", 1000);
        items28.addProperty("subject_less_than", 5000);
        JsonObject items29 = new JsonObject();
        items29.addProperty("point_amount", 5);
        items29.addProperty("point_amount_unit", "percent");
        items29.addProperty("subject_more_than_or_equal", 1000);
        items29.addProperty("subject_less_than", 5000);
        Request request = new UpdateCampaign(
            "651b8291-64e3-477d-9712-e2ab96cd0d6c"
        )
                .applicableShopIds(new String[]{"515ecff8-201a-4a38-af3f-66c8f04c1cd5","29cad8a1-88df-4c22-83f7-23b9d74b818b","3067ab19-5bc9-43ae-841d-99d55cbf7e24","eee0f438-f3e0-412d-9f90-a4a8203c5b76","e395a2b5-2f81-4c9e-b489-dfe537f3b684","5d15713c-d895-4862-abb7-f7b2fcbdcee2","d0e1e5ad-2b16-415b-aef1-bc35b4203ed6","470b7b7f-bd31-4523-bfd0-aa3d1c8ddfae","6dd96f59-7c75-4a20-b913-1a40ca9b00ad"})
                .budgetCapsAmount(1384174614)
                .applicableTransactionMetadata(applicable_transaction_metadata)
                .applicableAccountMetadata(applicable_account_metadata)
                .maxTotalPointAmount(8658)
                .maxPointAmount(8307)
                .existInEachProductGroups(false)
                .minimumNumberForCombinationPurchase(2756)
                .minimumNumberOfAmount(6332)
                .minimumNumberOfProducts(4190)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5,items6})
                .applicableDaysOfWeek(new Integer[]{2})
                .blacklistedProductRules(new Object[]{items7,items8,items9,items10,items11,items12,items13})
                .productBasedPointRules(new Object[]{items14,items15,items16,items17,items18,items19,items20})
                .amountBasedPointRules(new Object[]{items21,items22,items23,items24,items25,items26,items27,items28,items29})
                .subject("all")
                .setExclusive(false)
                .pointExpiresInDays(4908)
                .pointExpiresAt("2022-10-17T13:31:06.000000Z")
                .status("enabled")
                .description("YeoTGD6IVelM1xkQHIURZCUVG9E4BcH9vh8Qcd9Qr1jGxJh75seT2MlMasdJCSgZ4nn16A08HMuzRKVjoY87iExdEHTNDtgEpdMlXJAKinvVKW5jNBic0lbP5i9pPDb3qItRRs3FY6lAlrydgPmYNQmdCCSHSb7PeqbGNNyGMxdwCiRwJpoUBZS7wM2sjFT50Pr6")
                .event("topup")
                .priority(4147)
                .endsAt("2020-02-27T14:07:49.000000Z")
                .startsAt("2024-08-22T02:39:45.000000Z")
                .name("adi7ItSc4oUdi9EYp8oXZ4d1DUqCUDmWqMmM9IYmurAkMd4wDsAO01hvmpIXnG4Vdq7gNAtqrqKm6uKQNQH3PDcRwUCecSBjOParYUfATbiJrkxUEwT3M91XjHrTG7fMCl81IJPQ");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test26() throws ConnectionError, ProcessingError {
        Request request = new UpdateCampaign(
            "651b8291-64e3-477d-9712-e2ab96cd0d6c"
        )
                .blacklistedShopIds(new String[]{"33c1f10d-7f75-4dd3-885f-3ce0dd9e03d8","08e97924-828f-43db-a054-d60169b5be6d","5c36650e-200b-4f45-9304-9e52ab9800fd"});
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test27() throws ConnectionError, ProcessingError {
        Request request = new UpdateCampaign(
            "651b8291-64e3-477d-9712-e2ab96cd0d6c"
        )
                .blacklistedShopIds(new String[]{"27bedd27-eac5-4d31-9d59-071be2186919","cee2ccd6-0db9-44bd-a5e2-343ffaf5856e","2a08cbd5-e4fb-4307-adc2-c3dfedacf0f0","54fdafc0-effa-4044-b7e4-ba398d86a09d","1db3d69d-0544-4f73-87ee-0e1eeecf054f","eb8785be-dff6-4200-9074-7c5a7194334f"})
                .name("Q7wRQgMzlEQYhb78oA0LE9nGzsoBI");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test28() throws ConnectionError, ProcessingError {
        Request request = new UpdateCampaign(
            "651b8291-64e3-477d-9712-e2ab96cd0d6c"
        )
                .blacklistedShopIds(new String[]{"181b2253-cf2e-4bbe-835a-347dcc32fa82","e7c3d7c5-35ee-4726-9090-186312946d43"})
                .startsAt("2021-10-14T04:55:45.000000Z")
                .name("jIhrUeBMFsGSoFMs14cvovqZ6GQpcxkL1iWim0Xpy9XRR4FHqayBd9Y6naDnCaj1IshUK5sOcLMoSdluvLDw0rIOalhSCHrt5J1YKxmhpIQaAHuF1XqBsQEc2");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test29() throws ConnectionError, ProcessingError {
        Request request = new UpdateCampaign(
            "651b8291-64e3-477d-9712-e2ab96cd0d6c"
        )
                .blacklistedShopIds(new String[]{"e8a11a2f-1048-45bc-baa1-4406603cd51c","15f675e2-e918-428a-8eb0-750f38ecf587","03b5052a-7c8a-490e-828c-4af6479316b5","4c092bb1-a14a-4711-8ee5-f5bcd23e2278","df8df297-79f8-4632-b0c2-77dbc207d885","eae38c1e-ceec-452f-a328-2a23e0032aff","0153f85c-f810-426f-a264-106cdbb0282f","f623f5d4-31d9-4d9c-859f-f5365b4c03a8","eb26b65c-e06e-4eb3-8ce2-bde06152c77b","1a218acb-25b6-402a-9675-603451d0091f"})
                .endsAt("2023-04-27T05:38:53.000000Z")
                .startsAt("2022-12-12T16:20:04.000000Z")
                .name("hE7PkEzPYVXfzwtjxI8n9Z0CQKMUdsLKbKLcaV6nH18WcZidvZ55mAgOE16AnmYbzCLHYWconVaiJFwoOHJhs1D1kk2Z65xpUZ28FCmVx3QLXn5K0ujHfTEebumDwnUvtTuwE1P6w3jvuc6WVynWZlMwTGtLKHNv0GHMA8YNVctqn0HylBEaWFtKmGqTMRGGhLK4md8CvDRXJmyMUq3nONdNUldEzZzYqTFGHLldYwHPZ5GyoYY");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test30() throws ConnectionError, ProcessingError {
        Request request = new UpdateCampaign(
            "651b8291-64e3-477d-9712-e2ab96cd0d6c"
        )
                .blacklistedShopIds(new String[]{"6a20dea8-0563-44e7-90d0-6f898775279a","85b93efc-54ae-4584-8b20-59b3a6b5d8ae","9aa204c4-ada3-41a7-a386-92682567dc82","c0bedbfc-d38b-43f1-9da9-ede9cc68e11c","1b6c7a6b-fe8b-4935-8336-dd20c6a706b2","f0fb8bee-5551-41a3-9a1c-394a37da290d","d7654ca5-47c0-4137-a6c0-523d03fc655f"})
                .priority(6189)
                .endsAt("2024-08-05T02:11:22.000000Z")
                .startsAt("2020-12-12T23:58:18.000000Z")
                .name("N9nEMDfH9ZULXMKOjFu2fGiSho");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test31() throws ConnectionError, ProcessingError {
        Request request = new UpdateCampaign(
            "651b8291-64e3-477d-9712-e2ab96cd0d6c"
        )
                .blacklistedShopIds(new String[]{"12f000d3-cfe6-437b-9bec-5c1d30c1076e","eec5345b-06d2-4dd0-9adc-1c0ee8384116","fbd063cb-0df6-46bc-9448-001c1bd72b80","eb48cd23-01b4-4ed1-af62-a61857292cb4","b8b9a108-69dd-4ac8-8e3c-cc4bea9e099e","97137b91-7708-4631-aa1b-7589945aad44","fa147445-93b5-4efa-9ea0-d27070d7115b","99a08340-d0c8-48e9-b066-b3748b646393","220bd653-1a42-469d-bbad-3c284bc1af0c","925836f5-cc75-47d5-b960-7061f3a9e9ea"})
                .event("topup")
                .priority(9851)
                .endsAt("2021-04-29T23:37:40.000000Z")
                .startsAt("2021-11-27T22:03:32.000000Z")
                .name("G1MO97nrik73QyiaNKms0iFYGrWxxlKwOlCibtq2e0nqtXLNITG9Gffmmox8hwqx5x7fQZGPMXFo6oIvZGxUJA");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test32() throws ConnectionError, ProcessingError {
        Request request = new UpdateCampaign(
            "651b8291-64e3-477d-9712-e2ab96cd0d6c"
        )
                .blacklistedShopIds(new String[]{"af463a41-c3e5-43a5-9bc8-ed65ba62777f","e8966403-d3d5-4279-a711-44b7e449b1b8","64c9a465-b6c3-4bde-b071-007788120abf","1f103666-1a62-4256-a123-bf89e980c6c7","b5a11019-0a26-4d60-89ba-1b8460c38838"})
                .description("MUg6pkTJeF4LA5VGWmlO55tLRhXfPthFrTbvP80JDs4TLAvvWwguBec41EmwzzFrgc709a7P9KtTHr3zG8NnPjRfIRrqy3FohrRiHbftN77E9sKP2LWTHQkvbYQTkmfSmGSFmTTeLGAy7h6m0YyagUC0Ij3N9K7EVH4")
                .event("topup")
                .priority(3174)
                .endsAt("2023-12-19T09:00:52.000000Z")
                .startsAt("2024-07-06T05:11:02.000000Z")
                .name("0jI5hMMqGagepFcb0C3pMehBLw9uhZslxpk65zsLMOaWLvqiZty5Zp232");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test33() throws ConnectionError, ProcessingError {
        Request request = new UpdateCampaign(
            "651b8291-64e3-477d-9712-e2ab96cd0d6c"
        )
                .blacklistedShopIds(new String[]{"6e2469a4-9222-4c20-ac8b-a615be48a1f6","5a8f2544-06fb-44c4-9050-278d2ff2a6f4","862e9622-c74d-4ff5-9ff3-7a5b4d0c97e5","f35f09ed-afb1-49ff-975c-f7d3296f11a6","cce9d081-bfd0-48cf-a4c1-746bd9245108","31f635ba-07aa-4c12-8757-e6de45c790cc","54ee4f43-c789-4048-be97-14dd068f309c","a7727268-3c82-4393-90ba-fc7f99a4e137","5efda571-9837-4d04-aa0e-15aa55ae8edb","af058ff9-8add-47ea-85ef-9138c61e580b"})
                .status("disabled")
                .description("V3Di9DtzhzAGKUtsDdhPal5eEvQkTNVI1DbD")
                .event("payment")
                .priority(374)
                .endsAt("2022-11-05T16:15:07.000000Z")
                .startsAt("2024-08-06T07:29:13.000000Z")
                .name("Sa1fLqeRzwnNnU8Hy7seU6TPp7YTcvCbmuWQvyjmdKhWFzroFJfg0zCih9qHu842U5SnXNqipKVsIIUjVYx3ZiMVPZEq0xgguEtAXJ6WozfUGo1oVRA1PV2JD5SjzUvS2Jlq6P89tC2Mi1PRe6ex8zQnoMXPxIs0d6X24reGHeQvAPqGMsA1rgfPu4olvC1KDDE1");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test34() throws ConnectionError, ProcessingError {
        Request request = new UpdateCampaign(
            "651b8291-64e3-477d-9712-e2ab96cd0d6c"
        )
                .blacklistedShopIds(new String[]{"171644c7-d45d-4b16-b2bf-bba97acd78ed","c5f319c7-ba05-4e55-b9a1-fd265fdaf59f","d6c398d9-90e5-4544-9902-f5c824e323b5","1f3b4a7c-76d4-45f9-bc0d-fb40a14c1b3e","9a5a2bf3-3dea-4afa-ba8e-3ce052bad5b5","25fbcb25-8a01-4ff6-88df-1d024fa5d634","3e7fd694-9848-4906-97b6-2a6575f680f1","93c8c2eb-d8d3-4c6b-8500-6c9fa201d212","a1ed030c-b2ee-4783-889b-64ea7547b52f"})
                .pointExpiresAt("2022-02-17T16:54:47.000000Z")
                .status("disabled")
                .description("aW80Xp5YCo9TXEMx6Q3N4lydCpBzThmgOIjIatpE7508LaYMNkxpS")
                .event("payment")
                .priority(4689)
                .endsAt("2023-05-25T06:25:42.000000Z")
                .startsAt("2023-09-05T23:10:15.000000Z")
                .name("Lu8WbqqwjfwNPVeBo88egFulBO0tWJ93Y52C590AS7UiB0DiDGREmImyJDbbC2wEGBfcAGc0EsTxqnb80BRFYcLTC4xCABLekowD1pN0MSUSSu62wEl3iPUkIv4a2NsBAg7Oo");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test35() throws ConnectionError, ProcessingError {
        Request request = new UpdateCampaign(
            "651b8291-64e3-477d-9712-e2ab96cd0d6c"
        )
                .blacklistedShopIds(new String[]{"7a89b61c-b83f-4d91-9c20-7ded5ae2228a","597f87e2-0316-4c3b-8f82-8957f29aaea5","0fb0b1d8-90f6-4263-9d85-f4f1c53bfaeb","1acb9a48-67c0-4b91-b64f-39436942f717","ed551fc7-0d8b-48fd-9bfc-728e1a1dfb38","f1ef6862-57fe-486a-aec6-35f3565cdbb6","71902ddf-2eae-49d7-b8a4-87619e71c767","3973e337-4740-476b-86d6-088ccefe30d4"})
                .pointExpiresInDays(9612)
                .pointExpiresAt("2021-01-12T03:12:02.000000Z")
                .status("disabled")
                .description("ZtjqA6")
                .event("external-transaction")
                .priority(3221)
                .endsAt("2024-04-25T18:39:26.000000Z")
                .startsAt("2020-02-18T13:31:47.000000Z")
                .name("XCxB23NKDv8dBki6rCZ5MRu3n3kWR611LhXRF1WjDXemYssWVQAa0S9OWEqIPoWhsZ81p0D8THD4dpuhxNvhxjPfdLCMpGSOhV764tKT9oHgjnPne51YZOU0zGq4PpZBc0rJPOstD7C9IM7suB5w40dZFTsuKZGsFElmQpA4RSTaTlLaqlkU49OXmcM1eYLCIvDzYzwAtEksQWS");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test36() throws ConnectionError, ProcessingError {
        Request request = new UpdateCampaign(
            "651b8291-64e3-477d-9712-e2ab96cd0d6c"
        )
                .blacklistedShopIds(new String[]{"ac893094-547e-4b36-8184-1c8b91f3c8ed"})
                .setExclusive(false)
                .pointExpiresInDays(6452)
                .pointExpiresAt("2021-12-27T15:21:00.000000Z")
                .status("enabled")
                .description("gCBrhM35EfmrtOFWMml5EKRiDsWg9ZcujQMFmb4vZ2HzNm8wdK6sB9HsuClaKx3AfzVa9lboQsNDBH1uzKMqlEF94aThPURq2Q4ZM2ZH2d8EggWOOiiO67HWQCePWkLnY7y5P2vTc2kTDF85U9")
                .event("topup")
                .priority(5939)
                .endsAt("2024-05-05T03:29:53.000000Z")
                .startsAt("2021-06-01T02:41:12.000000Z")
                .name("RLtjhMxgRT9FEddBtVan5HyW6Uan9MoYMbeeBKUXDDy014vqgIch5W6XuTL0vlIdvdIMbz7wUi6BXoKUl0tR07369wBiPR32MXZafz3jffpT8lgGE");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test37() throws ConnectionError, ProcessingError {
        Request request = new UpdateCampaign(
            "651b8291-64e3-477d-9712-e2ab96cd0d6c"
        )
                .blacklistedShopIds(new String[]{"8a0367ee-3e46-4264-a357-3768b1925904","a361c0d3-0f64-4a3c-9197-9b7cbc7bb824","8c379061-034a-4c5e-a6ca-fbb64fa7f90a"})
                .subject("money")
                .setExclusive(true)
                .pointExpiresInDays(305)
                .pointExpiresAt("2024-01-06T22:44:45.000000Z")
                .status("disabled")
                .description("2T0aKhnL3FlnAD82QrpYaKuslNraOesyAiawWiyWkSV3bs4OkWhHFx3P67y")
                .event("topup")
                .priority(8998)
                .endsAt("2020-03-20T09:11:34.000000Z")
                .startsAt("2022-05-14T10:09:49.000000Z")
                .name("xWAZtUSoiVrIFnb7w6ZClkoqVajvuG5cGcBP5wA9GwSB8bfxMId7hFKERGvYa7vbD1cIywVpXocQ5N98CAVKuKRC5FLAIRiGKuI8CNBTqLCZ99AjVbK3l31NeAICSoLJdEVZoJB0H5I2jNmYRtpCMs9Tez");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test38() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("subject_more_than_or_equal", 1000);
        items.addProperty("subject_less_than", 5000);
        JsonObject items2 = new JsonObject();
        items2.addProperty("point_amount", 5);
        items2.addProperty("point_amount_unit", "percent");
        items2.addProperty("subject_more_than_or_equal", 1000);
        items2.addProperty("subject_less_than", 5000);
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("subject_more_than_or_equal", 1000);
        items3.addProperty("subject_less_than", 5000);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("subject_more_than_or_equal", 1000);
        items4.addProperty("subject_less_than", 5000);
        Request request = new UpdateCampaign(
            "651b8291-64e3-477d-9712-e2ab96cd0d6c"
        )
                .blacklistedShopIds(new String[]{"26f30113-6213-4ea7-aca1-958505591023","2659686a-b006-4e33-81be-29161e31edb0","f02ead1f-89b8-40b5-b92e-68942ebfbdc0","d598b035-aa8a-4008-a8de-f88033c0d90c","6f78321e-7303-4ad7-9105-6311fc68fba1"})
                .amountBasedPointRules(new Object[]{items,items2,items3,items4})
                .subject("all")
                .setExclusive(true)
                .pointExpiresInDays(8613)
                .pointExpiresAt("2020-06-26T07:19:03.000000Z")
                .status("enabled")
                .description("OWFExGORRYNLJdsZ6n3IGoF44i0499bTqwmusaHN4dAo0kcMwrj6lsuth9pSzmqVAxW3BZh2UFG0NdobuyCqKAyF8XBloHn7nUM7l934bPMQ7DIwFMXGuPCrmdUDxKggDFfFvOJkxhc8IPvtQD4QxNm6tX3Guvbo2vDNfvQpElqxJKgNyOMeXS2rUoCJ5iHqorIsw")
                .event("external-transaction")
                .priority(6296)
                .endsAt("2020-12-29T16:02:19.000000Z")
                .startsAt("2023-11-23T10:23:05.000000Z")
                .name("c2cBsLEwskU0m8hSr1melepO9LnwIsUcSmvb4GOUqCz9cGDIhlPt52zP7YS2DWusWLcKpd2P335Nv6jpC");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test39() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("point_amount", 5);
        items.addProperty("point_amount_unit", "percent");
        items.addProperty("product_code", "4912345678904");
        items.addProperty("is_multiply_by_count", true);
        items.addProperty("required_count", 2);
        JsonObject items2 = new JsonObject();
        items2.addProperty("point_amount", 5);
        items2.addProperty("point_amount_unit", "percent");
        items2.addProperty("product_code", "4912345678904");
        items2.addProperty("is_multiply_by_count", true);
        items2.addProperty("required_count", 2);
        JsonObject items3 = new JsonObject();
        items3.addProperty("point_amount", 5);
        items3.addProperty("point_amount_unit", "percent");
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("is_multiply_by_count", true);
        items3.addProperty("required_count", 2);
        JsonObject items4 = new JsonObject();
        items4.addProperty("point_amount", 5);
        items4.addProperty("point_amount_unit", "percent");
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("is_multiply_by_count", true);
        items4.addProperty("required_count", 2);
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("is_multiply_by_count", true);
        items5.addProperty("required_count", 2);
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("is_multiply_by_count", true);
        items6.addProperty("required_count", 2);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("subject_more_than_or_equal", 1000);
        items7.addProperty("subject_less_than", 5000);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("subject_more_than_or_equal", 1000);
        items8.addProperty("subject_less_than", 5000);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("subject_more_than_or_equal", 1000);
        items9.addProperty("subject_less_than", 5000);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("subject_more_than_or_equal", 1000);
        items10.addProperty("subject_less_than", 5000);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("subject_more_than_or_equal", 1000);
        items11.addProperty("subject_less_than", 5000);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("subject_more_than_or_equal", 1000);
        items12.addProperty("subject_less_than", 5000);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("subject_more_than_or_equal", 1000);
        items13.addProperty("subject_less_than", 5000);
        Request request = new UpdateCampaign(
            "651b8291-64e3-477d-9712-e2ab96cd0d6c"
        )
                .blacklistedShopIds(new String[]{"4e04f3fb-8bbc-4767-8937-a79ea7e39423","759e2927-17e3-4e5f-9549-a4ed7e48e0be","2d8451a6-856a-452c-aa67-e70fb59b3163","00a2ff5c-d07b-4dbc-9008-7fed6e48a88f","f5f865eb-1607-4141-8515-f55ec0702cfd"})
                .productBasedPointRules(new Object[]{items,items2,items3,items4,items5,items6})
                .amountBasedPointRules(new Object[]{items7,items8,items9,items10,items11,items12,items13})
                .subject("all")
                .setExclusive(false)
                .pointExpiresInDays(9256)
                .pointExpiresAt("2021-07-22T23:55:17.000000Z")
                .status("disabled")
                .description("jMg8VGC0KZL7VMaMEGv2NsNRGCHkqW6b190Xf2yHeAyBqIIySMiYLD3kq3Znz8pepfEmpSiLZTFdERWScAwFtubDUWmymMiDwF")
                .event("external-transaction")
                .priority(5903)
                .endsAt("2021-08-01T00:18:14.000000Z")
                .startsAt("2024-03-22T21:04:38.000000Z")
                .name("cNNLAfTp6G3m2S11HDiNC2T6Z1NRFWi9xNJqHv5TG4qAHZdsob31RGFcTjCHIRk6EOKDYDfh7IyYBfSv2V1UV4oPfCtFaYiWkYeLppJ33CkMXXFMJbGPqbgq29Gzz59vVOvin5VZAtZIBDPoHNl5n64I544K0pgRwqK");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test40() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("product_code", "4912345678904");
        items.addProperty("classification_code", "c123");
        JsonObject items2 = new JsonObject();
        items2.addProperty("product_code", "4912345678904");
        items2.addProperty("classification_code", "c123");
        JsonObject items3 = new JsonObject();
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("classification_code", "c123");
        JsonObject items4 = new JsonObject();
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("classification_code", "c123");
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("is_multiply_by_count", true);
        items5.addProperty("required_count", 2);
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("is_multiply_by_count", true);
        items6.addProperty("required_count", 2);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("is_multiply_by_count", true);
        items7.addProperty("required_count", 2);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("is_multiply_by_count", true);
        items8.addProperty("required_count", 2);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("is_multiply_by_count", true);
        items9.addProperty("required_count", 2);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("subject_more_than_or_equal", 1000);
        items11.addProperty("subject_less_than", 5000);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("subject_more_than_or_equal", 1000);
        items12.addProperty("subject_less_than", 5000);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("subject_more_than_or_equal", 1000);
        items13.addProperty("subject_less_than", 5000);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("subject_more_than_or_equal", 1000);
        items14.addProperty("subject_less_than", 5000);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("subject_more_than_or_equal", 1000);
        items15.addProperty("subject_less_than", 5000);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("subject_more_than_or_equal", 1000);
        items16.addProperty("subject_less_than", 5000);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("subject_more_than_or_equal", 1000);
        items17.addProperty("subject_less_than", 5000);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("subject_more_than_or_equal", 1000);
        items18.addProperty("subject_less_than", 5000);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("subject_more_than_or_equal", 1000);
        items19.addProperty("subject_less_than", 5000);
        Request request = new UpdateCampaign(
            "651b8291-64e3-477d-9712-e2ab96cd0d6c"
        )
                .blacklistedShopIds(new String[]{"07c18bf7-1f95-4599-8cd2-514096c6a170","883e9605-608c-432d-95f9-89894d5ab15d","572a729f-3792-4b66-a81b-2876be285653","2e4a82bd-de3b-449e-a270-8692c0591e99"})
                .blacklistedProductRules(new Object[]{items,items2,items3,items4})
                .productBasedPointRules(new Object[]{items5,items6,items7,items8,items9,items10})
                .amountBasedPointRules(new Object[]{items11,items12,items13,items14,items15,items16,items17,items18,items19})
                .subject("all")
                .setExclusive(false)
                .pointExpiresInDays(3319)
                .pointExpiresAt("2020-04-16T07:10:54.000000Z")
                .status("disabled")
                .description("9ISSZ1V5b6lHxDKXrcl2EVGtJV2Ntce9IqiVZ5m5eyekXLeKtBuImxNnX45R5ZNIieikdp8w9LWlkrqUcz43dBm26Or7FE7oxXwqyeP")
                .event("topup")
                .priority(2707)
                .endsAt("2021-04-02T02:58:31.000000Z")
                .startsAt("2022-04-10T09:41:26.000000Z")
                .name("srDTZsTHaLMAx4xhJmPNb2Vt3kMgTzAxm3nuC");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test41() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("product_code", "4912345678904");
        items.addProperty("classification_code", "c123");
        JsonObject items2 = new JsonObject();
        items2.addProperty("product_code", "4912345678904");
        items2.addProperty("classification_code", "c123");
        JsonObject items3 = new JsonObject();
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("classification_code", "c123");
        JsonObject items4 = new JsonObject();
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("classification_code", "c123");
        JsonObject items5 = new JsonObject();
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("classification_code", "c123");
        JsonObject items6 = new JsonObject();
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("classification_code", "c123");
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("is_multiply_by_count", true);
        items7.addProperty("required_count", 2);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("subject_more_than_or_equal", 1000);
        items8.addProperty("subject_less_than", 5000);
        Request request = new UpdateCampaign(
            "651b8291-64e3-477d-9712-e2ab96cd0d6c"
        )
                .blacklistedShopIds(new String[]{"afa2926d-16b4-46f4-80cd-0e1afb8204b4","3050fda5-5af2-42d1-b73d-5298d71fe154","93ba6ccd-375d-48d7-8020-3d3ee2fd9216","6e700277-2e9e-4ddc-a5a3-a9adf71bff51","4be1a9d1-5f27-46be-a588-6c67f7c93741"})
                .applicableDaysOfWeek(new Integer[]{1,1,6,5,1,0,3})
                .blacklistedProductRules(new Object[]{items,items2,items3,items4,items5,items6})
                .productBasedPointRules(new Object[]{items7})
                .amountBasedPointRules(new Object[]{items8})
                .subject("all")
                .setExclusive(false)
                .pointExpiresInDays(5093)
                .pointExpiresAt("2021-04-20T22:14:33.000000Z")
                .status("enabled")
                .description("koAN4R6PBgm1bgbkQVRY8MuhwDykulFo5mDyJw8V3XaTOkFDFDXkJRYuzmNrD0IPFMYcPpoEqcZqYNWKYupHW3vkZPbupwOmpLyfcnvR24ekndSEuijqLz34cJjz")
                .event("payment")
                .priority(804)
                .endsAt("2024-07-16T14:28:33.000000Z")
                .startsAt("2024-02-13T17:21:15.000000Z")
                .name("XV2waIpnDEjnPuGDOLqsy43AtWyT6hyzJkPIxdv4Vr2ADhNnBQ2AhJrtrRhEmEhncAz9T8Jn6tKv842hmKtJWGe0W2JoBVxOBG6QSEaMM6DcJjfAtdrmKAg3KBKDu0vlbYdVC6n9nVLo43cE33CQPF6kxIlI0uguDnziraNYM7VX5YLnlD8HOOCDlP4GZ7jbmXMO5zVMwfk3fyCehTHN");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test42() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("classification_code", "c123");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("subject_more_than_or_equal", 1000);
        items14.addProperty("subject_less_than", 5000);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("subject_more_than_or_equal", 1000);
        items15.addProperty("subject_less_than", 5000);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("subject_more_than_or_equal", 1000);
        items16.addProperty("subject_less_than", 5000);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("subject_more_than_or_equal", 1000);
        items17.addProperty("subject_less_than", 5000);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("subject_more_than_or_equal", 1000);
        items18.addProperty("subject_less_than", 5000);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("subject_more_than_or_equal", 1000);
        items19.addProperty("subject_less_than", 5000);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("subject_more_than_or_equal", 1000);
        items20.addProperty("subject_less_than", 5000);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("subject_more_than_or_equal", 1000);
        items21.addProperty("subject_less_than", 5000);
        Request request = new UpdateCampaign(
            "651b8291-64e3-477d-9712-e2ab96cd0d6c"
        )
                .blacklistedShopIds(new String[]{"8d6ce735-072d-4eb7-89a3-ba92972113cf","c1730050-a80f-4fe7-9a90-6af95d856227","3d07bd95-320b-46fd-9a1e-d50148a16919"})
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5})
                .applicableDaysOfWeek(new Integer[]{4,2,1,0})
                .blacklistedProductRules(new Object[]{items6,items7,items8,items9})
                .productBasedPointRules(new Object[]{items10,items11,items12,items13})
                .amountBasedPointRules(new Object[]{items14,items15,items16,items17,items18,items19,items20,items21})
                .subject("all")
                .setExclusive(true)
                .pointExpiresInDays(2895)
                .pointExpiresAt("2023-06-22T20:29:05.000000Z")
                .status("enabled")
                .description("Kg5EGtS1CRG8HTOfVnvp3qGXZFBsOSpPHbliv7UIdhUMzObVJcG5btiH5rur7GsubMGTjIcOXKD9o8Kba3zToGBURahT5P9DvE8UV0j2YqC15yVJZpc8KVpHARBDgg1Gn2XcmC1vS6JUWIFuWHifSCeHqDX4")
                .event("topup")
                .priority(1391)
                .endsAt("2021-02-08T05:24:06.000000Z")
                .startsAt("2020-02-28T23:46:04.000000Z")
                .name("F1kPsfFAfUD6hedBMnO5c5siBhPS0PdEUgltcrxJuLRpPyEyLzg5USUF0acnAYj9bCB7rUqwv3jfmweeo8gmjkrVbM4yoFbYRleOf9KOkq0RFzjJHwRArvOU8komJ1Atk5RVlui7mGRMrDuzhgMwi2QEwxvEfxvbfoaYN92mmS964bSnGq9n7PpIOomMWW6");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test43() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("from", "12:00");
        items7.addProperty("to", "23:59");
        JsonObject items8 = new JsonObject();
        items8.addProperty("from", "12:00");
        items8.addProperty("to", "23:59");
        JsonObject items9 = new JsonObject();
        items9.addProperty("from", "12:00");
        items9.addProperty("to", "23:59");
        JsonObject items10 = new JsonObject();
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("classification_code", "c123");
        JsonObject items11 = new JsonObject();
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("classification_code", "c123");
        JsonObject items12 = new JsonObject();
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("classification_code", "c123");
        JsonObject items13 = new JsonObject();
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("classification_code", "c123");
        JsonObject items14 = new JsonObject();
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("classification_code", "c123");
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("is_multiply_by_count", true);
        items16.addProperty("required_count", 2);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("is_multiply_by_count", true);
        items17.addProperty("required_count", 2);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("product_code", "4912345678904");
        items18.addProperty("is_multiply_by_count", true);
        items18.addProperty("required_count", 2);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("product_code", "4912345678904");
        items19.addProperty("is_multiply_by_count", true);
        items19.addProperty("required_count", 2);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("subject_more_than_or_equal", 1000);
        items20.addProperty("subject_less_than", 5000);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("subject_more_than_or_equal", 1000);
        items21.addProperty("subject_less_than", 5000);
        JsonObject items22 = new JsonObject();
        items22.addProperty("point_amount", 5);
        items22.addProperty("point_amount_unit", "percent");
        items22.addProperty("subject_more_than_or_equal", 1000);
        items22.addProperty("subject_less_than", 5000);
        JsonObject items23 = new JsonObject();
        items23.addProperty("point_amount", 5);
        items23.addProperty("point_amount_unit", "percent");
        items23.addProperty("subject_more_than_or_equal", 1000);
        items23.addProperty("subject_less_than", 5000);
        JsonObject items24 = new JsonObject();
        items24.addProperty("point_amount", 5);
        items24.addProperty("point_amount_unit", "percent");
        items24.addProperty("subject_more_than_or_equal", 1000);
        items24.addProperty("subject_less_than", 5000);
        JsonObject items25 = new JsonObject();
        items25.addProperty("point_amount", 5);
        items25.addProperty("point_amount_unit", "percent");
        items25.addProperty("subject_more_than_or_equal", 1000);
        items25.addProperty("subject_less_than", 5000);
        Request request = new UpdateCampaign(
            "651b8291-64e3-477d-9712-e2ab96cd0d6c"
        )
                .blacklistedShopIds(new String[]{"15aaff14-cd8d-4936-90b3-b8c99b619a2c"})
                .minimumNumberOfProducts(6205)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5,items6,items7,items8,items9})
                .applicableDaysOfWeek(new Integer[]{2,0,1,3,1,0,5,3})
                .blacklistedProductRules(new Object[]{items10,items11,items12,items13,items14})
                .productBasedPointRules(new Object[]{items15,items16,items17,items18,items19})
                .amountBasedPointRules(new Object[]{items20,items21,items22,items23,items24,items25})
                .subject("money")
                .setExclusive(true)
                .pointExpiresInDays(4377)
                .pointExpiresAt("2023-12-01T19:03:03.000000Z")
                .status("enabled")
                .description("smRtGnF7L4kFCWrbFqt27c2GHcIyayD2aKjXN0NBWyTy0xC6byToeZcV73t7vuEmirlewYMI5WNi6AMJzfUo3Mw8SUD48UFtXOBKAPivd5iJNrdqAuTxyB0A3WX2EcUb892jz3Nv10xFyFeM64iLpLDhctAZixWvzCjvZGuuLmpXAGJua2paAAkUgzb5zEsM")
                .event("payment")
                .priority(6343)
                .endsAt("2022-12-02T04:36:47.000000Z")
                .startsAt("2023-08-15T16:25:46.000000Z")
                .name("bxzOIV2r2JtDEGxgzX90xQ1qEwnOjzBjMdE2ZgqC6g1ENWOPFMuygZod8nuff2bwE3RDjoGhPLmonziI8gPB410GLPQCeC7jS6W3DftZcdyglmNXEppEtAwequ8PJiYpSm0jLeVc0IIOPvouCcBMs9oEUXdmuJ5CsXeAgeVmz0Xd");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test44() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("classification_code", "c123");
        JsonObject items4 = new JsonObject();
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("classification_code", "c123");
        JsonObject items5 = new JsonObject();
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("classification_code", "c123");
        JsonObject items6 = new JsonObject();
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("classification_code", "c123");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("classification_code", "c123");
        JsonObject items11 = new JsonObject();
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("classification_code", "c123");
        JsonObject items12 = new JsonObject();
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("classification_code", "c123");
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("is_multiply_by_count", true);
        items16.addProperty("required_count", 2);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("subject_more_than_or_equal", 1000);
        items17.addProperty("subject_less_than", 5000);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("subject_more_than_or_equal", 1000);
        items18.addProperty("subject_less_than", 5000);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("subject_more_than_or_equal", 1000);
        items19.addProperty("subject_less_than", 5000);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("subject_more_than_or_equal", 1000);
        items20.addProperty("subject_less_than", 5000);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("subject_more_than_or_equal", 1000);
        items21.addProperty("subject_less_than", 5000);
        Request request = new UpdateCampaign(
            "651b8291-64e3-477d-9712-e2ab96cd0d6c"
        )
                .blacklistedShopIds(new String[]{"08f4a642-e910-4927-b10d-2d76e0797efa","a6329a32-194c-455a-b153-0e2031ef8a62","74feb294-5fb1-44c3-9872-63b91c611b47","a141be05-3992-4781-b6a8-5cca0920d1aa","c5d26084-2beb-4fb1-b518-303657000592","18dd654a-7bd6-486e-a217-73a8e6b67d30"})
                .minimumNumberOfAmount(5415)
                .minimumNumberOfProducts(821)
                .applicableTimeRanges(new Object[]{items,items2})
                .applicableDaysOfWeek(new Integer[]{3,2,6,4,3,4,6,5,0,6})
                .blacklistedProductRules(new Object[]{items3,items4,items5,items6,items7,items8,items9,items10,items11,items12})
                .productBasedPointRules(new Object[]{items13,items14,items15,items16})
                .amountBasedPointRules(new Object[]{items17,items18,items19,items20,items21})
                .subject("money")
                .setExclusive(false)
                .pointExpiresInDays(5594)
                .pointExpiresAt("2020-11-12T07:00:27.000000Z")
                .status("enabled")
                .description("JhOiPCYhnxitPJhteZ9v4lYIFrYpnV35pBMGKJEJkpn6Mlr99tmpLoTFQeHIPsIBBDhi4oQ1t1s3zE32Vk24Ceen1NSjytDUp3byZcFEPnIDVyEjs1xIVAG7PJaXsPvnXy7JLPWT4P")
                .event("topup")
                .priority(1700)
                .endsAt("2021-02-26T00:46:07.000000Z")
                .startsAt("2023-01-21T04:06:34.000000Z")
                .name("IKUBKfvAdAdVhR8qFWp5tCaOkj67zOOhzPjoLUnpes4zWmpVcy9ixDX4fCfbAE0AZjhFFPDiC5Xg");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test45() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("is_multiply_by_count", true);
        items16.addProperty("required_count", 2);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("is_multiply_by_count", true);
        items17.addProperty("required_count", 2);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("product_code", "4912345678904");
        items18.addProperty("is_multiply_by_count", true);
        items18.addProperty("required_count", 2);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("subject_more_than_or_equal", 1000);
        items19.addProperty("subject_less_than", 5000);
        Request request = new UpdateCampaign(
            "651b8291-64e3-477d-9712-e2ab96cd0d6c"
        )
                .blacklistedShopIds(new String[]{"d62ee4c4-ed98-4e2c-b5a0-335b1d5dc74a","a6439743-97b7-4744-8629-2a1c3baf3247","cac2cce0-fa58-400f-9702-b8cafc609ab1"})
                .minimumNumberForCombinationPurchase(8773)
                .minimumNumberOfAmount(9565)
                .minimumNumberOfProducts(6861)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5,items6})
                .applicableDaysOfWeek(new Integer[]{1,4,2,2,6,0,4,1,5})
                .blacklistedProductRules(new Object[]{items7,items8,items9})
                .productBasedPointRules(new Object[]{items10,items11,items12,items13,items14,items15,items16,items17,items18})
                .amountBasedPointRules(new Object[]{items19})
                .subject("all")
                .setExclusive(false)
                .pointExpiresInDays(1343)
                .pointExpiresAt("2022-12-21T20:43:10.000000Z")
                .status("enabled")
                .description("st44xBM1tMMoOyWoAqWcD5ADFBSPh7o2MC5sMNAQhF0HCoj9Dj4ZpJqp2buSHK5WKI86hTWo47qb9nS")
                .event("external-transaction")
                .priority(9651)
                .endsAt("2024-09-15T11:27:27.000000Z")
                .startsAt("2022-01-07T23:48:28.000000Z")
                .name("jzCdQo4GwTY7y2Am8ZcyGh3BczuQ1HmAT4U7cCHORIBupKF2LGLWlWRqEU1R3HVfumJrkxA1RBhkJnrKn6T4UBYf7XzEp3cMOeoQItbJApNFNbizZqSEKvNBsiLTmRsG1pcvzPfSNlMjgyCm3l36NNuyyweAXXanZiLS6");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test46() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("from", "12:00");
        items7.addProperty("to", "23:59");
        JsonObject items8 = new JsonObject();
        items8.addProperty("from", "12:00");
        items8.addProperty("to", "23:59");
        JsonObject items9 = new JsonObject();
        items9.addProperty("from", "12:00");
        items9.addProperty("to", "23:59");
        JsonObject items10 = new JsonObject();
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("classification_code", "c123");
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("subject_more_than_or_equal", 1000);
        items14.addProperty("subject_less_than", 5000);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("subject_more_than_or_equal", 1000);
        items15.addProperty("subject_less_than", 5000);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("subject_more_than_or_equal", 1000);
        items16.addProperty("subject_less_than", 5000);
        Request request = new UpdateCampaign(
            "651b8291-64e3-477d-9712-e2ab96cd0d6c"
        )
                .blacklistedShopIds(new String[]{"fbabc2ea-21b9-402c-8a18-aba6fc5545d8","0eccf0ef-8956-467b-9ea4-8e2bb8381357","fa0939c5-349a-464f-aa94-c89b27afc79e"})
                .existInEachProductGroups(true)
                .minimumNumberForCombinationPurchase(651)
                .minimumNumberOfAmount(5656)
                .minimumNumberOfProducts(9444)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5,items6,items7,items8,items9})
                .applicableDaysOfWeek(new Integer[]{0,5,3,1,4})
                .blacklistedProductRules(new Object[]{items10})
                .productBasedPointRules(new Object[]{items11,items12,items13})
                .amountBasedPointRules(new Object[]{items14,items15,items16})
                .subject("money")
                .setExclusive(true)
                .pointExpiresInDays(2588)
                .pointExpiresAt("2020-10-14T16:45:05.000000Z")
                .status("enabled")
                .description("Dc2LIkAJFpX3tMiPvkskrBs7cZNQht6pUXt6QkeG9pRp1c5EcN6nLJcb0NEcuMnzKSDbJDSeKRyRniwPaN0afN8mRVY0r2kLaYAQQnNWq5gJk8ucSDE2uEYUD0C3IXLL4lH8T3KxBkSfET7NeTYdPy8UjYc9OlslQQZIq7zSOEeSzczj6ObIBdQwmJP2q6udBME")
                .event("topup")
                .priority(5548)
                .endsAt("2022-10-17T21:35:50.000000Z")
                .startsAt("2023-02-26T01:31:03.000000Z")
                .name("RlyybO27figMsVRHKPW");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test47() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("from", "12:00");
        items7.addProperty("to", "23:59");
        JsonObject items8 = new JsonObject();
        items8.addProperty("from", "12:00");
        items8.addProperty("to", "23:59");
        JsonObject items9 = new JsonObject();
        items9.addProperty("from", "12:00");
        items9.addProperty("to", "23:59");
        JsonObject items10 = new JsonObject();
        items10.addProperty("from", "12:00");
        items10.addProperty("to", "23:59");
        JsonObject items11 = new JsonObject();
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("classification_code", "c123");
        JsonObject items12 = new JsonObject();
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("classification_code", "c123");
        JsonObject items13 = new JsonObject();
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("classification_code", "c123");
        JsonObject items14 = new JsonObject();
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("classification_code", "c123");
        JsonObject items15 = new JsonObject();
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("classification_code", "c123");
        JsonObject items16 = new JsonObject();
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("classification_code", "c123");
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("is_multiply_by_count", true);
        items17.addProperty("required_count", 2);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("subject_more_than_or_equal", 1000);
        items18.addProperty("subject_less_than", 5000);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("subject_more_than_or_equal", 1000);
        items19.addProperty("subject_less_than", 5000);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("subject_more_than_or_equal", 1000);
        items20.addProperty("subject_less_than", 5000);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("subject_more_than_or_equal", 1000);
        items21.addProperty("subject_less_than", 5000);
        JsonObject items22 = new JsonObject();
        items22.addProperty("point_amount", 5);
        items22.addProperty("point_amount_unit", "percent");
        items22.addProperty("subject_more_than_or_equal", 1000);
        items22.addProperty("subject_less_than", 5000);
        JsonObject items23 = new JsonObject();
        items23.addProperty("point_amount", 5);
        items23.addProperty("point_amount_unit", "percent");
        items23.addProperty("subject_more_than_or_equal", 1000);
        items23.addProperty("subject_less_than", 5000);
        JsonObject items24 = new JsonObject();
        items24.addProperty("point_amount", 5);
        items24.addProperty("point_amount_unit", "percent");
        items24.addProperty("subject_more_than_or_equal", 1000);
        items24.addProperty("subject_less_than", 5000);
        Request request = new UpdateCampaign(
            "651b8291-64e3-477d-9712-e2ab96cd0d6c"
        )
                .blacklistedShopIds(new String[]{"a9fd01a2-26c5-4d2e-bc85-49afa92b1162","46d1d815-4464-4094-85fd-e4e619357cf5","f2289ba9-452f-45cb-a420-c6e204708cf9","ef4c18db-fa66-4015-a3ea-c3594ddab61d","6a6318ce-7418-47c4-9678-a53471c9113e","20207195-daab-4941-b26f-34f6129a4971","4dd73196-b150-464d-96da-e841fb7c08a9","0e3c0fb8-6329-4069-b217-552f5dac81ba","7be81458-be4a-4139-9523-b4c54f3dea8d"})
                .maxPointAmount(2592)
                .existInEachProductGroups(true)
                .minimumNumberForCombinationPurchase(3132)
                .minimumNumberOfAmount(1636)
                .minimumNumberOfProducts(2463)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5,items6,items7,items8,items9,items10})
                .applicableDaysOfWeek(new Integer[]{1,1,6,0,3,6,0,4,4,1})
                .blacklistedProductRules(new Object[]{items11,items12,items13,items14,items15,items16})
                .productBasedPointRules(new Object[]{items17})
                .amountBasedPointRules(new Object[]{items18,items19,items20,items21,items22,items23,items24})
                .subject("money")
                .setExclusive(false)
                .pointExpiresInDays(9941)
                .pointExpiresAt("2024-01-26T17:16:23.000000Z")
                .status("enabled")
                .description("11mpxaVIYgQo5GvBiHKw3I5f57jFE45d3P21Pzx2jnlKrw0LdNS4VtkXCDrt0LJOE3QgwrCcszhfH09Y5OthVwPmvHXBFS5mnHJDaN7ByqCBViT8YJSc5gafw5E7JxTvjUc1a")
                .event("topup")
                .priority(6965)
                .endsAt("2022-02-03T05:48:08.000000Z")
                .startsAt("2023-04-28T08:13:57.000000Z")
                .name("GpCQn8B7l65BYMvNkhEwbRq7C0zj85JoEScisdzkhxnXFFT7CXS50vaovkROQbPFa2Q0QZFPxPWcwwu3uh9fDL3S3NHvBIxMXxV");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test48() throws ConnectionError, ProcessingError {
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("product_code", "4912345678904");
        items2.addProperty("classification_code", "c123");
        JsonObject items3 = new JsonObject();
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("classification_code", "c123");
        JsonObject items4 = new JsonObject();
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("classification_code", "c123");
        JsonObject items5 = new JsonObject();
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("classification_code", "c123");
        JsonObject items6 = new JsonObject();
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("classification_code", "c123");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("classification_code", "c123");
        JsonObject items11 = new JsonObject();
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("classification_code", "c123");
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("is_multiply_by_count", true);
        items14.addProperty("required_count", 2);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("is_multiply_by_count", true);
        items15.addProperty("required_count", 2);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("is_multiply_by_count", true);
        items16.addProperty("required_count", 2);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("is_multiply_by_count", true);
        items17.addProperty("required_count", 2);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("product_code", "4912345678904");
        items18.addProperty("is_multiply_by_count", true);
        items18.addProperty("required_count", 2);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("product_code", "4912345678904");
        items19.addProperty("is_multiply_by_count", true);
        items19.addProperty("required_count", 2);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("product_code", "4912345678904");
        items20.addProperty("is_multiply_by_count", true);
        items20.addProperty("required_count", 2);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("subject_more_than_or_equal", 1000);
        items21.addProperty("subject_less_than", 5000);
        JsonObject items22 = new JsonObject();
        items22.addProperty("point_amount", 5);
        items22.addProperty("point_amount_unit", "percent");
        items22.addProperty("subject_more_than_or_equal", 1000);
        items22.addProperty("subject_less_than", 5000);
        JsonObject items23 = new JsonObject();
        items23.addProperty("point_amount", 5);
        items23.addProperty("point_amount_unit", "percent");
        items23.addProperty("subject_more_than_or_equal", 1000);
        items23.addProperty("subject_less_than", 5000);
        JsonObject items24 = new JsonObject();
        items24.addProperty("point_amount", 5);
        items24.addProperty("point_amount_unit", "percent");
        items24.addProperty("subject_more_than_or_equal", 1000);
        items24.addProperty("subject_less_than", 5000);
        JsonObject items25 = new JsonObject();
        items25.addProperty("point_amount", 5);
        items25.addProperty("point_amount_unit", "percent");
        items25.addProperty("subject_more_than_or_equal", 1000);
        items25.addProperty("subject_less_than", 5000);
        JsonObject items26 = new JsonObject();
        items26.addProperty("point_amount", 5);
        items26.addProperty("point_amount_unit", "percent");
        items26.addProperty("subject_more_than_or_equal", 1000);
        items26.addProperty("subject_less_than", 5000);
        JsonObject items27 = new JsonObject();
        items27.addProperty("point_amount", 5);
        items27.addProperty("point_amount_unit", "percent");
        items27.addProperty("subject_more_than_or_equal", 1000);
        items27.addProperty("subject_less_than", 5000);
        Request request = new UpdateCampaign(
            "651b8291-64e3-477d-9712-e2ab96cd0d6c"
        )
                .blacklistedShopIds(new String[]{"f542e138-d461-4ed6-801a-df195e015e8c","d1efe22b-c2ad-49cf-b007-15e9de1c5aad","039c3553-9bb1-4d45-9165-16cba294d5e5","ed700b32-da1f-4f45-a7a0-c7ee2c7f2e13"})
                .maxTotalPointAmount(4215)
                .maxPointAmount(2733)
                .existInEachProductGroups(true)
                .minimumNumberForCombinationPurchase(5343)
                .minimumNumberOfAmount(967)
                .minimumNumberOfProducts(6330)
                .applicableTimeRanges(new Object[]{items})
                .applicableDaysOfWeek(new Integer[]{4,5,2,3,2,0})
                .blacklistedProductRules(new Object[]{items2,items3,items4,items5,items6,items7,items8,items9,items10,items11})
                .productBasedPointRules(new Object[]{items12,items13,items14,items15,items16,items17,items18,items19,items20})
                .amountBasedPointRules(new Object[]{items21,items22,items23,items24,items25,items26,items27})
                .subject("all")
                .setExclusive(true)
                .pointExpiresInDays(566)
                .pointExpiresAt("2022-10-10T20:59:11.000000Z")
                .status("disabled")
                .description("pEZQNOtI")
                .event("topup")
                .priority(1159)
                .endsAt("2020-02-14T18:41:22.000000Z")
                .startsAt("2023-02-14T00:23:45.000000Z")
                .name("p7tnXzfq7vVXcZZXkAjYTEO65NQtFJaRQvj5yyqZjpM3EGDvxc2vHpfKAFMK87o5EDfCnjGchqfzXJGnbGhZsKdVrETxLEt4GFvxAKZGN2hkrp4AuDVFN5fAvBVJFsjezB3YP3w02SjMN");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test49() throws ConnectionError, ProcessingError {
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("from", "12:00");
        items2.addProperty("to", "23:59");
        JsonObject items3 = new JsonObject();
        items3.addProperty("from", "12:00");
        items3.addProperty("to", "23:59");
        JsonObject items4 = new JsonObject();
        items4.addProperty("from", "12:00");
        items4.addProperty("to", "23:59");
        JsonObject items5 = new JsonObject();
        items5.addProperty("from", "12:00");
        items5.addProperty("to", "23:59");
        JsonObject items6 = new JsonObject();
        items6.addProperty("from", "12:00");
        items6.addProperty("to", "23:59");
        JsonObject items7 = new JsonObject();
        items7.addProperty("from", "12:00");
        items7.addProperty("to", "23:59");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("classification_code", "c123");
        JsonObject items11 = new JsonObject();
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("classification_code", "c123");
        JsonObject items12 = new JsonObject();
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("classification_code", "c123");
        JsonObject items13 = new JsonObject();
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("classification_code", "c123");
        JsonObject items14 = new JsonObject();
        items14.addProperty("product_code", "4912345678904");
        items14.addProperty("classification_code", "c123");
        JsonObject items15 = new JsonObject();
        items15.addProperty("product_code", "4912345678904");
        items15.addProperty("classification_code", "c123");
        JsonObject items16 = new JsonObject();
        items16.addProperty("product_code", "4912345678904");
        items16.addProperty("classification_code", "c123");
        JsonObject items17 = new JsonObject();
        items17.addProperty("product_code", "4912345678904");
        items17.addProperty("classification_code", "c123");
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("product_code", "4912345678904");
        items18.addProperty("is_multiply_by_count", true);
        items18.addProperty("required_count", 2);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("product_code", "4912345678904");
        items19.addProperty("is_multiply_by_count", true);
        items19.addProperty("required_count", 2);
        JsonObject items20 = new JsonObject();
        items20.addProperty("point_amount", 5);
        items20.addProperty("point_amount_unit", "percent");
        items20.addProperty("product_code", "4912345678904");
        items20.addProperty("is_multiply_by_count", true);
        items20.addProperty("required_count", 2);
        JsonObject items21 = new JsonObject();
        items21.addProperty("point_amount", 5);
        items21.addProperty("point_amount_unit", "percent");
        items21.addProperty("subject_more_than_or_equal", 1000);
        items21.addProperty("subject_less_than", 5000);
        JsonObject items22 = new JsonObject();
        items22.addProperty("point_amount", 5);
        items22.addProperty("point_amount_unit", "percent");
        items22.addProperty("subject_more_than_or_equal", 1000);
        items22.addProperty("subject_less_than", 5000);
        JsonObject items23 = new JsonObject();
        items23.addProperty("point_amount", 5);
        items23.addProperty("point_amount_unit", "percent");
        items23.addProperty("subject_more_than_or_equal", 1000);
        items23.addProperty("subject_less_than", 5000);
        JsonObject items24 = new JsonObject();
        items24.addProperty("point_amount", 5);
        items24.addProperty("point_amount_unit", "percent");
        items24.addProperty("subject_more_than_or_equal", 1000);
        items24.addProperty("subject_less_than", 5000);
        JsonObject items25 = new JsonObject();
        items25.addProperty("point_amount", 5);
        items25.addProperty("point_amount_unit", "percent");
        items25.addProperty("subject_more_than_or_equal", 1000);
        items25.addProperty("subject_less_than", 5000);
        JsonObject items26 = new JsonObject();
        items26.addProperty("point_amount", 5);
        items26.addProperty("point_amount_unit", "percent");
        items26.addProperty("subject_more_than_or_equal", 1000);
        items26.addProperty("subject_less_than", 5000);
        JsonObject items27 = new JsonObject();
        items27.addProperty("point_amount", 5);
        items27.addProperty("point_amount_unit", "percent");
        items27.addProperty("subject_more_than_or_equal", 1000);
        items27.addProperty("subject_less_than", 5000);
        JsonObject items28 = new JsonObject();
        items28.addProperty("point_amount", 5);
        items28.addProperty("point_amount_unit", "percent");
        items28.addProperty("subject_more_than_or_equal", 1000);
        items28.addProperty("subject_less_than", 5000);
        JsonObject items29 = new JsonObject();
        items29.addProperty("point_amount", 5);
        items29.addProperty("point_amount_unit", "percent");
        items29.addProperty("subject_more_than_or_equal", 1000);
        items29.addProperty("subject_less_than", 5000);
        JsonObject items30 = new JsonObject();
        items30.addProperty("point_amount", 5);
        items30.addProperty("point_amount_unit", "percent");
        items30.addProperty("subject_more_than_or_equal", 1000);
        items30.addProperty("subject_less_than", 5000);
        Request request = new UpdateCampaign(
            "651b8291-64e3-477d-9712-e2ab96cd0d6c"
        )
                .blacklistedShopIds(new String[]{"1d28ddb6-9d70-4ab0-85b7-3632e40ec371","00ab16d7-cda1-43de-bd9c-ac011c6923f4","e3db6fbd-a6cf-40bd-aa6b-59963b5f9513","b599481a-8c0e-4e5d-a990-24338764b7ab","93b282d1-a955-4d5b-9626-a6e20a7ea8aa","01a7d945-7853-4ac5-97d0-e3742d4e4763","4046c146-033b-4af9-b5fc-05879ae0b1a6"})
                .applicableAccountMetadata(applicable_account_metadata)
                .maxTotalPointAmount(3855)
                .maxPointAmount(5034)
                .existInEachProductGroups(false)
                .minimumNumberForCombinationPurchase(6030)
                .minimumNumberOfAmount(2596)
                .minimumNumberOfProducts(5176)
                .applicableTimeRanges(new Object[]{items,items2,items3,items4,items5,items6,items7})
                .applicableDaysOfWeek(new Integer[]{2,5,4,1,1,3})
                .blacklistedProductRules(new Object[]{items8,items9,items10,items11,items12,items13,items14,items15,items16,items17})
                .productBasedPointRules(new Object[]{items18,items19,items20})
                .amountBasedPointRules(new Object[]{items21,items22,items23,items24,items25,items26,items27,items28,items29,items30})
                .subject("all")
                .setExclusive(true)
                .pointExpiresInDays(2977)
                .pointExpiresAt("2020-03-03T08:35:28.000000Z")
                .status("disabled")
                .description("tFPfUfw")
                .event("payment")
                .priority(5091)
                .endsAt("2021-07-22T02:49:01.000000Z")
                .startsAt("2022-06-30T17:18:06.000000Z")
                .name("lmY98v9Ekah2FpsKs0KWXhqcS1Ua3AEPfEflYFcCoy2dXgtWk5Skp4k9FjiQcyxviUOicaOZqLE3MkcTFr");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test50() throws ConnectionError, ProcessingError {
        JsonObject applicable_transaction_metadata = new JsonObject();
        applicable_transaction_metadata.addProperty("key", "rank");
        applicable_transaction_metadata.addProperty("value", "bronze");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("product_code", "4912345678904");
        items2.addProperty("classification_code", "c123");
        JsonObject items3 = new JsonObject();
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("classification_code", "c123");
        JsonObject items4 = new JsonObject();
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("classification_code", "c123");
        JsonObject items5 = new JsonObject();
        items5.addProperty("point_amount", 5);
        items5.addProperty("point_amount_unit", "percent");
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("is_multiply_by_count", true);
        items5.addProperty("required_count", 2);
        JsonObject items6 = new JsonObject();
        items6.addProperty("point_amount", 5);
        items6.addProperty("point_amount_unit", "percent");
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("is_multiply_by_count", true);
        items6.addProperty("required_count", 2);
        JsonObject items7 = new JsonObject();
        items7.addProperty("point_amount", 5);
        items7.addProperty("point_amount_unit", "percent");
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("is_multiply_by_count", true);
        items7.addProperty("required_count", 2);
        JsonObject items8 = new JsonObject();
        items8.addProperty("point_amount", 5);
        items8.addProperty("point_amount_unit", "percent");
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("is_multiply_by_count", true);
        items8.addProperty("required_count", 2);
        JsonObject items9 = new JsonObject();
        items9.addProperty("point_amount", 5);
        items9.addProperty("point_amount_unit", "percent");
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("is_multiply_by_count", true);
        items9.addProperty("required_count", 2);
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("product_code", "4912345678904");
        items11.addProperty("is_multiply_by_count", true);
        items11.addProperty("required_count", 2);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("product_code", "4912345678904");
        items12.addProperty("is_multiply_by_count", true);
        items12.addProperty("required_count", 2);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("product_code", "4912345678904");
        items13.addProperty("is_multiply_by_count", true);
        items13.addProperty("required_count", 2);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("subject_more_than_or_equal", 1000);
        items14.addProperty("subject_less_than", 5000);
        JsonObject items15 = new JsonObject();
        items15.addProperty("point_amount", 5);
        items15.addProperty("point_amount_unit", "percent");
        items15.addProperty("subject_more_than_or_equal", 1000);
        items15.addProperty("subject_less_than", 5000);
        JsonObject items16 = new JsonObject();
        items16.addProperty("point_amount", 5);
        items16.addProperty("point_amount_unit", "percent");
        items16.addProperty("subject_more_than_or_equal", 1000);
        items16.addProperty("subject_less_than", 5000);
        JsonObject items17 = new JsonObject();
        items17.addProperty("point_amount", 5);
        items17.addProperty("point_amount_unit", "percent");
        items17.addProperty("subject_more_than_or_equal", 1000);
        items17.addProperty("subject_less_than", 5000);
        JsonObject items18 = new JsonObject();
        items18.addProperty("point_amount", 5);
        items18.addProperty("point_amount_unit", "percent");
        items18.addProperty("subject_more_than_or_equal", 1000);
        items18.addProperty("subject_less_than", 5000);
        JsonObject items19 = new JsonObject();
        items19.addProperty("point_amount", 5);
        items19.addProperty("point_amount_unit", "percent");
        items19.addProperty("subject_more_than_or_equal", 1000);
        items19.addProperty("subject_less_than", 5000);
        Request request = new UpdateCampaign(
            "651b8291-64e3-477d-9712-e2ab96cd0d6c"
        )
                .blacklistedShopIds(new String[]{"87866201-3684-460e-8bb4-d74ee3fdd4c8","612b55d0-7982-42f6-aca8-2c14971f6c34","6173b38d-34d6-4368-b111-59cf150fbc06","de14c591-8264-4071-b9cb-51c8998b527c","afd176e3-fdc9-404f-a150-3d214e133368","20a4079e-971a-4eae-a222-a3ffb7fa7cf6"})
                .applicableTransactionMetadata(applicable_transaction_metadata)
                .applicableAccountMetadata(applicable_account_metadata)
                .maxTotalPointAmount(906)
                .maxPointAmount(3467)
                .existInEachProductGroups(false)
                .minimumNumberForCombinationPurchase(3119)
                .minimumNumberOfAmount(872)
                .minimumNumberOfProducts(1504)
                .applicableTimeRanges(new Object[]{items})
                .applicableDaysOfWeek(new Integer[]{5})
                .blacklistedProductRules(new Object[]{items2,items3,items4})
                .productBasedPointRules(new Object[]{items5,items6,items7,items8,items9,items10,items11,items12,items13})
                .amountBasedPointRules(new Object[]{items14,items15,items16,items17,items18,items19})
                .subject("all")
                .setExclusive(false)
                .pointExpiresInDays(4508)
                .pointExpiresAt("2021-04-28T08:51:45.000000Z")
                .status("enabled")
                .description("T9kQkxX80ARofdpsoiXVeBxFuF7c05YcbHgR3SFdYgsuZbSsGmFYxkuLrQMChiww3RYCIbC9pf8Wzgm4choir96Zk4wBbHbR")
                .event("payment")
                .priority(5945)
                .endsAt("2022-04-28T11:37:24.000000Z")
                .startsAt("2024-05-22T20:52:59.000000Z")
                .name("UhNPatHCNYgstx4oloda7k12vM37GlbZJKSAFS4eQAmyXqltVLiYXrByWE1iViSMuTkME7Xo3gZLzoJUOW0EXfGS");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
    @Test
    void test51() throws ConnectionError, ProcessingError {
        JsonObject applicable_transaction_metadata = new JsonObject();
        applicable_transaction_metadata.addProperty("key", "rank");
        applicable_transaction_metadata.addProperty("value", "bronze");
        JsonObject applicable_account_metadata = new JsonObject();
        applicable_account_metadata.addProperty("key", "sex");
        applicable_account_metadata.addProperty("value", "male");
        JsonObject items = new JsonObject();
        items.addProperty("from", "12:00");
        items.addProperty("to", "23:59");
        JsonObject items2 = new JsonObject();
        items2.addProperty("product_code", "4912345678904");
        items2.addProperty("classification_code", "c123");
        JsonObject items3 = new JsonObject();
        items3.addProperty("product_code", "4912345678904");
        items3.addProperty("classification_code", "c123");
        JsonObject items4 = new JsonObject();
        items4.addProperty("product_code", "4912345678904");
        items4.addProperty("classification_code", "c123");
        JsonObject items5 = new JsonObject();
        items5.addProperty("product_code", "4912345678904");
        items5.addProperty("classification_code", "c123");
        JsonObject items6 = new JsonObject();
        items6.addProperty("product_code", "4912345678904");
        items6.addProperty("classification_code", "c123");
        JsonObject items7 = new JsonObject();
        items7.addProperty("product_code", "4912345678904");
        items7.addProperty("classification_code", "c123");
        JsonObject items8 = new JsonObject();
        items8.addProperty("product_code", "4912345678904");
        items8.addProperty("classification_code", "c123");
        JsonObject items9 = new JsonObject();
        items9.addProperty("product_code", "4912345678904");
        items9.addProperty("classification_code", "c123");
        JsonObject items10 = new JsonObject();
        items10.addProperty("point_amount", 5);
        items10.addProperty("point_amount_unit", "percent");
        items10.addProperty("product_code", "4912345678904");
        items10.addProperty("is_multiply_by_count", true);
        items10.addProperty("required_count", 2);
        JsonObject items11 = new JsonObject();
        items11.addProperty("point_amount", 5);
        items11.addProperty("point_amount_unit", "percent");
        items11.addProperty("subject_more_than_or_equal", 1000);
        items11.addProperty("subject_less_than", 5000);
        JsonObject items12 = new JsonObject();
        items12.addProperty("point_amount", 5);
        items12.addProperty("point_amount_unit", "percent");
        items12.addProperty("subject_more_than_or_equal", 1000);
        items12.addProperty("subject_less_than", 5000);
        JsonObject items13 = new JsonObject();
        items13.addProperty("point_amount", 5);
        items13.addProperty("point_amount_unit", "percent");
        items13.addProperty("subject_more_than_or_equal", 1000);
        items13.addProperty("subject_less_than", 5000);
        JsonObject items14 = new JsonObject();
        items14.addProperty("point_amount", 5);
        items14.addProperty("point_amount_unit", "percent");
        items14.addProperty("subject_more_than_or_equal", 1000);
        items14.addProperty("subject_less_than", 5000);
        Request request = new UpdateCampaign(
            "651b8291-64e3-477d-9712-e2ab96cd0d6c"
        )
                .blacklistedShopIds(new String[]{"579d66c0-542a-4ea0-9ea4-11c26d44c7b9","7ab22c73-a2cd-4a2f-bbc3-3b16decc2dec","64aef242-d113-4316-bc93-4225add7aa61","28b2f27e-9446-4fea-9af4-8abd04056fda"})
                .budgetCapsAmount(1576527131)
                .applicableTransactionMetadata(applicable_transaction_metadata)
                .applicableAccountMetadata(applicable_account_metadata)
                .maxTotalPointAmount(3267)
                .maxPointAmount(6431)
                .existInEachProductGroups(true)
                .minimumNumberForCombinationPurchase(6991)
                .minimumNumberOfAmount(9120)
                .minimumNumberOfProducts(1817)
                .applicableTimeRanges(new Object[]{items})
                .applicableDaysOfWeek(new Integer[]{4,1,2,5})
                .blacklistedProductRules(new Object[]{items2,items3,items4,items5,items6,items7,items8,items9})
                .productBasedPointRules(new Object[]{items10})
                .amountBasedPointRules(new Object[]{items11,items12,items13,items14})
                .subject("money")
                .setExclusive(true)
                .pointExpiresInDays(6007)
                .pointExpiresAt("2023-02-06T09:56:17.000000Z")
                .status("enabled")
                .description("0Cr3QSzeJKZKHWOYDy8Xa1naLbp7yoCkUCkILHDjG2icoeSoFWNBFxzeu6Kj8LSmqtcTHfZNvkLrHlNhPf4I7mVEEqd8S9trsTY1RY9q3EI5KlF19OJHZirKKYCiI5WbqIsQYvdmHcE3kg67Mp0CzjOzftNuETzfXon")
                .event("topup")
                .priority(3727)
                .endsAt("2020-03-14T12:41:41.000000Z")
                .startsAt("2023-10-21T08:38:31.000000Z")
                .name("mfKJhNI2H30SlKK1O1UKOiryeoJ2KHqioForPYYFDgWpGReS1ZkiP3jHymN76Njiv2bjGekXOVbuSOvVupSap8p4f5efgdz6gyp1GcS4NU5bS5TrzXQYDyRb4tqKolqMgdRHskFZ317m16rSuV3");
        try {
            PartnerAPITest.getClient().send(request);
        } catch (PartnerRequestError e) {
            if (e.getType().equals("invalid_parameters")) {
                System.out.println(e.getType());
                System.out.println(e.getMessage());
                System.out.println(e.getRawJson());
            }
            assertNotEquals("invalid_parameters", e.getType());
        }
    }
}
